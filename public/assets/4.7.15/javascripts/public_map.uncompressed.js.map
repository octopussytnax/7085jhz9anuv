{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/assets/javascripts/cartodb/common/dialogs/export_map/export_map_view.js",
    "lib/assets/javascripts/cartodb/common/view_helpers/random_quote.js",
    "lib/assets/javascripts/cartodb/common/views/base_dialog/view.js",
    "lib/assets/javascripts/cartodb/common/views/likes/view.js",
    "lib/assets/javascripts/cartodb/common/views/mapcard_preview.js",
    "lib/assets/javascripts/cartodb/public_common/user_industries/dropdown_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_industries_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_meta_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_settings/dropdown_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_settings_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_share_view.js",
    "lib/assets/javascripts/cartodb/public_map/entry.js",
    "lib/assets/javascripts/cartodb/public_map/public_map_view.js",
    "lib/assets/javascripts/cartodb/public_map/public_map_window.js"
  ],
  "names": [],
  "mappings": "AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjhhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACn
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Lock/unlock datasets/maps dialog.\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-ok': '_confirm',\n    'click .js-download': '_download',\n    'click .js-cancel': '_abortExport'\n  }),\n\n  initialize: function (attrs) {\n    this.elder('initialize');\n\n    this._initBinds();\n  },\n\n  render_content: function () {\n    var state = this.model.get('state');\n\n    if (state === 'complete') {\n      var w = window.open(this.model.get('url'));\n\n      // If w is undefined, popup was blocked: we show a \"click to download\" modal. Else, download has started.\n      if (w === undefined) return cdb.templates.getTemplate('common/dialogs/export_map/templates/download');\n\n      w.focus();\n      this.close();\n    } else if (state === 'failure') {\n      return cdb.templates.getTemplate('common/templates/fail')({\n        msg: 'Export has failed'\n      });\n    } else if (state === 'pending' || state === 'exporting' || state === 'uploading') {\n      var loadingTitle = state.charAt(0).toUpperCase() + state.slice(1) + ' ...';\n\n      return this.getTemplate('common/templates/loading')({\n        title: loadingTitle,\n        quote: randomQuote()\n      });\n    } else {\n      return cdb.templates.getTemplate('common/dialogs/export_map/templates/confirm');\n    }\n  },\n\n  _confirm: function () {\n    this.model.requestExport();\n  },\n\n  _download: function () {\n    window.open(this.model.get('url'));\n    window.focus();\n\n    this.close();\n  },\n\n  _abortExport: function () {\n    this.model.cancelExport();\n    this.close();\n  },\n\n  _initBinds: function () {\n    this.model.bind('change:state', function () { this.render(); }, this);\n  }\n});\n",
    "/**\n * Random quote\n */\nmodule.exports = function() {\n\n  var template  = _.template('<p class=\"CDB-Text CDB-Size-medium u-altTextColor\">\"<%= quote %>\"</p><% if (author) { %><p class=\"CDB-Text CDB-Size-medium u-altTextColor u-tSpace\"><em>â€“ <%- author %></em></p><% } %>');\n\n  var quotes = [\n    { quote: \"Geographers never get lost. They just do accidental field work.\", author: \"Nicholas Chrisman\" },\n    { quote: \"Geography is just physics slowed down, with a couple of trees stuck in it.\", author: \"Terry Pratchett\" },\n    { quote: \"Not all those who wander are lost.\", author: \"J. R. R. Tolkien\" },\n    { quote: \"In that Empire, the Art of Cartography attained such Perfection that the map of a single Province occupied the entirety of a City.\", author: \"Jorge Luis Borges\" },\n    { quote: \"X marks the spot\", author: \"Indiana Jones\" },\n    { quote: \"It's turtles all the way down.\", author: null },\n    { quote: \"Remember: no matter where you go, there you are.\", author: null },\n    { quote: \"Without geography, you're nowhere!\", author: \"Jimmy Buffett\" },\n    { quote: \"our earth is a globe / whose surface we probe /<br />no map can replace her / but just try to trace her\", author: \"Steve Waterman\" },\n    { quote: \"Everything happens somewhere.\", author: \"Doctor Who\" },\n    { quote: \"A map is the greatest of all epic poems. Its lines and colors show the realization of great dreams.\", author: \"Gilbert H. Grosvenor\" },\n    { quote: \"Everything is related to everything else,<br />but near things are more related than distant things.\", author: \"Tobler's first law of geography\" },\n    { quote: \"Hic Sunt Dracones\", author: null },\n    { quote: \"Here be dragons\", author: null },\n    { quote: \"Stand in the place where you live / Now face North /<br/>Think about direction / Wonder why you haven't before\", author: \"R.E.M\" },\n    { quote: \"The virtue of maps, they show what can be done with limited space, they foresee that everything can happen therein.\", author: \"JosÃ© Saramago\" }\n  ];\n\n  var r = Math.round(Math.random() * (quotes.length - 1));\n\n  return template(quotes[r]);\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar BaseDialog = cdb.ui.common.Dialog;\n\n/**\n * Abstract view for a dialog, a kind of view that takes up the full screen overlaying any previous content.\n *\n * To be extended for a specific use-case.\n * It inherits from CartoDB.js' Dialog view so has some particular behavior/convention of how to be used, see example\n *\n * Example of how to use:\n *   // Extend this view\n *   var MyDialog = BaseDialog.extend({\n *     render_content: function() {\n *       return 'Hello world!';\n *     }\n *   });\n *\n *   // Create instance object.\n *   var dialog = new MyDialog();\n *\n *   // To render & show initially (only to be called once):\n *   dialog.appendToBody();\n */\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog is-opening',\n\n  overrideDefaults: {\n    template_name: 'common/views/base_dialog/template',\n    triggerDialogEvents: true\n  },\n\n  initialize: function() {\n    // Override defaults of parent\n    _.defaults(this.options, this.overrideDefaults);\n    this.elder('initialize');\n    this.bind('show', this._setBodyForDialogMode.bind(this, 'add'));\n    this.bind('hide', this._setBodyForDialogMode.bind(this, 'remove'));\n  },\n\n  show: function() {\n    BaseDialog.prototype.show.apply(this, arguments);\n    this.trigger('show');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogOpened');\n    }\n    this.$el.removeClass('is-closing');\n\n    // Blur current element (e.g. a <a> tag that was clicked to open this window)\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('is-newContent');\n\n    if (this._isSticky()) {\n      this.$el.addClass('is-sticky');\n    }\n\n    this.show();\n    return this;\n  },\n\n  _isSticky: function() {\n    return this.options && this.options.sticky;\n  },\n\n  close: function() {\n    this._cancel(undefined, true);\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.open for animated opening\n   */\n  open: function() {\n    BaseDialog.prototype.open.apply(this, arguments);\n    this.show();\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.hide to implement animation\n   */\n  hide: function() {\n    BaseDialog.prototype.hide.apply(this, arguments);\n    this.trigger('hide');\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._cancel to implement animation upon closing the dialog and to handle hide event.\n   */\n  _cancel: function(ev, skipCancelCallback) {\n    if (ev) this.killEvent(ev);\n\n    if (this._isSticky()) {\n      return;\n    }\n\n    this.$el.removeClass('is-opening').addClass('is-closing');\n\n    // Use timeout instead of event listener on animation since the event triggered differs depending on browser\n    // Timing won't perhaps be 100% accurate but it's good enough\n    // The timeout should match the .Dialog.is-closing animation duration.\n    var self = this;\n    setTimeout(function() {\n      // from original _cancel\n      if (self.cancel && !skipCancelCallback) {\n        self.cancel();\n      }\n      BaseDialog.prototype.hide.call(self);\n    }, 80); //ms\n\n    // Trigger events immediately, don't wait for the timeout above\n    this.trigger('hide');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogClosed');\n    }\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._ok to not hide dialog by default if there's an ok method defined.\n   */\n  _ok: function(ev) {\n    this.killEvent(ev);\n    if (this.ok) {\n      this.ok();\n    } else {\n      this.close();\n    }\n  },\n\n  _setBodyForDialogMode: function(action) {\n    $('body')[action + 'Class']('is-inDialog');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Responsible for likes (â™¥ 123) and its toggling behaviour.\n */\nmodule.exports = cdb.core.View.extend({\n  tagName: 'a',\n\n  events: {\n    'click': '_toggleLike'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/likes/template');\n    this.model.bind('change:likeable change:liked change:likes error', this.render, this);\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        likes: this.model.get(\"likes\"),\n        size: this.model.get(\"size\"),\n        show_count: this.model.get(\"show_count\"),\n        show_label: this.model.get(\"show_label\")\n      })\n    )\n    .attr({\n      class: this._classNames(),\n      href: this._hrefLocation()\n    });\n\n    return this;\n  },\n\n  _hrefLocation: function() {\n    var href = \"#/like\";\n\n    if (!this.model.get('likeable')) {\n      href = window.login_url;\n    }\n\n    return href;\n  },\n\n  _classNames: function() {\n    var classNames = ['LikesIndicator'];\n\n    if (this.model.get('likeable')) {\n      classNames.push('is-likeable');\n    }\n\n    if (this.model.get('liked')) {\n      classNames.push('is-liked');\n    }\n\n    if (this._animate) {\n      classNames.push('is-animated');\n      this.$el.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {\n        // unset animate and force re-render to avoid race conditions\n        this._animate = false;\n        this.render();\n      }.bind(this));\n    }\n\n    return classNames.join(' ');\n  },\n\n  _toggleLike: function(ev) {\n    if (this.model.get('likeable')) {\n      this.killEvent(ev);\n\n      this._animate = true;\n      this.model.toggleLiked();\n    }\n  }\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n *  MapCard previews\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    width: 300,\n    height: 170,\n    privacy: 'PUBLIC',\n    username: '',\n    visId: '',\n    mapsApiResource: '',\n    className: '',\n    authTokens: []\n  },\n\n  _TEMPLATES: {\n    // Using <%= %> instead of <%- %> because if not / characters (for example) will be escaped\n    regular: '<%- protocol %>://<%= mapsApiResource %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>',\n    cdn: '<%- protocol %>://<%- cdn %>/<%- username %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>'\n  },\n\n  initialize: function() {\n    _.each(['visId', 'mapsApiResource', 'username'], function(name) {\n      if (!this.options[name]) {\n        console.log(name + ' is required for Static Map instantiation');\n      }\n    }, this);\n  },\n\n  load: function() {\n    this._startLoader();\n    this._loadFromVisId();\n\n    return this;\n  },\n\n  _generateImageTemplate: function() {\n    return 'tpl_' + this.options.visId.replace(/-/g, '_');\n  },\n\n  _loadFromVisId: function() {\n    var protocol = this._isHTTPS() ? 'https': 'http';\n    var cdnConfig = cdb.config.get('cdn_url');\n    var template = _.template(cdnConfig ? this._TEMPLATES['cdn'] : this._TEMPLATES['regular']);\n\n    var options = {\n      protocol: protocol,\n      username: this.options.username,\n      mapsApiResource: this.options.mapsApiResource,\n      tpl: this._generateImageTemplate(),\n      width: this.options.width,\n      height: this.options.height,\n      authTokens: this._generateAuthTokensParams()\n    };\n\n    if (cdnConfig) {\n      options = _.extend(options, { cdn: cdnConfig[protocol] });\n    }\n\n    var url = template(options);\n\n    this._loadImage({}, url);\n  },\n\n  _generateAuthTokensParams: function () {\n    var authTokens = this.options.authTokens;\n    if (authTokens && authTokens.length > 0) {\n      return '?' + _.map(authTokens, function (t) { return 'auth_token=' + t; }).join('&');\n    } else {\n      return '';\n    }\n  },\n\n  _isHTTPS: function() {\n    return location.protocol.indexOf(\"https\") === 0;\n  },\n\n  loadURL: function(url) {\n    var $img = $('<img class=\"MapCard-preview\" src=\"' + url + '\" />');\n    this.$el.append($img);\n\n    if (this.options.className) {\n      $img.addClass(this.options.className);\n    }\n\n    $img.fadeIn(250);\n  },\n\n  showError: function() {\n    this._onError();\n  },\n\n  _startLoader: function() {\n    this.$el.addClass(\"is-loading\");\n  },\n\n  _stopLoader: function() {\n    this.$el.removeClass(\"is-loading\");\n  },\n\n  _onSuccess: function(url) {\n    this._stopLoader();\n    this.loadURL(url);\n    this.trigger(\"loaded\", url);\n  },\n\n  _onError: function(error) {\n    this._stopLoader();\n    this.$el.addClass(\"has-error\");\n    var $error = $('<div class=\"MapCard-error\" />');\n    this.$el.append($error);\n    $error.fadeIn(250);\n    this.trigger(\"error\");\n  },\n\n  _loadImage: function(error, url) {\n    var self = this;\n    var img  = new Image();\n\n    img.onerror = function() {\n      self._onError(error);\n    };\n\n    img.onload = function() {\n      self._onSuccess(url);\n    };\n\n    try {\n      img.src = url;\n    } catch(err) {\n      this._onError(err);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * The content of the dropdown menu opened by the industries link in the header, e.g.:\n *   CartoDB, Industries, Explore, Pricing\n *             ______/\\____\n *            |            |\n *            |    this    |\n *            |____________|\n */\nmodule.exports = cdb.admin.DropdownMenu.extend({\n  className: 'CDB-Text Dropdown Dropdown--public',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.template_base = cdb.templates.getTemplate('public_common/user_industries/dropdown_template');\n\n    // Necessary to hide dialog on click outside popup, for example.\n    cdb.god.bind('closeDialogs', this.hide, this);\n  },\n\n  render: function() {\n    this.$el.html(this.template_base());\n\n    // TODO: taken from existing code, how should dropdowns really be added to the DOM?\n    $('body').append(this.el);\n\n    return this;\n  },\n\n  clean: function() {\n    // Until https://github.com/CartoDB/cartodb.js/issues/238 is resolved:\n    $(this.options.target).unbind('click', this._handleClick);\n    this.constructor.__super__.clean.apply(this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar IndustriesDropdown = require('./user_industries/dropdown_view');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to render the user industries section in the header.\n * Expected to be created from existing DOM element.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-dropdown-target': '_createDropdown'\n  },\n\n  _createDropdown: function(ev) {\n    this.killEvent(ev);\n    cdb.god.trigger('closeDialogs');\n\n    var view = new IndustriesDropdown({\n      target: $(ev.target),\n      vertical_offset: -10,\n      horizontal_offset: $(ev.target).width()-100,\n      horizontal_position: 'left',\n      tick: 'center'\n    });\n    view.render();\n\n    view.on('onDropdownHidden', function() {\n      view.clean();\n    }, this);\n\n    view.open();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to interact with the share buttons in the content.\n *\n * - Twitter code from https://dev.twitter.com/web/intents\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-Navmenu-editLink--more': '_onClickMoreLink'\n  },\n\n  initialize: function() {\n    this.$metaList = this.$('.js-PublicMap-metaList--mobile');\n    this.$moreLink = this.$('.js-Navmenu-editLink--more');\n\n    this.model.on(\"change:active\", this._toggleMeta, this);\n  },\n\n  _onClickMoreLink: function(e) {\n    this.model.set('active', !this.model.get('active'));\n  },\n\n  _toggleMeta: function() {\n    if (this.model.get('active')) {\n      this.$moreLink.html('Less info');\n      this.$metaList.slideDown(250);\n    } else {\n      this.$moreLink.html('More info');\n      this.$metaList.slideUp(250);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * The content of the dropdown menu opened by the user avatar in the top-right of the header, e.g.:\n *   Explore, Learn, â™ž\n *             ______/\\____\n *            |            |\n *            |    this    |\n *            |____________|\n */\nmodule.exports = cdb.admin.DropdownMenu.extend({\n  className: 'CDB-Text Dropdown',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.template_base = cdb.templates.getTemplate('public_common/user_settings/dropdown_template');\n\n    // Necessary to hide dialog on click outside popup, for example.\n    cdb.god.bind('closeDialogs', this.hide, this);\n  },\n\n  render: function() {\n    var user = this.model;\n    var userUrl = user.viewUrl();\n\n    this.$el.html(this.template_base({\n      name: user.get('name') || user.get('username'),\n      email: user.get('email'),\n      isOrgOwner: user.isOrgOwner(),\n      dashboardUrl: userUrl.dashboard(),\n      publicProfileUrl: userUrl.publicProfile(),\n      accountSettingsUrl: userUrl.accountSettings(),\n      logoutUrl: userUrl.logout()\n    }));\n\n    // TODO: taken from existing code, how should dropdowns really be added to the DOM?\n    $('body').append(this.el);\n\n    return this;\n  },\n\n  clean: function() {\n    // Until https://github.com/CartoDB/cartodb.js/issues/238 is resolved:\n    $(this.options.target).unbind('click', this._handleClick);\n    this.constructor.__super__.clean.apply(this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar SettingsDropdown = require('./user_settings/dropdown_view');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to render the user settings section in the header.\n * Expected to be created from existing DOM element.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-dropdown-target': '_createDropdown'\n  },\n\n  render: function() {\n    var dashboardUrl = this.model.viewUrl().dashboard();\n    var datasetsUrl = dashboardUrl.datasets();\n    var mapsUrl = dashboardUrl.maps();\n\n    this.$el.html(\n      cdb.templates.getTemplate('public_common/user_settings_template')({\n        avatarUrl: this.model.get('avatar_url'),\n        mapsUrl: mapsUrl,\n        datasetsUrl: datasetsUrl\n      })\n    );\n\n    return this;\n  },\n\n  _createDropdown: function(ev) {\n    this.killEvent(ev);\n    cdb.god.trigger('closeDialogs');\n\n    var view = new SettingsDropdown({\n      target: $(ev.target),\n      model: this.model, // user\n      horizontal_offset: 18\n    });\n    view.render();\n\n    view.on('onDropdownHidden', function() {\n      view.clean();\n    }, this);\n\n    view.open();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to interact with the share buttons in the content.\n *\n * - Twitter code from https://dev.twitter.com/web/intents\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-Navmenu-shareLink': '_onClickShareLink',\n    'click .js-Navmenu-closeLink': '_onClickCloseLink',\n    'click .js-Navmenu-link--facebook': '_onClickFacebookLink',\n    'click .js-Navmenu-link--linkedin': '_onClickLinkedinLink'\n  },\n\n  initialize: function() {\n    this.$shareList = $('.js-Navmenu-shareList');\n\n    this.model.on(\"change:active\", this._toggleShare, this);\n\n    this._initBindings();\n  },\n\n  _initBindings: function() {\n    if (window.__twitterIntentHandler) return;\n   \n    if (document.addEventListener) {\n      document.addEventListener('click', this._handleIntent, false);\n    } else if (document.attachEvent) {\n      document.attachEvent('onclick', this._handleIntent);\n    }\n    window.__twitterIntentHandler = true;\n  },\n\n  _onClickLinkedinLink: function(e) {\n    var href = $(e.target).closest('a').attr('href'),\n        m, left, top;\n\n    var windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes',\n        width = 550,\n        height = 420,\n        winHeight = screen.height,\n        winWidth = screen.width;\n\n    left = Math.round((winWidth / 2) - (width / 2));\n    top = 0;\n\n    if (winHeight > height) {\n      top = Math.round((winHeight / 2) - (height / 2));\n      console.log(top);\n    }\n    \n    window.open(href, 'facebook', windowOptions + ',width=' + width +\n                                       ',height=' + height + ',left=' + left + ',top=' + top);\n\n    e.returnValue = false;\n    e.preventDefault && e.preventDefault();\n  },\n\n  _onClickFacebookLink: function(e) {\n    var href = $(e.target).closest('a').attr('href'),\n        m, left, top;\n\n    var windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes',\n        width = 550,\n        height = 420,\n        winHeight = screen.height,\n        winWidth = screen.width;\n\n    left = Math.round((winWidth / 2) - (width / 2));\n    top = 0;\n\n    if (winHeight > height) {\n      top = Math.round((winHeight / 2) - (height / 2));\n      console.log(top);\n    }\n    \n    window.open(href, 'facebook', windowOptions + ',width=' + width +\n                                       ',height=' + height + ',left=' + left + ',top=' + top);\n\n    e.returnValue = false;\n    e.preventDefault && e.preventDefault();\n  },\n\n  _handleIntent: function(e) {\n    e = e || window.event;\n    var target = e.target || e.srcElement,\n        m, left, top;\n \n    while (target && target.nodeName.toLowerCase() !== 'a') {\n      target = target.parentNode;\n    }\n \n    if (target && target.nodeName.toLowerCase() === 'a' && target.href) {\n      var intentRegex = /twitter\\.com(\\:\\d{2,4})?\\/intent\\/(\\w+)/,\n          windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes',\n          width = 550,\n          height = 420,\n          winHeight = screen.height,\n          winWidth = screen.width;\n\n      m = target.href.match(intentRegex);\n      if (m) {\n        left = Math.round((winWidth / 2) - (width / 2));\n        top = 0;\n \n        if (winHeight > height) {\n          top = Math.round((winHeight / 2) - (height / 2));\n        }\n \n        window.open(target.href, 'intent', windowOptions + ',width=' + width +\n                                           ',height=' + height + ',left=' + left + ',top=' + top);\n        e.returnValue = false;\n        e.preventDefault && e.preventDefault();\n      }\n    }\n  },\n\n  close: function() {\n    this.model.set('active', false);\n  },\n\n  _onClickShareLink: function(e) {\n    this.killEvent(e);\n\n    this.model.set('active', !this.model.get('active'));\n  },\n\n  _onClickCloseLink: function(e) {\n    this.close();\n  },\n\n  _toggleShare: function() {\n    if (this.model.get('active')) {\n      this.$shareList.addClass('is-active');\n    } else {\n      this.$shareList.removeClass('is-active');\n    }\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar UserSettingsView = require('../public_common/user_settings_view');\nvar UserIndustriesView = require('../public_common/user_industries_view');\nvar PublicMapWindow = require('./public_map_window');\nvar MapCardPreview = require('../common/views/mapcard_preview');\nvar LikeView = require('../common/views/likes/view');\nvar UserShareView = require('../public_common/user_share_view');\nvar UserMetaView = require('../public_common/user_meta_view');\n\n$(function() {\n\n  // No attributions and no links in this map (at least from cartodb)\n  cartodb.config.set({\n    cartodb_attributions: \"\",\n    cartodb_logo_link: \"\"\n  });\n\n  $.extend( $.easing, {\n    easeInQuad: function (x, t, b, c, d) {\n      return c*(t/=d)*t + b;\n    }\n  });\n\n  cdb.init(function() {\n    cdb.templates.namespace = 'cartodb/';\n    cdb.config.set(window.config);\n    cdb.config.set('url_prefix', window.base_url);\n\n    var userIndustriesView = new UserIndustriesView({\n      el: $('.js-user-industries'),\n    });\n\n    var userShareView = new UserShareView({\n      el: $('.js-Navmenu-share'),\n      model: new cdb.core.Model({\n        active: false\n      })\n    });\n\n    var userMetaView = new UserMetaView({\n      el: $('.js-user-meta'),\n      model: new cdb.core.Model({\n        active: false\n      })\n    });\n\n    $(document.body).bind('click', function() {\n      cdb.god.trigger('closeDialogs');\n      userShareView.close();\n    });\n\n    var authenticatedUser = new cdb.open.AuthenticatedUser();\n    authenticatedUser.bind('change', function() {\n      if (authenticatedUser.get('username')) {\n        var user = new cdb.admin.User(authenticatedUser.attributes);\n        var userSettingsView = new UserSettingsView({\n          el: $('.js-user-settings'),\n          model: user\n        });\n        userSettingsView.render();\n\n        if (user.get('username') === window.owner_username) {\n          // Show \"Edit in CartoDB\" button if logged user\n          // is the map owner ;)\n          $('.js-Navmenu-editLink').addClass('is-active');\n        }\n      }\n    });\n\n    // Vis likes\n    $('.js-likes').each(function() {\n      var likeModel = cdb.admin.Like.newByVisData({\n        likeable: false,\n        vis_id: $(this).data('vis-id'),\n        likes: $(this).data('likes-count'),\n        size: $(this).data('likes-size')\n      });\n      authenticatedUser.bind('change', function() {\n        if (authenticatedUser.get('username')) {\n          likeModel.bind('loadModelCompleted', function() {\n            likeModel.set('likeable', true);\n          });\n          likeModel.fetch();\n        }\n      });\n      var likeView = new LikeView({\n        el: this,\n        model: likeModel\n      });\n      likeView.render();\n    });\n\n    // More user vis cards\n    $('.MapCard').each(function() {\n      var visId = $(this).data('visId');\n      if (visId) {\n        var username = $(this).data('visOwnerName');\n        var mapCardPreview = new MapCardPreview({\n          el: $(this).find('.js-header'),\n          visId: $(this).data('visId'),\n          username: username,\n          mapsApiResource: cdb.config.getMapsResourceName(username)\n        });\n        mapCardPreview.load();\n      }\n    });\n\n    // Check if device is a mobile\n    var mobileDevice = /Android|webOS|iPad|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n    // Window view\n    var public_window = new PublicMapWindow({\n      el:                   window,\n      user_name:            user_name,\n      owner_username:       owner_username,\n      vis_id:               vis_id,\n      vis_name:             vis_name,\n      vizdata:              vizdata,\n      config:               config,\n      map_options:          map_options,\n      isMobileDevice:       mobileDevice,\n      belong_organization:  belong_organization\n    });\n\n    authenticatedUser.fetch();\n  });\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/** \n *  Public vis (map itself)\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._createVis();\n  },\n\n  _manageError: function(err, layer) {\n    if(layer && layer.get('type') === 'torque') {\n      this.trigger('map_error', this);\n      // hide all the overlays\n      var overlays = vis.getOverlays()\n      for (var i = 0; i < overlays.length; ++i) {\n        var o = overlays[i];\n        o.hide && o.hide();\n      }\n    }\n  },\n\n  _sendStats: function() {\n    var browser;\n    var ua = navigator.userAgent;\n    var checks = [\n      ['MSIE 11.0', 'ms11'],\n      ['MSIE 10.0', 'ms10'],\n      ['MSIE 9.0', 'ms9'],\n      ['MSIE 8.0', 'ms8'],\n      ['MSIE 7.0','ms7'],\n      ['Chrome', 'chr'],\n      ['Firefox', 'ff'],\n      ['Safari', 'ff']\n    ]\n    for(var i = 0; i < checks.length && !browser; ++i) {\n      if(ua.indexOf(checks[i][0]) !== -1) browser = checks[i][1];\n    }\n    browser = browser || 'none';\n    cartodb.core.Profiler.metric('cartodb-js.embed.' + browser).inc();\n  },\n\n  _createVis: function() {\n    var loadingTime  = cartodb.core.Profiler.metric('cartodb-js.embed.time_full_loaded').start();\n    var visReadyTime = cartodb.core.Profiler.metric('cartodb-js.embed.time_vis_loaded').start();\n    var self = this;\n\n    cartodb.createVis('map', this.options.vizdata, this.options.map_options, function(vis) {\n      self.vis = vis;\n\n      visReadyTime.end();\n\n      vis.on('load', function() { loadingTime.end() });\n\n      // Check fullscreen button\n      var fullscreen = vis.getOverlay(\"fullscreen\");\n      \n      if (fullscreen) {\n        fullscreen.options.doc = \".cartodb-public-wrapper\";\n        fullscreen.model.set(\"allowWheelOnFullscreen\", self.options.map_options.scrollwheelEnabled);\n      }\n\n      //some stats\n      self._sendStats();\n\n      // Map loaded!\n      self.trigger('map_loaded', vis, this);\n\n      self.$('.js-spinner').remove();\n\n    }).on('error', this._manageError);\n  },\n\n  // \"Public\" method\n\n  invalidateMap: function() {\n    this.vis && this.vis.mapView.invalidateSize()\n  }\n\n});",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar PublicMap = require('./public_map_view');\nvar ExportMapView = require('../common/dialogs/export_map/export_map_view');\n\n/** \n *  Public map window \"view\"\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-Navmenu-link--download-map': '_exportMap'\n  },\n\n  _exportMap: function (e) {\n    e.preventDefault();\n\n    var view = new ExportMapView({\n      model: new cdb.admin.ExportMapModel({ 'visualization_id': vis_id }),\n      clean_on_hide: true,\n      enter_to_confirm: true\n    });\n\n    view.appendToBody();\n  },\n\n  initialize: function() {\n    this.$body = $(this.el.document.body);\n    this.$map = this.$body.find('#map');\n    this._setupMapDimensions();\n    this._initBinds();\n    this._initViews();\n  },\n\n  _initViews: function() {\n    // Map view\n    this.mapView = new PublicMap(_.defaults({ el: this.$map }, this.options));\n    this.mapView.bind('map_error', this._showNotSupportedDialog, this);\n    \n    this.addView(this.mapView);\n  },\n\n  _initBinds: function() {\n    _.bindAll(this, '_onWindowResize', '_onOrientationChange');\n\n    this.$el.on('resize', this._onWindowResize);\n\n    if (!this.el.addEventListener) {\n      this.el.attachEvent('orientationchange', this._onOrientationChange, this);\n    } else {\n      this.el.addEventListener('orientationchange', this._onOrientationChange);\n    }\n  },\n\n  _showNotSupportedDialog: function() {\n    this.$body.find('#not_supported_dialog').show();\n  },\n\n  _onWindowResize: function() {\n    // Resize window\n    this._setupMapDimensions();\n    // Close dialogs\n    cdb.god.trigger(\"closeDialogs\");\n  },\n\n  _onOrientationChange: function() {\n    // Reset disqus\n    DISQUS && DISQUS.reset({ reload: true });\n    // Resize window orientation\n    this._setupMapDimensions(true);\n  },\n\n  // When window is resized, let's touch some things ;)\n  _setupMapDimensions: function(animated) {\n    var windowHeight = this.$el.height();\n    var mainInfoHeight = this.$body.find('.js-Navmenu').height();\n    var headerHeight = this.$body.find('.Header').height();\n    var landscapeMode = this.el.matchMedia && this.el.matchMedia(\"(orientation: landscape)\").matches;\n    var h, height, top;\n\n    if (this.options.isMobileDevice) {\n\n      if (landscapeMode) {\n        h = headerHeight - 20;\n      } else {\n        if (windowHeight > 670) {\n          h = 220;\n        } else { // iPhone, etc.\n          h = 140;\n        }        \n      }\n    } else {\n      h = 260;\n    }\n\n    height = windowHeight - h;\n    top    = windowHeight - (h - 80);\n\n    if (animated) {\n      this.$map.animate({ height: height }, { easing: \"easeInQuad\", duration: 150 }); \n    } else {\n\n      if (this.options.isMobileDevice) {\n        this.$map.css({ height: height, opacity: 1 }); \n      } else {\n        // On non mobile devices\n        this.$map.css({ height: windowHeight - ( mainInfoHeight + headerHeight), opacity: 1 })\n      }\n    }\n\n    // If landscape, let's scroll to show the map, and\n    // leave the header hidden\n    if (this.options.isMobileDevice && landscapeMode && $(window).scrollTop() < headerHeight) {\n      this.$body.animate({ scrollTop: headerHeight }, 600);\n    }\n\n    if (this.map_view) this.map_view.invalidateMap();\n  }\n\n});\n"
  ]
}
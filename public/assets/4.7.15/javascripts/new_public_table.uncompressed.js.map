{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/assets/javascripts/cartodb/common/dialogs/export/export_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/export/public_export_view.js",
    "lib/assets/javascripts/cartodb/common/view_factory.js",
    "lib/assets/javascripts/cartodb/common/view_helpers/random_quote.js",
    "lib/assets/javascripts/cartodb/common/views/base_dialog/view.js",
    "lib/assets/javascripts/cartodb/common/views/likes/view.js",
    "lib/assets/javascripts/cartodb/common/views/mapcard_preview.js",
    "lib/assets/javascripts/cartodb/public_common/user_industries/dropdown_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_industries_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_meta_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_settings/dropdown_view.js",
    "lib/assets/javascripts/cartodb/public_common/user_settings_view.js",
    "lib/assets/javascripts/cartodb/public_table.js"
  ],
  "names": [],
  "mappingslSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACj
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\n\n/**\n * shows a dialog to get the table exported\n * new ExportDialog({\n *  table: table_model\n * })\n *\n * (Migrated almost-as-is from old editor to not break functionality)\n */\nmodule.exports = BaseDialog.extend({\n\n  _CSV_FILTER: \"SELECT * FROM (%%sql%%) as subq \",\n  _MAX_SQL_GET_LENGTH: 1000,\n  events: BaseDialog.extendEvents({\n    'click .js-option:not(.is-disabled)': '_export'\n  }),\n\n  /**\n   * Allowed formats on the exporter\n   * @type {Array}\n   */\n  formats: [\n    {format: 'csv', fetcher: 'fetchCSV', geomRequired: false, illustrationIconModifier: 'IllustrationIcon--neutral' },\n    {format: 'shp', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--magenta' },\n    {format: 'kml', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--sunrise' },\n    {format: 'geojson', label: 'geo json', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--cyan' },\n    {format: 'svg', fetcher: 'fetchSVG', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--royalDark' }\n  ],\n\n  initialize: function() {\n    _.extend(this.options, {\n      clean_on_hide: true,\n      table_id: this.model.id\n    });\n    this.elder('initialize');\n    _.bindAll(this, '_export');\n    this.baseUrl = cdb.config.getSqlApiUrl();\n    this.model.bind('change:geometry_types', this.refresh, this);\n  },\n\n  /**\n   * search a format based on its name in the format array\n   * @param  {string} format Format name\n   * @return {Object}\n   */\n  getFormat: function(format) {\n    for(var n in this.formats) {\n      if(this.formats[n].format === format) {\n        return this.formats[n]\n      }\n    }\n  },\n\n  /**\n   * Answer to button event and lauchn the export method associated to that format\n   * @param  {Event} ev\n   */\n  _export: function(ev) {\n    this.killEvent(ev);\n    var $button = $(ev.currentTarget);\n    var formatName = $button.data('format');\n    var format = this.getFormat(formatName);\n    this[format.fetcher](formatName);\n  },\n\n\n  /**\n   * Create a dictionary with the options shared between all the methods\n   * @return {Object}\n   */\n  getBaseOptions: function() {\n    var options = {};\n    options.filename = this.model.get('name');\n\n    if (this.options.user_data) {\n      options.api_key = this.options.user_data.api_key;\n    }\n\n    return options;\n  },\n\n  /**\n   * Returns the base sql to retrieve the data\n   * @return {string}\n   */\n  getPlainSql: function() {\n    if(this.options.sql) {\n      sql = this.options.sql;\n    } else {\n      if(this.model.sqlView) {\n        sql = this.model.sqlView.getSQL();\n      } else {\n        sql = \"select * from \" + this.model.get('name')\n      }\n    }\n    return sql;\n  },\n\n  /**\n   * Returns a specific sql filtered by the_geom, used on CSV exports\n   * @return {string}\n   */\n  getGeomFilteredSql: function() {\n    var sql = this.getPlainSql();\n    // if we have \"the_geom\" in our current schema, we apply a custom sql\n    if(this.model.isGeoreferenced()) {\n      return this._CSV_FILTER.replace(/%%sql%%/g, sql);\n    }\n    // Otherwise, we apply regular sql\n    return sql;\n  },\n\n  /**\n   * Populates the hidden form with the format related values and submits them to get the file\n   * @param  {Object} options Base options\n   * @param  {String} sql Sql of the document to be retrieved\n   */\n  _fetch: function(options, sql) {\n    this._showElAndHideRest('.js-preparing-download');\n    this.$('.format').val(options.format);\n    this.$('.q').val(sql);\n    this.$('.filename').val(options.filename);\n    this.$('.api_key').val(options.api_key);\n\n    if (options.format === 'csv') {\n      this.$('.skipfields').val(\"the_geom_webmercator\");\n    } else {\n      this.$('.skipfields').val(\"the_geom,the_geom_webmercator\");\n    }\n\n    if (window.user_data && window.user_data.email) {\n      // Event tracking \"Exported table data\"\n      cdb.god.trigger('metrics', 'export_table', {\n        email: window.user_data.email\n      });\n    }\n\n    // check if the sql is big or not, and send the request as a verb or other. This is a HACK.\n    if (sql.length < this._MAX_SQL_GET_LENGTH) {\n      var location = this.$('form').attr('action') + '?' + this.$('form').serialize()\n      this._fetchGET(location);\n    } else {\n      // I can't find a way of making the iframe trigger load event when its get a form posted,\n      // so we need to leave like it was until\n      this.submit();\n    }\n\n    this.$('.db').attr('disabled', 'disabled');\n    this.$('.skipfields').attr('disabled', 'disabled');\n\n    if (this.options.autoClose) {\n      this.close();\n      this.trigger('generating', this.$('.js-preparing-download').html());\n    }\n\n  },\n\n  showError: function(error) {\n    this.$('.js-error').html(\n      this.getTemplate('common/templates/fail')({\n        msg: error\n      })\n    );\n    this._showElAndHideRest('.js-error');\n  },\n\n  _fetchGET: function(url) {\n    function getError(content) {\n      // sql api returns a json when it fails\n      // but if the browser is running some plugin that\n      // formats it, the window content is the html\n      // so search for the word \"error\"\n      var error = null;\n      try {\n        var json = JSON.parse(content);\n        error = json.error[0];\n      } catch(e) {\n        if (content && content.indexOf('error') !== -1) {\n          error = \"an error occurred\";\n        }\n      }\n      return error;\n    }\n\n    var self = this;\n    var checkInterval;\n\n    var w = window.open(url);\n    w.onload = function() {\n      clearInterval(checkInterval);\n      var error = getError(w.document.body.textContent);\n      if(error) {\n        self.showError(error);\n      } else {\n        self.close();\n      }\n      w.close();\n    };\n    window.focus();\n    checkInterval = setInterval(function check() {\n      // safari needs to check the body because it never\n      // calls onload\n      if (w.closed || (w.document && w.document.body.textContent.length === 0)) {\n        self.close();\n        clearInterval(checkInterval);\n      }\n    }, 100);\n  },\n\n  /**\n   * Submits the form. This method is separated to ease the testing\n   */\n  submit: function() {\n    this.$('form').submit();\n  },\n\n  /**\n   * Base fetch, for the formats that don't require special threatment\n   * @param  {String} formatName\n   */\n  fetch: function(formatName) {\n    var options = this.getBaseOptions();\n    options.format = formatName;\n    var sql = this.getPlainSql();\n    this._fetch(options, sql);\n  },\n\n  /**\n   * Gets the options needed for csv format and fetch the document\n   * @param  {String} formatName\n   */\n  fetchCSV: function() {\n    var options = this.getBaseOptions();\n    options.format = 'csv';\n    var sql = this.getGeomFilteredSql();\n    this.$('.skipfields').removeAttr('disabled');\n    this._fetch(options, sql);\n  },\n  /**\n   * Gets the options needed for svg format and fetch the document\n   * @param  {String} formatName\n   */\n  fetchSVG: function(){\n    this.$('.db').removeAttr('disabled');\n    this.fetch('svg');\n  },\n  /**\n   * Returns the html populated with current data\n   * @return {String}\n   */\n  render_content: function() {\n    var isGeoreferenced = this.model.isGeoreferenced();\n    if (_.isBoolean(isGeoreferenced)) {\n      return this.getTemplate('common/dialogs/export/export_template')({\n        preparingDownloadContent: this._renderLoadingContent('We are preparing your download. Depending on the size, it could take some time.'),\n        formats: this.formats,\n        url: this.baseUrl,\n        isGeoreferenced: isGeoreferenced\n      });\n    } else {\n      return this._renderLoadingContent('Checking georeferences…');\n    }\n  },\n\n  refresh: function() {\n    this.$('.content').html(this.render_content());\n  },\n\n  _renderLoadingContent: function(title) {\n    return this.getTemplate('common/templates/loading')({\n      title: title,\n      quote: cdb.editor.randomQuote()\n    });\n  },\n\n  _showElAndHideRest: function(classNameToShow) {\n    [\n      '.js-start',\n      '.js-preparing-download',\n      '.js-error'\n    ].forEach(function(className) {\n      this.$(className)[ className === classNameToShow ? 'show' : 'hide' ]();\n    }, this);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ExportView = require('./export_view');\n\n/**\n *  Shows a dialog to get the public table exported\n *\n *  new PublicExportView({\n *    table: table_model\n *  })\n *\n */\nmodule.exports = ExportView.extend({\n\n  // Events have to be extended from export view parent\n  events: {\n    'click .js-option:not(.is-disabled)': '_export',\n    'click .js-bounds': '_changeBounds',\n    'click .cancel': '_cancel',\n    'click .close': '_cancel'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.model.set('bounds', this.options.bounds);\n    this.model.bind('change:bounds', this._setBoundsCheckbox, this);\n  },\n\n  _changeBounds: function() {\n    this.model.set('bounds', !this.model.get('bounds'));\n  },\n\n  _setBoundsCheckbox: function() {\n    this.$('.js-bounds .Checkbox-input').toggleClass('is-checked', !!this.model.get('bounds'));\n  },\n\n  /**\n   * Toggle the bounds option to download the intersect or all the geometries\n   * @param  {Event} ev\n   */\n  _toggleBounds: function(ev) {\n    this.killEvent(ev);\n    var $button = $(ev.currentTarget);\n    var formatName = $button.data('format');\n    var format = this.getFormat(formatName);\n    this[format.fetcher](formatName);\n  },\n\n  /**\n   * Create a dictionary with the options shared between all the methods\n   * @return {Object}\n   */\n  getBaseOptions: function() {\n    var options = {};\n    options.filename = this.model.get('name');\n\n    // Keep dataset part in user.dataset names\n    if (options.filename.indexOf('.') != -1) {\n      options.filename = options.filename.split('.')[1];\n    }\n    \n    if (this.options.user_data) {\n      options.api_key = this.options.user_data.api_key;\n    }\n\n    return options;\n  },\n\n  /**\n   * Returns the base sql to retrieve the data\n   * @return {string}\n   */\n  getPlainSql: function() {\n    if(this.options.sql) {\n      sql = this.options.sql;\n    } else {\n      if(this.model.sqlView && this.model.get('bounds')) {\n        sql = this.model.sqlView.getSQL();\n      } else {\n        sql = \"select * from \" + this.model.get('name')\n      }\n    }\n    return sql;\n  },\n\n  /**\n   * Returns the html populated with current data\n   * @return {String}\n   */\n  render_content: function() {\n    var isGeoreferenced = this.model.isGeoreferenced();\n    var hasBounds = this.model.get('bounds');\n\n    if (_.isBoolean(isGeoreferenced)) {\n      return this.getTemplate('common/dialogs/export/public_export_template')({\n        preparingDownloadContent: this._renderLoadingContent('We are preparing your download. Depending on the size, it could take some time.'),\n        formats: this.formats,\n        url: this.baseUrl,\n        isGeoreferenced: isGeoreferenced,\n        hasBounds: hasBounds\n      });\n    } else {\n      return this._renderLoadingContent('Checking georeferences…');\n    }\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('./views/base_dialog/view');\n\n/**\n * Convenient factory to create views without having to create new files.\n */\nmodule.exports = {\n\n  createDialogByTemplate: function(templateOrStr, templateData, dialogOptions) {\n    return this.createDialogByView(this.createByTemplate(templateOrStr, templateData), dialogOptions);\n  },\n\n  /**\n   * @return {Object} instance of cdb.core.View, which takes two params of template and templateData\n   */\n  createByTemplate: function(templateOrStr, templateData, viewOpts) {\n    var template = _.isString(templateOrStr) ? cdb.templates.getTemplate(templateOrStr) : templateOrStr;\n\n    var view = new cdb.core.View(viewOpts);\n    view.render = function() {\n      this.$el.html(\n        template(templateData)\n      );\n      return this;\n    };\n\n    return view;\n  },\n\n  /**\n   * Creates a view that holds a list of views to be rendered.\n   * @param {Array} list of View object, i.e. have a render method, $el, and clean method.\n   * @param {Object,undefined} viewOpts view options, .e.g {className: 'Whatever'}\n   * @return {Object} A view\n   */\n  createByList: function(views, viewOpts) {\n    var listView = new cdb.core.View(viewOpts);\n    listView.render = function() {\n      this.clearSubViews();\n      _.each(views, function(view) {\n        this.addView(view);\n        this.$el.append(view.render().$el);\n      }, this);\n      return this;\n    };\n    return listView;\n  },\n\n  createDialogByView: function(contentView, dialogOptions) {\n\n    var options = _.extend({ clean_on_hide: true, enter_to_confirm: true }, dialogOptions);\n\n    return new (BaseDialog.extend({\n      initialize: function() {\n        this.elder('initialize');\n        this.addView(contentView);\n      },\n\n      render_content: function() {\n        return contentView.render().el;\n      }\n    }))(options);\n  }\n};\n",
    "/**\n * Random quote\n */\nmodule.exports = function() {\n\n  var template  = _.template('<p class=\"CDB-Text CDB-Size-medium u-altTextColor\">\"<%= quote %>\"</p><% if (author) { %><p class=\"CDB-Text CDB-Size-medium u-altTextColor u-tSpace\"><em>– <%- author %></em></p><% } %>');\n\n  var quotes = [\n    { quote: \"Geographers never get lost. They just do accidental field work.\", author: \"Nicholas Chrisman\" },\n    { quote: \"Geography is just physics slowed down, with a couple of trees stuck in it.\", author: \"Terry Pratchett\" },\n    { quote: \"Not all those who wander are lost.\", author: \"J. R. R. Tolkien\" },\n    { quote: \"In that Empire, the Art of Cartography attained such Perfection that the map of a single Province occupied the entirety of a City.\", author: \"Jorge Luis Borges\" },\n    { quote: \"X marks the spot\", author: \"Indiana Jones\" },\n    { quote: \"It's turtles all the way down.\", author: null },\n    { quote: \"Remember: no matter where you go, there you are.\", author: null },\n    { quote: \"Without geography, you're nowhere!\", author: \"Jimmy Buffett\" },\n    { quote: \"our earth is a globe / whose surface we probe /<br />no map can replace her / but just try to trace her\", author: \"Steve Waterman\" },\n    { quote: \"Everything happens somewhere.\", author: \"Doctor Who\" },\n    { quote: \"A map is the greatest of all epic poems. Its lines and colors show the realization of great dreams.\", author: \"Gilbert H. Grosvenor\" },\n    { quote: \"Everything is related to everything else,<br />but near things are more related than distant things.\", author: \"Tobler's first law of geography\" },\n    { quote: \"Hic Sunt Dracones\", author: null },\n    { quote: \"Here be dragons\", author: null },\n    { quote: \"Stand in the place where you live / Now face North /<br/>Think about direction / Wonder why you haven't before\", author: \"R.E.M\" },\n    { quote: \"The virtue of maps, they show what can be done with limited space, they foresee that everything can happen therein.\", author: \"José Saramago\" }\n  ];\n\n  var r = Math.round(Math.random() * (quotes.length - 1));\n\n  return template(quotes[r]);\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar BaseDialog = cdb.ui.common.Dialog;\n\n/**\n * Abstract view for a dialog, a kind of view that takes up the full screen overlaying any previous content.\n *\n * To be extended for a specific use-case.\n * It inherits from CartoDB.js' Dialog view so has some particular behavior/convention of how to be used, see example\n *\n * Example of how to use:\n *   // Extend this view\n *   var MyDialog = BaseDialog.extend({\n *     render_content: function() {\n *       return 'Hello world!';\n *     }\n *   });\n *\n *   // Create instance object.\n *   var dialog = new MyDialog();\n *\n *   // To render & show initially (only to be called once):\n *   dialog.appendToBody();\n */\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog is-opening',\n\n  overrideDefaults: {\n    template_name: 'common/views/base_dialog/template',\n    triggerDialogEvents: true\n  },\n\n  initialize: function() {\n    // Override defaults of parent\n    _.defaults(this.options, this.overrideDefaults);\n    this.elder('initialize');\n    this.bind('show', this._setBodyForDialogMode.bind(this, 'add'));\n    this.bind('hide', this._setBodyForDialogMode.bind(this, 'remove'));\n  },\n\n  show: function() {\n    BaseDialog.prototype.show.apply(this, arguments);\n    this.trigger('show');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogOpened');\n    }\n    this.$el.removeClass('is-closing');\n\n    // Blur current element (e.g. a <a> tag that was clicked to open this window)\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('is-newContent');\n\n    if (this._isSticky()) {\n      this.$el.addClass('is-sticky');\n    }\n\n    this.show();\n    return this;\n  },\n\n  _isSticky: function() {\n    return this.options && this.options.sticky;\n  },\n\n  close: function() {\n    this._cancel(undefined, true);\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.open for animated opening\n   */\n  open: function() {\n    BaseDialog.prototype.open.apply(this, arguments);\n    this.show();\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.hide to implement animation\n   */\n  hide: function() {\n    BaseDialog.prototype.hide.apply(this, arguments);\n    this.trigger('hide');\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._cancel to implement animation upon closing the dialog and to handle hide event.\n   */\n  _cancel: function(ev, skipCancelCallback) {\n    if (ev) this.killEvent(ev);\n\n    if (this._isSticky()) {\n      return;\n    }\n\n    this.$el.removeClass('is-opening').addClass('is-closing');\n\n    // Use timeout instead of event listener on animation since the event triggered differs depending on browser\n    // Timing won't perhaps be 100% accurate but it's good enough\n    // The timeout should match the .Dialog.is-closing animation duration.\n    var self = this;\n    setTimeout(function() {\n      // from original _cancel\n      if (self.cancel && !skipCancelCallback) {\n        self.cancel();\n      }\n      BaseDialog.prototype.hide.call(self);\n    }, 80); //ms\n\n    // Trigger events immediately, don't wait for the timeout above\n    this.trigger('hide');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogClosed');\n    }\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._ok to not hide dialog by default if there's an ok method defined.\n   */\n  _ok: function(ev) {\n    this.killEvent(ev);\n    if (this.ok) {\n      this.ok();\n    } else {\n      this.close();\n    }\n  },\n\n  _setBodyForDialogMode: function(action) {\n    $('body')[action + 'Class']('is-inDialog');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Responsible for likes (♥ 123) and its toggling behaviour.\n */\nmodule.exports = cdb.core.View.extend({\n  tagName: 'a',\n\n  events: {\n    'click': '_toggleLike'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/likes/template');\n    this.model.bind('change:likeable change:liked change:likes error', this.render, this);\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        likes: this.model.get(\"likes\"),\n        size: this.model.get(\"size\"),\n        show_count: this.model.get(\"show_count\"),\n        show_label: this.model.get(\"show_label\")\n      })\n    )\n    .attr({\n      class: this._classNames(),\n      href: this._hrefLocation()\n    });\n\n    return this;\n  },\n\n  _hrefLocation: function() {\n    var href = \"#/like\";\n\n    if (!this.model.get('likeable')) {\n      href = window.login_url;\n    }\n\n    return href;\n  },\n\n  _classNames: function() {\n    var classNames = ['LikesIndicator'];\n\n    if (this.model.get('likeable')) {\n      classNames.push('is-likeable');\n    }\n\n    if (this.model.get('liked')) {\n      classNames.push('is-liked');\n    }\n\n    if (this._animate) {\n      classNames.push('is-animated');\n      this.$el.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {\n        // unset animate and force re-render to avoid race conditions\n        this._animate = false;\n        this.render();\n      }.bind(this));\n    }\n\n    return classNames.join(' ');\n  },\n\n  _toggleLike: function(ev) {\n    if (this.model.get('likeable')) {\n      this.killEvent(ev);\n\n      this._animate = true;\n      this.model.toggleLiked();\n    }\n  }\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n *  MapCard previews\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    width: 300,\n    height: 170,\n    privacy: 'PUBLIC',\n    username: '',\n    visId: '',\n    mapsApiResource: '',\n    className: '',\n    authTokens: []\n  },\n\n  _TEMPLATES: {\n    // Using <%= %> instead of <%- %> because if not / characters (for example) will be escaped\n    regular: '<%- protocol %>://<%= mapsApiResource %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>',\n    cdn: '<%- protocol %>://<%- cdn %>/<%- username %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>'\n  },\n\n  initialize: function() {\n    _.each(['visId', 'mapsApiResource', 'username'], function(name) {\n      if (!this.options[name]) {\n        console.log(name + ' is required for Static Map instantiation');\n      }\n    }, this);\n  },\n\n  load: function() {\n    this._startLoader();\n    this._loadFromVisId();\n\n    return this;\n  },\n\n  _generateImageTemplate: function() {\n    return 'tpl_' + this.options.visId.replace(/-/g, '_');\n  },\n\n  _loadFromVisId: function() {\n    var protocol = this._isHTTPS() ? 'https': 'http';\n    var cdnConfig = cdb.config.get('cdn_url');\n    var template = _.template(cdnConfig ? this._TEMPLATES['cdn'] : this._TEMPLATES['regular']);\n\n    var options = {\n      protocol: protocol,\n      username: this.options.username,\n      mapsApiResource: this.options.mapsApiResource,\n      tpl: this._generateImageTemplate(),\n      width: this.options.width,\n      height: this.options.height,\n      authTokens: this._generateAuthTokensParams()\n    };\n\n    if (cdnConfig) {\n      options = _.extend(options, { cdn: cdnConfig[protocol] });\n    }\n\n    var url = template(options);\n\n    this._loadImage({}, url);\n  },\n\n  _generateAuthTokensParams: function () {\n    var authTokens = this.options.authTokens;\n    if (authTokens && authTokens.length > 0) {\n      return '?' + _.map(authTokens, function (t) { return 'auth_token=' + t; }).join('&');\n    } else {\n      return '';\n    }\n  },\n\n  _isHTTPS: function() {\n    return location.protocol.indexOf(\"https\") === 0;\n  },\n\n  loadURL: function(url) {\n    var $img = $('<img class=\"MapCard-preview\" src=\"' + url + '\" />');\n    this.$el.append($img);\n\n    if (this.options.className) {\n      $img.addClass(this.options.className);\n    }\n\n    $img.fadeIn(250);\n  },\n\n  showError: function() {\n    this._onError();\n  },\n\n  _startLoader: function() {\n    this.$el.addClass(\"is-loading\");\n  },\n\n  _stopLoader: function() {\n    this.$el.removeClass(\"is-loading\");\n  },\n\n  _onSuccess: function(url) {\n    this._stopLoader();\n    this.loadURL(url);\n    this.trigger(\"loaded\", url);\n  },\n\n  _onError: function(error) {\n    this._stopLoader();\n    this.$el.addClass(\"has-error\");\n    var $error = $('<div class=\"MapCard-error\" />');\n    this.$el.append($error);\n    $error.fadeIn(250);\n    this.trigger(\"error\");\n  },\n\n  _loadImage: function(error, url) {\n    var self = this;\n    var img  = new Image();\n\n    img.onerror = function() {\n      self._onError(error);\n    };\n\n    img.onload = function() {\n      self._onSuccess(url);\n    };\n\n    try {\n      img.src = url;\n    } catch(err) {\n      this._onError(err);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * The content of the dropdown menu opened by the industries link in the header, e.g.:\n *   CartoDB, Industries, Explore, Pricing\n *             ______/\\____\n *            |            |\n *            |    this    |\n *            |____________|\n */\nmodule.exports = cdb.admin.DropdownMenu.extend({\n  className: 'CDB-Text Dropdown Dropdown--public',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.template_base = cdb.templates.getTemplate('public_common/user_industries/dropdown_template');\n\n    // Necessary to hide dialog on click outside popup, for example.\n    cdb.god.bind('closeDialogs', this.hide, this);\n  },\n\n  render: function() {\n    this.$el.html(this.template_base());\n\n    // TODO: taken from existing code, how should dropdowns really be added to the DOM?\n    $('body').append(this.el);\n\n    return this;\n  },\n\n  clean: function() {\n    // Until https://github.com/CartoDB/cartodb.js/issues/238 is resolved:\n    $(this.options.target).unbind('click', this._handleClick);\n    this.constructor.__super__.clean.apply(this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar IndustriesDropdown = require('./user_industries/dropdown_view');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to render the user industries section in the header.\n * Expected to be created from existing DOM element.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-dropdown-target': '_createDropdown'\n  },\n\n  _createDropdown: function(ev) {\n    this.killEvent(ev);\n    cdb.god.trigger('closeDialogs');\n\n    var view = new IndustriesDropdown({\n      target: $(ev.target),\n      vertical_offset: -10,\n      horizontal_offset: $(ev.target).width()-100,\n      horizontal_position: 'left',\n      tick: 'center'\n    });\n    view.render();\n\n    view.on('onDropdownHidden', function() {\n      view.clean();\n    }, this);\n\n    view.open();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to interact with the share buttons in the content.\n *\n * - Twitter code from https://dev.twitter.com/web/intents\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-Navmenu-editLink--more': '_onClickMoreLink'\n  },\n\n  initialize: function() {\n    this.$metaList = this.$('.js-PublicMap-metaList--mobile');\n    this.$moreLink = this.$('.js-Navmenu-editLink--more');\n\n    this.model.on(\"change:active\", this._toggleMeta, this);\n  },\n\n  _onClickMoreLink: function(e) {\n    this.model.set('active', !this.model.get('active'));\n  },\n\n  _toggleMeta: function() {\n    if (this.model.get('active')) {\n      this.$moreLink.html('Less info');\n      this.$metaList.slideDown(250);\n    } else {\n      this.$moreLink.html('More info');\n      this.$metaList.slideUp(250);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * The content of the dropdown menu opened by the user avatar in the top-right of the header, e.g.:\n *   Explore, Learn, ♞\n *             ______/\\____\n *            |            |\n *            |    this    |\n *            |____________|\n */\nmodule.exports = cdb.admin.DropdownMenu.extend({\n  className: 'CDB-Text Dropdown',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.template_base = cdb.templates.getTemplate('public_common/user_settings/dropdown_template');\n\n    // Necessary to hide dialog on click outside popup, for example.\n    cdb.god.bind('closeDialogs', this.hide, this);\n  },\n\n  render: function() {\n    var user = this.model;\n    var userUrl = user.viewUrl();\n\n    this.$el.html(this.template_base({\n      name: user.get('name') || user.get('username'),\n      email: user.get('email'),\n      isOrgOwner: user.isOrgOwner(),\n      dashboardUrl: userUrl.dashboard(),\n      publicProfileUrl: userUrl.publicProfile(),\n      accountSettingsUrl: userUrl.accountSettings(),\n      logoutUrl: userUrl.logout()\n    }));\n\n    // TODO: taken from existing code, how should dropdowns really be added to the DOM?\n    $('body').append(this.el);\n\n    return this;\n  },\n\n  clean: function() {\n    // Until https://github.com/CartoDB/cartodb.js/issues/238 is resolved:\n    $(this.options.target).unbind('click', this._handleClick);\n    this.constructor.__super__.clean.apply(this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar SettingsDropdown = require('./user_settings/dropdown_view');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View to render the user settings section in the header.\n * Expected to be created from existing DOM element.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-dropdown-target': '_createDropdown'\n  },\n\n  render: function() {\n    var dashboardUrl = this.model.viewUrl().dashboard();\n    var datasetsUrl = dashboardUrl.datasets();\n    var mapsUrl = dashboardUrl.maps();\n\n    this.$el.html(\n      cdb.templates.getTemplate('public_common/user_settings_template')({\n        avatarUrl: this.model.get('avatar_url'),\n        mapsUrl: mapsUrl,\n        datasetsUrl: datasetsUrl\n      })\n    );\n\n    return this;\n  },\n\n  _createDropdown: function(ev) {\n    this.killEvent(ev);\n    cdb.god.trigger('closeDialogs');\n\n    var view = new SettingsDropdown({\n      target: $(ev.target),\n      model: this.model, // user\n      horizontal_offset: 18\n    });\n    view.render();\n\n    view.on('onDropdownHidden', function() {\n      view.clean();\n    }, this);\n\n    view.open();\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar UserSettingsView = require('./public_common/user_settings_view');\nvar UserIndustriesView = require('./public_common/user_industries_view');\nvar MapCardPreview = require('./common/views/mapcard_preview');\nvar LikeView = require('./common/views/likes/view');\nvar UserMetaView = require('./public_common/user_meta_view');\n\n/*\n * needed for new modals to be used in older js views,\n * cdb.editor namespace is needed for dependencies in export view\n *\n */\n\ncdb.editor = {\n  PublicExportView: require('./common/dialogs/export/public_export_view'),\n  randomQuote: require('./common/view_helpers/random_quote.js'),\n  ViewFactory: require('./common/view_factory')\n}\n\n$(function() {\n  cdb.init(function() {\n    cdb.templates.namespace = 'cartodb/';\n    cdb.config.set(window.config);\n    cdb.config.set('url_prefix', window.base_url);\n\n    var userIndustriesView = new UserIndustriesView({\n      el: $('.js-user-industries')\n    });\n\n    var userMetaView = new UserMetaView({\n      el: $('.js-user-meta'),\n      model: new cdb.core.Model({\n        active: false\n      })\n    });\n\n    $(document.body).bind('click', function() {\n      cdb.god.trigger('closeDialogs');\n    });\n\n    var authenticatedUser = new cdb.open.AuthenticatedUser();\n    authenticatedUser.bind('change', function() {\n      if (authenticatedUser.get('username')) {\n        var user = new cdb.admin.User(authenticatedUser.attributes);\n        var userSettingsView = new UserSettingsView({\n          el: $('.js-user-settings'),\n          model: user\n        });\n        userSettingsView.render();\n\n        $('.js-login').hide();\n        $('.js-learn').show();\n\n        if (user.get('username') === window.owner_username) {\n          // Show \"Edit in CartoDB\" button if logged user\n          // is the map owner ;)\n          $('.js-edit').css('display', 'inline-block');\n          $('.js-oneclick').hide();\n        }\n      }\n    });\n\n    $('.MapCard').each(function() {\n      var visId = $(this).data('visId');\n      if (visId) {\n        var username = $(this).data('visOwnerName');\n        var mapCardPreview = new MapCardPreview({\n          el: $(this).find('.js-header'),\n          visId: $(this).data('visId'),\n          username: username,\n          mapsApiResource: cdb.config.getMapsResourceName(username)\n        });\n        mapCardPreview.load();\n      }\n    });\n\n    $('.js-likes').each(function() {\n      var likeModel = cdb.admin.Like.newByVisData({\n        likeable: false,\n        vis_id: $(this).data('vis-id'),\n        likes: $(this).data('likes-count'),\n        size: $(this).data('likes-size')\n      });\n      authenticatedUser.bind('change', function() {\n        if (authenticatedUser.get('username')) {\n          likeModel.bind('loadModelCompleted', function() {\n            likeModel.set('likeable', true);\n          });\n          likeModel.fetch();\n        }\n      });\n      var likeView = new LikeView({\n        el: this,\n        model: likeModel\n      });\n      likeView.render();\n    });\n\n    authenticatedUser.fetch();\n  });\n\n});\n"
  ]
}
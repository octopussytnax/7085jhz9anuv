{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/assets/javascripts/cartodb/confirmation/confirmation_model.js",
    "lib/assets/javascripts/cartodb/confirmation/entry.js",
    "lib/assets/javascripts/cartodb/confirmation/main_view.js"
  ],
  "names": [],
  "mappings": "AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar cdbAdmin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar pollTimer = 2000; // Interval time between poll checkings\nvar timerMultiply = 2.5;  // Multiply interval for this number\nvar maxTries = 30; // Max tries until interval change\n\n/**\n *  User creation model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    email: '',\n    google_sign_in: false,\n    requires_validation_email: false,\n    state: '',\n    username: ''\n  },\n\n  url: function(method) {\n    var base = '/api/v1/user_creations';\n    return base + '/' + this.id;\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.bind('change:state', this._checkState, this);\n  },\n\n  _checkState: function() {\n    var state = this.get('state');\n    if (this.hasFinished() || this.hasFailed()) {\n      this.destroyCheck();\n    }\n  },\n\n  pollCheck: function() {\n    if (this.pollTimer) return;\n    var self = this;\n    var tries = 0;\n    this.pollTimer = setInterval(request, pollTimer);\n\n    function request() {\n      self.destroyCheck();\n      self.fetch();\n      ++tries;\n      // Multiply polling timer by a number when a max\n      // of tries have been reached\n      var multiply = tries > maxTries ? timerMultiply : 1 ;\n      self.pollTimer = setInterval(request, pollTimer * multiply);\n    }\n\n    // Start doing a fetch\n    request();\n  },\n\n  destroyCheck: function() {\n    clearInterval(this.pollTimer);\n    delete this.pollTimer;\n  },\n\n  hasUsedGoogle: function() {\n    return this.get('google_sign_in')\n  },\n\n  requiresValidationEmail: function() {\n    return this.get('requires_validation_email');\n  },\n\n  hasFinished: function() {\n    return this.get('state') === \"success\"\n  },\n\n  hasFailed: function() {\n    return this.get('state') === \"failure\"\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar MainView = require('./main_view');\n\n$(function() {\n  cdb.init(function() {\n    cdb.templates.namespace = 'cartodb/';\n    var confirmation = new MainView({\n      userCreationId: user_creation_id,\n      username: user_name,\n      customHosted: is_custom_install,\n      userURL: user_url\n    });\n  });\n});",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ConfirmationModel = require('./confirmation_model');\n\n/**\n *  Confirmation view\n *\n */\n\nmodule.exports = Backbone.View.extend({\n\n  el: document.body,\n\n  initialize: function(opts) {\n    if (!opts.userCreationId) {\n      throw new Error('user creation id is needed to check its state');\n    }\n    this.template = cdb.templates.getTemplate('confirmation/confirmation_info');\n    this.model = new ConfirmationModel({\n      id: opts.userCreationId\n    });\n    this._initBinds();\n\n    this.model.pollCheck();\n  },\n\n  render: function() {\n    this.$('.js-info').html(\n      this.template({\n        googleSignup: this.model.get('google_sign_in'),\n        requiresValidationEmail: this.model.requiresValidationEmail(),\n        userCreationId: this.model.get('id'),\n        state: this.model.get('state'),\n        customHosted: cdb.config.get('cartodb_com_hosted')\n      })\n    )\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', function() {\n      this._setLogo();\n      this.render();\n      if (this.model.hasFinished() && (this.model.hasUsedGoogle() || !this.model.requiresValidationEmail())) {\n        this._goToUserURL();\n      }\n    }, this);\n  },\n\n  // Instead of rendering logo each time and f**k the animation\n  // we toggle the 'is-loading' class when process has finished\n  _setLogo: function() {\n    // Loading state\n    this.$('.js-logo').toggleClass('is-loading', !this.model.hasFailed() && !this.model.hasFinished());\n\n    // Remove unnecessary notification, if needed\n    if (this.model.hasFailed()) {\n      this.$('.js-successNotification').remove();\n    } else if (this.model.hasFinished()) {\n      this.$('.js-errorNotification').remove();\n    }\n\n    // Show notification if it is failed or finished\n    if (this.model.hasFailed() || this.model.hasFinished()) {\n      this.$('.js-notification').show();\n    }\n  },\n\n  _goToUserURL: function() {\n    if (this.options.userURL) {\n      window.location.href = this.options.userURL;\n    }\n  }\n\n});\n"
  ]
}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/assets/javascripts/cartodb/confirmation/confirmation_model.js","lib/assets/javascripts/cartodb/confirmation/entry.js","lib/assets/javascripts/cartodb/confirmation/main_view.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","cdb","window","global","pollTimer","timerMultiply","maxTries","core","Model","extend","defaults","email","google_sign_in","requires_validation_email","state","username","url","method","base","this","id","initialize","_initBinds","bind","_checkState","get","hasFinished","hasFailed","destroyCheck","pollCheck","request","self","fetch","tries","multiply","setInterval","clearInterval","hasUsedGoogle","requiresValidationEmail","$","MainView","init","templates","namespace","userCreationId","user_creation_id","user_name","customHosted","is_custom_install","userURL","user_url","ConfirmationModel","Backbone","View","el","document","body","opts","template","getTemplate","model","render","html","googleSignup","config","_setLogo","_goToUserURL","toggleClass","remove","show","options","location","href"],"mappings":"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","file":"confirmation.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar cdbAdmin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar pollTimer = 2000; // Interval time between poll checkings\nvar timerMultiply = 2.5;  // Multiply interval for this number\nvar maxTries = 30; // Max tries until interval change\n\n/**\n *  User creation model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    email: '',\n    google_sign_in: false,\n    requires_validation_email: false,\n    state: '',\n    username: ''\n  },\n\n  url: function(method) {\n    var base = '/api/v1/user_creations';\n    return base + '/' + this.id;\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.bind('change:state', this._checkState, this);\n  },\n\n  _checkState: function() {\n    var state = this.get('state');\n    if (this.hasFinished() || this.hasFailed()) {\n      this.destroyCheck();\n    }\n  },\n\n  pollCheck: function() {\n    if (this.pollTimer) return;\n    var self = this;\n    var tries = 0;\n    this.pollTimer = setInterval(request, pollTimer);\n\n    function request() {\n      self.destroyCheck();\n      self.fetch();\n      ++tries;\n      // Multiply polling timer by a number when a max\n      // of tries have been reached\n      var multiply = tries > maxTries ? timerMultiply : 1 ;\n      self.pollTimer = setInterval(request, pollTimer * multiply);\n    }\n\n    // Start doing a fetch\n    request();\n  },\n\n  destroyCheck: function() {\n    clearInterval(this.pollTimer);\n    delete this.pollTimer;\n  },\n\n  hasUsedGoogle: function() {\n    return this.get('google_sign_in')\n  },\n\n  requiresValidationEmail: function() {\n    return this.get('requires_validation_email');\n  },\n\n  hasFinished: function() {\n    return this.get('state') === \"success\"\n  },\n\n  hasFailed: function() {\n    return this.get('state') === \"failure\"\n  }\n\n});\n","var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar MainView = require('./main_view');\n\n$(function() {\n  cdb.init(function() {\n    cdb.templates.namespace = 'cartodb/';\n    var confirmation = new MainView({\n      userCreationId: user_creation_id,\n      username: user_name,\n      customHosted: is_custom_install,\n      userURL: user_url\n    });\n  });\n});","var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ConfirmationModel = require('./confirmation_model');\n\n/**\n *  Confirmation view\n *\n */\n\nmodule.exports = Backbone.View.extend({\n\n  el: document.body,\n\n  initialize: function(opts) {\n    if (!opts.userCreationId) {\n      throw new Error('user creation id is needed to check its state');\n    }\n    this.template = cdb.templates.getTemplate('confirmation/confirmation_info');\n    this.model = new ConfirmationModel({\n      id: opts.userCreationId\n    });\n    this._initBinds();\n\n    this.model.pollCheck();\n  },\n\n  render: function() {\n    this.$('.js-info').html(\n      this.template({\n        googleSignup: this.model.get('google_sign_in'),\n        requiresValidationEmail: this.model.requiresValidationEmail(),\n        userCreationId: this.model.get('id'),\n        state: this.model.get('state'),\n        customHosted: cdb.config.get('cartodb_com_hosted')\n      })\n    )\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', function() {\n      this._setLogo();\n      this.render();\n      if (this.model.hasFinished() && (this.model.hasUsedGoogle() || !this.model.requiresValidationEmail())) {\n        this._goToUserURL();\n      }\n    }, this);\n  },\n\n  // Instead of rendering logo each time and f**k the animation\n  // we toggle the 'is-loading' class when process has finished\n  _setLogo: function() {\n    // Loading state\n    this.$('.js-logo').toggleClass('is-loading', !this.model.hasFailed() && !this.model.hasFinished());\n\n    // Remove unnecessary notification, if needed\n    if (this.model.hasFailed()) {\n      this.$('.js-successNotification').remove();\n    } else if (this.model.hasFinished()) {\n      this.$('.js-errorNotification').remove();\n    }\n\n    // Show notification if it is failed or finished\n    if (this.model.hasFailed() || this.model.hasFinished()) {\n      this.$('.js-notification').show();\n    }\n  },\n\n  _goToUserURL: function() {\n    if (this.options.userURL) {\n      window.location.href = this.options.userURL;\n    }\n  }\n\n});\n"]}
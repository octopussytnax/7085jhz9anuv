{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/assets/javascripts/cartodb/common/background_polling/background_polling_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/background_polling_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/analysis_collection.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/geocoding_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/geocoding_model_poller.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/geocodings_collection.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/import_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/import_model_poller.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/imports_collection.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/imports_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/lon_lat_geocoding_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/pecan_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/poller.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/upload_config.js",
    "lib/assets/javascripts/cartodb/common/background_polling/models/upload_model.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/analysis/background_analysis_item_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/background_polling_header_title_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/background_polling_header_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/geocodings/background_geocoding_item_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/geocodings/geocoding_result_details_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/imports/background_import_item_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/imports/background_import_limit_view.js",
    "lib/assets/javascripts/cartodb/common/background_polling/views/imports/twitter_import_details_view.js",
    "lib/assets/javascripts/cartodb/common/batch_process_items.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/add_custom_basemap_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/add_custom_basemap_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/mapbox/mapbox_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/mapbox/mapbox_to_tile_layer_factory.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/mapbox/mapbox_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/nasa/nasa_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/nasa/nasa_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/tabs_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/tile_json/tile_json_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/tile_json/tile_json_view_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/layer_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/layer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/layers_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/select_layer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/wms_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/wms/wms_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/xyz/xyz_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/add_custom_basemap/xyz/xyz_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/builder_features_warning/builder_features_warning_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_lock/change_lock_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_lock/change_lock_view_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/change_privacy_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/option_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/options_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/password_option_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/grantables_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/group_details_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/permission_toggler_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/permission_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/share_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/share_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/share/user_details_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/change_privacy/start_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/create_listing.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/footer/guessing_toggler_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/footer/privacy_toggler_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets/content_result_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets/dataset_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets/datasets_paginator_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets/remote_dataset_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets_list_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/datasets_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/import_options.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/data_import/data_form_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/data_import/data_header_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_arcgis_selected_dataset_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_arcgis_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_data_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_default_fallback_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_default_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/import_selected_dataset_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/import_service_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_header_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_item_description_format.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_item_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_items_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_list_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_list_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/service_import/service_loader_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/credits_info_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/credits_usage_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/import_twitter_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/twitter_categories/twitter_categories_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/twitter_categories/twitter_categories_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/twitter_categories/twitter_category_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports/twitter_import/twitter_categories/twitter_category_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/imports_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create/listing/navigation_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/create_vis_first/create_vis_first_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/delete_column/delete_column_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/delete_items_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/delete_items_view_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/delete_layer/delete_layer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/delete_row/delete_row_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/duplicate_dataset_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/duplicate_vis_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/edit_vis_metadata/edit_vis_form_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/edit_vis_metadata/edit_vis_metadata_dialog_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/edit_vis_metadata/edit_vis_metadata_dialog_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/export/export_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/export_map/export_map_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/feature_data/add_column/add_column_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/feature_data/feature_data_dialog_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/feature_data/form_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/feature_data/form_field/form_field_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/feature_data/form_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/admin_regions_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/choose_geometry_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/city_names_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/default_footer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/geocode_stuff_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/geometry_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/georeference_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/georeference_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/ip_addresses_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/lon_lat_columns_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/postal_codes_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/row_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/row_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/rows_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/steps_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/estimation_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/quota_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/street_addresses_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/street_addresses_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/street_row_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/street_addresses/street_row_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/tab_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/georeference/user_geocoding_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/limits_reach/limits_reached_content_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/limits_reach/limits_reached_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/limits_reach/user_plan_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/limits_reach/user_plans_collection.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/add_layer/footer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/add_layer_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/add_layer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/assets_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/assets_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/box_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/data/maki_icons.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/data/patterns.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/data/pin_maps.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/data/simpleicon.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/dropbox_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/file_upload_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/footer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/navigation_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/static_assets_item_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/upload_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker/user_icons_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/image_picker_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/map/scratch_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/choose_key_columns_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/choose_key_columns_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/column_merge_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/footer_info_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/generate_column_merge_sql.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/select_columns_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_merge/select_columns_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/column_selector_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/columns_selector_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/footer_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/merge_datasets_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/merge_datasets_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/merge_flavor_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/merge_step_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/merge_step_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/choose_merge_method_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/choose_right_dataset_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/footer_info_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/generate_spatial_merge_sql.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/merge_method_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/merge_methods/avg_merge_method.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/merge_methods/count_merge_method.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/merge_methods/sum_merge_method.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/spatial_merge_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/spatial_merge/spatial_merge_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/sticky_header_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/merge_datasets/tables_selector_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/pecan/pecan_card.js",
    "lib/assets/javascripts/cartodb/common/dialogs/pecan/pecan_dialog_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/pecan/pecan_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/publish/options/view_model.js",
    "lib/assets/javascripts/cartodb/common/dialogs/publish/publish_option_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/publish/publish_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/static_image/advanced_export_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/static_image/export_image_result_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/sync_dataset/interval_view.js",
    "lib/assets/javascripts/cartodb/common/dialogs/sync_dataset/sync_dataset_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/boolean_field/boolean_field_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/date_field/date_field_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/date_field/date_picker/calendar_dropdown_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/date_field/date_picker/date_picker_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/date_field/time_input/time_input_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/edit_field_model.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/edit_field_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/number_field/number_field_view.js",
    "lib/assets/javascripts/cartodb/common/edit_fields/string_field/string_field_view.js",
    "lib/assets/javascripts/cartodb/common/forms/spinner.js",
    "lib/assets/javascripts/cartodb/common/mamufas_import/mamufas_import_dialog_view.js",
    "lib/assets/javascripts/cartodb/common/mamufas_import/mamufas_import_view.js",
    "lib/assets/javascripts/cartodb/common/paged_search_model.js",
    "lib/assets/javascripts/cartodb/common/service_models/service_oauth_model.js",
    "lib/assets/javascripts/cartodb/common/service_models/service_token_model.js",
    "lib/assets/javascripts/cartodb/common/view_factory.js",
    "lib/assets/javascripts/cartodb/common/view_helpers/navigate_through_router.js",
    "lib/assets/javascripts/cartodb/common/view_helpers/pluralize_string.js",
    "lib/assets/javascripts/cartodb/common/view_helpers/random_quote.js",
    "lib/assets/javascripts/cartodb/common/views/base_dialog/view.js",
    "lib/assets/javascripts/cartodb/common/views/date_pickers/dates_range_picker.js",
    "lib/assets/javascripts/cartodb/common/views/error_details_view.js",
    "lib/assets/javascripts/cartodb/common/views/likes/view.js",
    "lib/assets/javascripts/cartodb/common/views/mapcard_preview.js",
    "lib/assets/javascripts/cartodb/common/views/paged_search/paged_search_view.js",
    "lib/assets/javascripts/cartodb/common/views/pagination/model.js",
    "lib/assets/javascripts/cartodb/common/views/pagination/view.js",
    "lib/assets/javascripts/cartodb/common/views/warnings_details_view.js",
    "lib/assets/javascripts/cartodb/common/visualizations_fetch_model.js",
    "lib/assets/javascripts/cartodb/editor.js",
    "lib/assets/javascripts/cartodb/editor/background_polling_model.js",
    "node_modules/cartodb-pecan/src/cartocss.js",
    "node_modules/cartodb-pecan/src/cartocss/color-ramps.js",
    "node_modules/cartodb-pecan/src/cartocss/get-default-css-for-geometry-type.js",
    "node_modules/cartodb-pecan/src/cartocss/get-geo-attr.js",
    "node_modules/cartodb-pecan/src/deep-defaults.js",
    "node_modules/cartodb-pecan/src/get-method-properties.js",
    "node_modules/cartodb-pecan/src/get-weight-from-shape.js",
    "node_modules/cartodb-pecan/src/guess-map.js",
    "node_modules/cartodb-pecan/src/has-enough-to-guess.js",
    "node_modules/cartodb-pecan/src/pecan.js",
    "node_modules/queue-async/build/queue.js"
  ],
  "names": [],
  "mappingslhtznlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACljGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjtxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvzlrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACzpnzxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnvzvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpxrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjjjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnjlPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxjlrttlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACntJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtvjpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtnv7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpnxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClvWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACznHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvtbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChtxxvjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACrnxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnn
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ImportsCollection = require('./models/imports_collection');\nvar GeocodingsCollection = require('./models/geocodings_collection');\nvar AnalysisCollection = require('./models/analysis_collection');\nvar pollingsTimer = 3000;\n\n/**\n *  Background polling default model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    showGeocodingDatasetURLButton: false,\n    showSuccessDetailsButton: true,\n    geocodingsPolling: false, // enable geocodings polling\n    importsPolling: false // enable imports polling\n  },\n\n  initialize: function(attrs, opts) {\n    this.user = opts.user;\n    this.vis = opts.vis;\n    this.importsCollection = opts.importsCollection || new ImportsCollection(null, { user: this.user });\n    this.geocodingsCollection = opts.geocodingsCollection || new GeocodingsCollection(null, { user: this.user, vis: this.vis });\n    this.analysisCollection = opts.anaylysisCollection || new AnalysisCollection(null, { user: this.user });\n    this._initBinds();\n    this.startPollings();\n  },\n\n  _initBinds: function() {\n    this.importsCollection.bind('change:state', function(mdl) {\n      this.trigger('change', mdl, this);\n      this._onImportsStateChange(mdl)\n    }, this);\n    this.importsCollection.bind('remove', function(mdl) {\n      this.trigger('importRemoved', mdl, this);\n    }, this);\n    this.importsCollection.bind('add', function(mdl) {\n      this.trigger('importAdded', mdl, this);\n    }, this);\n\n    this.geocodingsCollection.bind('change:state', function(mdl) {\n      this.trigger('change', mdl, this);\n      this._onGeocodingsStateChange(mdl);\n    }, this);\n    this.geocodingsCollection.bind('remove', function(mdl) {\n      this.trigger('geocodingRemoved', mdl, this);\n    }, this);\n    this.geocodingsCollection.bind('add', function(mdl) {\n      this.trigger('geocodingAdded', mdl, this);\n    }, this);\n\n    this.analysisCollection.bind('reset', function() {\n      if (this.analysisCollection.size() > 0) {\n        this.trigger('analysisAdded', this.analysisCollection, this);\n      } else {\n        this.trigger('analysisRemoved', this.analysisCollection, this);  \n      }\n    }, this); \n\n    this.analysisCollection.bind('change:state', function(mdl) {\n      this._onAnalysisStateChange(mdl, this.analysisCollection);\n    }, this);\n  },\n\n  // Helper functions\n\n  getTotalFailedItems: function() {\n    return this.importsCollection.failedItems().length + this.geocodingsCollection.failedItems().length;\n  },\n\n  removeImportItem: function(mdl) {\n    if (!mdl) {\n      return false;\n    }\n    this.importsCollection.remove(mdl);\n  },\n\n  addImportItem: function(mdl) {\n    if (!mdl) {\n      return false;\n    }\n    this.importsCollection.add(mdl);\n  },\n\n  removeGeocodingItem: function(mdl) {\n    if (!mdl || !this.canAddImport()) {\n      return false;\n    }\n    this.geocodingsCollection.remove(mdl);\n  },\n\n  addGeocodingItem: function(mdl) {\n    if (!mdl || !this.canAddGeocoding()) {\n      return false;\n    }\n    this.geocodingsCollection.add(mdl);\n  },\n\n  removeAnalysis: function() {\n    this.analysisCollection.destroyCheck();\n    this.analysisCollection.reset();\n  },\n\n  addAnalysis: function(array) {\n    if (!array || !this.canAddAnalysis()) {\n      return false;\n    }\n    this.analysisCollection.reset(array);\n  },\n\n  canAddImport: function() {\n    return this.importsCollection.canImport();\n  },\n\n  canAddGeocoding: function() {\n    return this.geocodingsCollection.canGeocode();\n  },\n\n  canAddAnalysis: function() {\n    return this.analysisCollection.canStartPecan();\n  },\n\n  getTotalImports: function() {\n    return this.importsCollection.size();\n  },\n\n  getTotalGeocodings: function() {\n    return this.geocodingsCollection.size();\n  },\n\n  getTotalAnalysis: function() {\n    return this.analysisCollection.size() > 0 ? 1 : 0;\n  },\n\n  getTotalPollings: function() {\n    return this.importsCollection.size() + this.geocodingsCollection.size() + ( this.analysisCollection.isAnalyzing() ? 1 : 0 );\n  },\n\n  stopPollings: function() {\n    if (this.get('geocodingsPolling')) {\n      this.geocodingsCollection.destroyCheck();\n    }\n    if (this.get('importsPolling')) {\n      this.importsCollection.destroyCheck();\n    }\n  },\n\n  startPollings: function() {\n    var self = this;\n    // Don't start pollings inmediately, \n    // wait some seconds\n    setTimeout(function() {\n      if (self.get('geocodingsPolling')) {\n        self.geocodingsCollection.pollCheck();\n      }\n      if (self.get('importsPolling')) {\n        self.importsCollection.pollCheck();\n      }  \n    }, pollingsTimer);\n  },\n\n  // onChange functions\n  _onImportsStateChange: function() {},\n\n  _onGeocodingsStateChange: function() {},\n\n  _onAnalysisStateChange: function() {},\n\n  clean: function() {\n    this.importsCollection.unbind(null, null, this);\n    this.geocodingsCollection.unbind(null, null, this);\n    this.analysisCollection.unbind(null, null, this);\n    this.elder('clean');\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ImportItemView = require('./views/imports/background_import_item_view');\nvar AnalysisItemView = require('./views/analysis/background_analysis_item_view');\nvar GeocodingItemView = require('./views/geocodings/background_geocoding_item_view');\nvar ImportLimitItemView = require('./views/imports/background_import_limit_view');\nvar ImportsModel = require('./models/imports_model');\nvar GeocodingModel = require('./models/geocoding_model');\nvar BackgroundPollingModel = require('./background_polling_model');\nvar BackgroundPollingHeaderView = require('./views/background_polling_header_view');\n\n/**\n *  Background polling view\n *\n *  It will pool all polling operations that happens\n *  in Cartodb, as in imports and geocodings\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'BackgroundPolling',\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.createVis = this.options.createVis;\n    this.vis = this.options.vis;\n    if (!this.model) {\n      this.model = new BackgroundPollingModel({}, {\n        user: this.user\n      });\n    }\n    this.template = cdb.templates.getTemplate('common/background_polling/background_polling');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(this.template());\n    this._initViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('importAdded', this._addImport, this);\n    this.model.bind('geocodingAdded', this._addGeocoding, this);\n    this.model.bind('analysisAdded', this._addAnalysis, this);\n    this.model.bind('analysisAdded analysisRemoved importAdded importRemoved geocodingAdded geocodingRemoved', this._checkPollingsSize, this);\n    cdb.god.bind('importByUploadData', this._addDataset, this);\n    cdb.god.bind('fileDropped', this._onDroppedFile, this);\n    this.add_related_model(cdb.god);\n  },\n\n  _initViews: function() {\n    var backgroundPollingHeaderView = new BackgroundPollingHeaderView({\n      model: this.model\n    });\n\n    this.$el.prepend(backgroundPollingHeaderView.render().el);\n    this.addView(backgroundPollingHeaderView);\n  },\n\n  _checkPollingsSize: function() {\n    if (this.model.getTotalPollings() > 0) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  },\n\n  _addAnalysis: function(collection) {\n\n    if (this._analysisItem) {\n      this._analysisItem.clean();\n    }\n\n    this._analysisItem = new AnalysisItemView({\n      collection: collection,\n      vis: this.vis,\n      user: this.user\n    });\n\n    this._analysisItem.bind('remove', function(mdl) {\n      this.model.removeAnalysis();\n    }, this);\n\n    this.$('.js-list').prepend(this._analysisItem.render().el);\n    this.addView(this._analysisItem);\n  },\n\n  _addGeocoding: function(mdl) {\n    var geocodingItem = new GeocodingItemView({\n      showGeocodingDatasetURLButton: this.model.get('showGeocodingDatasetURLButton'),\n      model: mdl,\n      user: this.user\n    });\n\n    geocodingItem.bind('remove', function(mdl) {\n      this.model.removeGeocodingItem(mdl);\n    }, this);\n\n    this.$('.js-list').prepend(geocodingItem.render().el);\n    this.addView(geocodingItem);\n\n    // Enable pollings again\n    this.enable();\n  },\n\n  _addImport: function(m) {\n    var importItem = new ImportItemView({\n      showSuccessDetailsButton: this.model.get('showSuccessDetailsButton'),\n      model: m,\n      user: this.user\n    });\n\n    importItem.bind('remove', function(mdl) {\n      this.model.removeImportItem(mdl);\n    }, this);\n\n    this.$('.js-list').prepend(importItem.render().el);\n    this.addView(importItem);\n\n    this.enable();\n  },\n\n  _addDataset: function(d) {\n    if (d) {\n      this._addImportsItem(d);\n    }\n  },\n\n  _onDroppedFile: function(files) {\n    if (files) {\n      this._addImportsItem({\n        type: 'file',\n        value: files,\n        create_vis: this.createVis\n      });\n    }\n  },\n\n  _addImportsItem: function(uploadData) {\n    if (this.model.canAddImport()) {\n      this._removeLimitItem();\n    } else {\n      this._addLimitItem();\n      return false;\n    }\n\n    var imp = new ImportsModel({}, {\n      upload: uploadData,\n      user: this.user\n    });\n    this.model.addImportItem(imp);\n  },\n\n  // Limits view\n\n  _addLimitItem: function() {\n    if (!this._importLimit) {\n      var v = new ImportLimitItemView({\n        user: this.user\n      });\n      this.$('.js-list').prepend(v.render().el);\n      this.addView(v);\n      this._importLimit = v;\n    }\n  },\n\n  _removeLimitItem: function() {\n    var v = this._importLimit;\n    if (v) {\n      v.clean();\n      this.removeView(v);\n      delete this._importLimit;\n    }\n  },\n\n  // Enable background polling checking\n  // ongoing imports\n  enable: function() {\n    this.model.startPollings();\n  },\n\n  // Disable/stop background pollings\n  disable: function() {\n    this.model.stopPollings();\n  },\n\n  show: function() {\n    this.$el.addClass('is-visible');\n  },\n\n  hide: function() {\n    this.$el.removeClass('is-visible');\n  },\n\n  clean: function() {\n    this.disable();\n    this.elder('clean');\n  }\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Pecan = require('cartodb-pecan');\nvar PecanModel = require('./pecan_model');\nvar batchAnalysisCount = 5;\n\n/**\n *  Analysis collection\n *\n *  - Get the stats of the current layer\n *\n */\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: PecanModel,\n\n  initialize: function(mdls, opts) {\n    this.user = opts.user;\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.bind('reset', this.pollCheck, this);\n  },\n\n  // Public methods\n\n  canStartPecan: function() {\n    return this.getTotalAnalysis() === this.getCompletedAnalysis()\n  },\n\n  pollCheck: function() {\n    if (this._nextAnalysisItems) {\n      _.each(this._nextAnalysisItems, function(mdl) {\n        mdl.unbind(null, null, this);\n      }, this);\n    }\n\n    var idleItems = _.first(this.where({ state: 'idle' }),batchAnalysisCount);\n\n    if (idleItems.length > 0) {\n      this._nextAnalysisItems = idleItems;\n\n      _.each(this._nextAnalysisItems, function(mdl) {\n        if (this.user.featureEnabled('pecan_debugging')) {\n          mdl.bind('print_stats', function(stats) {\n            this._printStats(stats);\n          }, this);\n        }\n        mdl.bind('change:state', function(mdl, state) {\n          if (mdl.isAnalyzed()) {\n            var arePendingAnalysis = _.find(this._nextAnalysisItems, function(analysis) {\n              return !analysis.isAnalyzed()\n            });\n            if (!arePendingAnalysis) {\n              this.pollCheck();\n            }\n          }\n        }, this);\n        mdl.getData();\n      }, this);\n    }\n  },\n\n  _printStats: function(stats) {\n    var name        = stats.column;\n    var type        = stats.type;\n    var weight      = stats.weight;\n    var skew        = stats.skew;\n    var distinct    = stats.distinct;\n    var count       = stats.count;\n    var null_ratio  = stats.null_ratio;\n    var dist_type   = stats.dist_type;\n    var calc_weight = (weight + Pecan.getWeightFromShape(dist_type)) / 2;\n\n    var distinctPercentage = (distinct / count) * 100;\n\n    cdb.log.info(\"%cAnalyzing %c\" + name, \"text-decoration:underline; font-weight:bold\", \"text-decoration:underline; font-weight:normal\");\n\n    cdb.log.info('%c · %ctype%c = ' + type, 'color:#666;', 'color: #666; font-weight:bold;', \"color: #666; font-weight:normal\");\n    cdb.log.info('%c · %cdistinctPercentage%c = ' + distinctPercentage, 'color:#666;', 'color: #666; font-weight:bold;', \"color: #666; font-weight:normal\");\n    cdb.log.info('%c · %ccount%c = ' + count, 'color:#666;', 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n    cdb.log.info('%c · %cnull ratio%c = ' + null_ratio, 'color:#666;', 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n\n    if (dist_type) {\n      cdb.log.info('%c · %cdist_type%c = ' + dist_type, 'color:#666;', 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n      cdb.log.info('%c · %ccalc_weight%c = ' + calc_weight, 'color:#666;', 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n    }\n\n    if (skew) {\n      cdb.log.info(\"%c · %cskew%c: \" + skew.toFixed(2), \"color:#666;\", 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n    }\n\n    if (weight) {\n      cdb.log.info(\"%c · %cweight%c: \" + weight.toFixed(2), \"color: #666;\", \"color:#666; font-weight:bold;\", \"color:#666;font-weight:normal\");\n    }\n\n    if (stats.density) {\n      cdb.log.info(\"%c · %cdensity%c: \" + stats.density, \"color:#666;\", 'color: #666; font-weight:bold;', 'color: #666; font-weight:normal;');\n    }\n\n  },\n\n  destroyCheck: function() {\n    var items = this.where({ state: 'idle' });\n    this.remove(items);\n  },\n\n  failedItems: function() {},\n\n  getTotalAnalysis: function() {\n    return this.size();\n  },\n\n  getSuccessfullyAnalysedColumns: function() {\n    return this.where({ success: true }).length;\n  },\n\n  getCompletedAnalysis: function() {\n    return this.where({ state: 'analyzed' }).length;\n  },\n\n  isAnalyzing: function() {\n    return this.getCompletedAnalysis() !== this.getTotalAnalysis();\n  }\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar GeocodingModelPoller = require('./geocoding_model_poller');\n\n/**\n *  Geocoding model\n *\n */\nmodule.exports = cdb.core.Model.extend({\n\n  options: {\n    startPollingAutomatically: true\n  },\n\n  defaults: {\n    kind: '',\n    formatter: '',\n    table_name: '',\n    state: ''\n  },\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('geocoding', method);\n\n    var base = '/api/' + version + '/geocodings/';\n    if (this.isNew()) {\n      return base;\n    }\n    return base + this.id;\n  },\n\n  setUrlRoot: function(urlRoot) {\n    this.urlRoot = urlRoot;\n  },\n\n  initialize: function(opts) {\n    var self = this;\n    this._initBinds();\n    _.extend(this.options, opts);\n    this.poller = new GeocodingModelPoller(this);\n    if (this.options.startPollingAutomatically) {\n      this._checkModel();\n    };\n  },\n\n  _initBinds: function() {\n    this.bind('change:id', this._checkModel, this);\n  },\n\n  _checkModel: function() {\n    var self = this;\n\n    if (this.get('id')) {\n      this.pollCheck();\n    } else {\n      this._saveModel();\n    }\n  },\n\n  _saveModel: function() {\n    var self = this;\n    if (this.isNew()) {\n      this.save({}, {\n        error: function() {\n          self.set({\n            state: 'failed',\n            error: {\n              title: 'Oops, there was a problem',\n              description: 'Unfortunately there was an error starting the geocoder'\n            }\n          });\n        }\n      });\n    }\n  },\n\n  pollCheck: function() {\n    this.poller.start();\n  },\n\n  destroyCheck: function() {\n    this.poller.stop();\n  },\n\n  getError: function() {\n    return this.get('error');\n  },\n\n  hasFailed: function() {\n    var state = this.get('state');\n    return state === \"failed\" || state === \"reset\" || state === \"cancelled\"\n  },\n\n  hasCompleted: function() {\n    return this.get('state') === \"finished\"\n  },\n\n  isOngoing: function() {\n    return !this.hasCompleted() && !this.hasFailed()\n  },\n\n  cancelGeocoding: function() {\n    this.save({ state: 'cancelled' }, { wait:true });\n  },\n\n  resetGeocoding: function() {\n    this.set('state', 'reset');\n  }\n});\n",
    "var Poller = require('./poller');\n\nvar GeocodingModelPoller = function(model) {\n\n  var POLLING_INTERVAL = 2000;\n\n  var options = {\n    interval: POLLING_INTERVAL,\n    stopWhen: function(model) {\n      return model.hasFailed() || model.hasCompleted();\n    },\n    error: function(model) {\n      model.trigger(\"change\");\n    }\n  };\n\n  Poller.call(this, model, options);\n};\n\nGeocodingModelPoller.prototype = _.extend({}, Poller.prototype);\n\nmodule.exports = GeocodingModelPoller;\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar pollTimer = 60000;\nvar GeocodingModel = require('./geocoding_model');\n\n/**\n *  Geocodings collection\n *\n *  - Check ongoing geocodings in order to add them\n *  to the collection.\n *\n */\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: GeocodingModel,\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('geocoding', method);\n    return '/api/' + version + '/geocodings';\n  },\n\n  initialize: function(mdls, opts) {\n    this.user = opts.user; \n    this.vis = opts.vis;\n  },\n\n  parse: function(r) {\n    var self = this;\n\n    _.each(r.geocodings, function(data) {\n\n      // Check if that geocoding exists...\n      var geocodings = self.filter(\n        function(mdl) {\n          return mdl.get('id') === data.id\n        }\n      );\n\n      if (geocodings.length === 0) {\n        self._checkOngoingGeocoding(\n          new GeocodingModel(data, { startPollingAutomatically: false })\n        )\n      }\n    });\n\n    return this.models\n  },\n\n  _checkOngoingGeocoding: function(mdl) {\n    if (!this.vis) {\n      // If there is NOT a vis, let's start polling\n      // this geocoding model\n      this.add(mdl);\n      mdl.pollCheck();\n    } else {\n      var self = this;\n      // If there is a vis, let's check if that\n      // geocoding belongs to the visualization\n      this.vis.map.layers.each(function(lyr) {\n        if (lyr.table && lyr.table.id === mdl.get('table_name')) {\n          self.add(mdl);\n          mdl.pollCheck();\n        }\n      })\n    }\n  },\n\n  // Public methods\n\n  canGeocode: function() {\n    return !this.any(function(m) {\n      return m.isOngoing();\n    });\n  },\n\n  fetchGeocodings: function() {\n    var self = this;\n    this.fetch({\n      error: function(e) {\n        self.destroyCheck();\n      }\n    });\n  },\n\n  pollCheck: function(i) {\n    if (this.pollTimer) return;\n\n    var self = this;\n    this.pollTimer = setInterval(function() {\n      self.fetchGeocodings();\n    }, pollTimer);\n\n    this.fetchGeocodings();\n  },\n\n  destroyCheck: function() {\n    clearInterval(this.pollTimer);\n    delete this.pollTimer;\n  },\n\n  failedItems: function() {\n    return this.filter(function(item) {\n      return item.hasFailed();\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar cdbAdmin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar ImportModelPoller = require('./import_model_poller');\n\n/**\n *  New import model that controls\n *  the state of an import\n *\n */\nmodule.exports = cdb.core.Model.extend({\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('import', method);\n    var base = '/api/' + version + '/imports';\n\n    if (this.isNew()) {\n      return base;\n    }\n    return base + '/' + this.id;\n  },\n\n  idAttribute: 'item_queue_id',\n\n  initialize: function() {\n    this._initBinds();\n    this.poller = new ImportModelPoller(this);\n  },\n\n  _initBinds: function() {\n    this.bind('change:item_queue_id', this._checkQueueId, this);\n  },\n\n  createImport: function(data) {\n    var d = this._prepareData(data);\n    this[d.interval === 0 ? '_createRegularImport' : '_createSyncImport'](d);\n  },\n\n  _checkQueueId: function() {\n    if (this.get('item_queue_id')) {\n      this.pollCheck();\n    }\n  },\n\n  _prepareData: function(data) {\n    var d = {\n      create_vis: data.create_vis,\n      privacy: data.privacy\n    };\n\n    var type = data.type;\n\n    if (type !== 'remote') {\n      _.extend(d, {\n        type_guessing: data.type_guessing,\n        content_guessing: data.content_guessing,\n        interval: data.interval\n      });\n    }\n\n    var service = data.service_name;\n\n    // Url?\n    if (type === \"url\") {\n      _.extend(d, {\n        url: data.value\n      });\n    }\n\n    // Remote?\n    if (type === \"remote\") {\n      _.extend(d, {\n        type: \"remote\",\n        interval: null,\n        remote_visualization_id: data.remote_visualization_id,\n        create_vis: false,\n        value: data.value\n      });\n    }\n\n    // SQL?\n    if (type === \"sql\") {\n      _.extend(d, {\n        table_name: data.table_name,\n        sql: data.value\n      });\n    }\n\n    // Duplicate?\n    if (type === \"duplication\") {\n      _.extend(d, {\n        table_name: data.table_name,\n        table_copy: data.value\n      });\n    }\n\n    // Service?\n    if (type === \"service\") {\n      // If service is Twitter, service_item_id should be\n      // sent stringified\n      var service_item_id = (service === \"twitter_search\")\n          ? JSON.stringify(data.service_item_id)\n          : data.service_item_id;\n\n      // User defined limits?\n      if (data.user_defined_limits) {\n        d.user_defined_limits = data.user_defined_limits;\n      }\n\n      _.extend(d, {\n        value:            data.value,\n        service_name:     data.service_name,\n        service_item_id:  service_item_id\n      });\n    }\n\n    return d;\n  },\n\n  _createSyncImport: function(d) {\n    var self = this;\n    // Create synchronization model\n    var sync = new cdbAdmin.TableSynchronization(d);\n\n    sync.save(null, {\n      success: function(m) {\n        self.set('item_queue_id', m.get('data_import').item_queue_id);\n      },\n      error: function(mdl, r, opts) {\n        self._setErrorState(r);\n      }\n    });\n  },\n\n  _createRegularImport: function(d) {\n    var self = this;\n\n    this.save(d, {\n      error: function(mdl, r, opts) {\n        self._setErrorState(r);\n      }\n    });\n  },\n\n  _setErrorState: function(r) {\n    var msg;\n    try {\n      msg = r && JSON.parse(r.responseText).errors.imports;\n    } catch(err) {\n      // e.g. if responseText is empty (seems to happen when server is down/offline)\n      msg = 'Unfortunately there was an error starting the import';\n    }\n    this.set({\n      state: 'failure',\n      get_error_text: {\n        title: 'There was an error',\n        what_about: msg\n      }\n    });\n  },\n\n  pollCheck: function() {\n    this.poller.start();\n  },\n\n  destroyCheck: function() {\n    this.poller.stop();\n  }\n\n});\n",
    "var Poller = require('./poller');\n\nvar ImportModelPoller = function(model) {\n\n  var POLLING_INTERVAL = 2000; // Interval time between poll checkings\n  var POLLING_INTERVAL_MULTIPLIER = 2.5;  // Multiply interval by this number\n  var POLLING_REQUESTS_BEFORE_INTERVAL_CHANGE = 30; // Max tries until interval change\n\n  var options = {\n    interval: function(numberOfRequests) {\n      if (numberOfRequests >= POLLING_REQUESTS_BEFORE_INTERVAL_CHANGE) {\n        return POLLING_INTERVAL * POLLING_INTERVAL_MULTIPLIER;\n      }\n      return POLLING_INTERVAL;\n    },\n    stopWhen: function(model) {\n      var state = model.get('state');\n      return (state === \"complete\" || state === \"failure\");\n    }\n  };\n\n  Poller.call(this, model, options);\n};\n\nImportModelPoller.prototype = _.extend({}, Poller.prototype);\n\nmodule.exports = ImportModelPoller;\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar pollTimer = 30000;\nvar ImportsModel = require('./imports_model');\n\n/**\n *  Imports collection\n *\n *  If it is fetched, it will add the import\n *\n */\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: ImportsModel,\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('import', method);\n    return '/api/' + version + '/imports';\n  },\n\n  initialize: function(mdls, opts) {\n    this.user = opts.user;\n  },\n\n  parse: function(r) {\n    var self = this;\n\n    if (r.imports.length === 0) {\n      this.destroyCheck();\n    } else {\n      _.each(r.imports, function(id) {\n\n        // Check if that import exists...\n        var imports = self.filter(function(mdl){ return mdl.imp.get('item_queue_id') === id });\n\n        if (imports.length === 0) {\n          self.add(new ImportsModel({ id: id }, { user: self.user } ));\n        }\n      });\n    }\n\n    return this.models\n  },\n\n  canImport: function() {\n    var importQuota = this.user.getMaxConcurrentImports();\n    var total = this.size();\n    var finished = 0;\n\n    this.each(function(m) {\n      if (m.hasFailed() || m.hasCompleted()) {\n        ++finished;\n      }\n    });\n\n    return (total - finished) < importQuota;\n  },\n\n  pollCheck: function(i) {\n    if (this.pollTimer) return;\n\n    var self = this;\n    this.pollTimer = setInterval(function() {\n      self.fetch();\n    }, pollTimer || 2000);\n\n    // Start doing a fetch\n    this.fetch();\n  },\n\n  destroyCheck: function() {\n    clearInterval(this.pollTimer);\n    delete this.pollTimer;\n  },\n\n  failedItems: function() {\n    return this.filter(function(item) {\n      return item.hasFailed();\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar ImportModel = require('./import_model');\nvar UploadModel = require('./upload_model');\n\n/**\n *  Upload/import model\n *\n *  It takes the control of the upload and import,\n *  listening the change of any of these steps.\n *\n *  Steps:\n *  - upload\n *  - import\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    step: 'upload',\n    state: ''\n  },\n\n  initialize: function(attrs, opts) {\n    if (_.isEmpty(opts)) opts = {};\n    this.user = opts && opts.user;\n    this.upl = new UploadModel(opts.upload, { user: this.user });\n    this.imp = new ImportModel(opts.import);\n    this._initBinds();\n    this._checkStatus();\n  },\n\n  _initBinds: function() {\n    this.bind('change:import',  this._onImportChange, this);\n    this.bind('change:upload',  this._onUploadChange, this);\n    this.bind('change:id',      this._onIdChange, this);\n\n    this.imp.bind('change', function() {\n      this.trigger('change:import');\n      this.trigger('change');\n    }, this);\n    this.upl.bind('change', function() {\n      this.trigger('change:upload');\n      this.trigger('change');\n    }, this)\n  },\n\n  _destroyBinds: function() {\n    this.upl.unbind(null, null, this);\n    this.imp.unbind(null, null, this);\n  },\n\n  _onIdChange: function() {\n    var item_queue_id = this.get('id');\n    if (item_queue_id) this.imp.set('item_queue_id', item_queue_id);\n    this.set('step', 'import');\n  },\n\n  _onUploadChange: function(m, i) {\n    if (this.get('step') === \"upload\") {\n      var item_queue_id = this.upl.get('item_queue_id');\n      var state = this.upl.get('state');\n\n      if (item_queue_id) this.set('id', item_queue_id);\n      if (state) this.set('state', state);\n    }\n  },\n\n  _onImportChange: function() {\n    if (this.get('step') === \"import\") {\n      var state = this.imp.get('state');\n      if (state) this.set('state', state);\n    }\n  },\n\n  _checkStatus: function() {\n    if (!this.get('id') && !this.upl.isValid()) {\n      this.trigger('change:upload');\n      return;\n    }\n\n    if (this.upl.get('type') === 'file') {\n      this.upl.upload();\n    } else if (this.get('id')) {\n      this.set('step', 'import');\n      this.imp.set('item_queue_id', this.get('id'));\n    } else if (!this.imp.get('item_queue_id') && this.upl.get('type') !== \"\") {\n      this.set('step', 'import');\n      this.imp.createImport(this.upl.toJSON());\n    }\n  },\n\n  pause: function() {\n    this.stopUpload();\n    this.stopImport();\n  },\n\n  hasFailed: function() {\n    var state = this.get('state');\n    var step = this.get('step');\n\n    return ( step === 'import' && state === 'failure' ) || ( step === 'upload' && state === 'error' );\n  },\n\n  hasCompleted: function() {\n    return this.get('step') === \"import\" && this.imp && this.imp.get('state') === 'complete'\n  },\n\n  getWarnings: function() {\n    var step = this.get('step');\n\n    return step === 'import' ? this.imp.get('warnings') : '';\n  },\n\n  getError: function() {\n    if (this.hasFailed()) {\n      var step = this.get('step');\n      return _.extend(\n        {\n          error_code: this[step === \"upload\" ? 'upl' : 'imp'].get('error_code'),\n          item_queue_id: step === \"import\" ? this.imp.get('id') : '',\n          original_url: step === \"import\" ? this.imp.get('original_url') : '',\n          data_type: step === \"import\" ? this.imp.get('data_type') : '',\n          http_response_code: step === \"import\" ? this.imp.get('http_response_code') : '',\n          http_response_code_message: step === \"import\" ? this.imp.get('http_response_code_message') : ''\n        }\n        ,\n        this[step === \"upload\" ? 'upl' : 'imp'].get('get_error_text')\n      )\n    }\n\n    return {\n      title: '',\n      what_about: '',\n      error_code: ''\n    }\n  },\n\n  importedVis: function() {\n    if (this.get('import').derived_visualization_id) {\n      return this._getMapVis();\n    } else {\n      return this._getDatasetVis();\n    }\n  },\n\n  _getMapVis: function() {\n    var derivedVisId = this.imp.get('derived_visualization_id');\n\n    if (!derivedVisId) {\n      return false;\n    }\n\n    return this._createVis({\n      type: 'derived',\n      id: derivedVisId\n    });\n  },\n\n  _getDatasetVis: function() {\n    var tableName = this.imp.get('table_name');\n\n    if (!tableName) {\n      return false;\n    }\n\n    return this._createVis({\n      type: 'table',\n      table: {\n        name: tableName\n      }\n    });\n  },\n\n  _createVis: function(attrs) {\n    var vis = new cdb.admin.Visualization(attrs);\n    vis.permission.owner = this.user;\n    return vis;\n  },\n\n  setError: function(opts) {\n    var step = this.get('step');\n    var stepModel = this[ step === \"upload\" ? 'upl' : 'imp' ];\n\n    this.stopUpload();\n    this.stopImport();\n\n    stepModel.set(opts);\n\n    this.set('state', 'error');\n  },\n\n  stopUpload: function() {\n    this.upl.stopUpload();\n  },\n\n  stopImport: function() {\n    this.imp.destroyCheck();\n  },\n\n  get: function (attr) {\n    if (attr === \"upload\") return this.upl.toJSON();\n    if (attr === \"import\") return this.imp.toJSON();\n\n    return cdb.core.Model.prototype.get.call(this, attr);\n  },\n\n  toJSON: function() {\n    return {\n      step: this.get('step'),\n      id: this.get('id'),\n      state: this.get('state'),\n      upload: this.upl.toJSON(),\n      import: this.imp.toJSON()\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * A special case of a geocoding model, since lon/lat geocoding is not actually going through the common async processing\n * as the rest.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  initialize: function(attrs) {\n    if (!attrs.table) throw new Error('table is required');\n    if (!attrs.longitude_column) throw new Error('longitude_column is required');\n    if (!attrs.latitude_column) throw new Error('latitude_column is required');\n    if (!_.isBoolean(attrs.force_all_rows)) throw new Error('force_all_rows is required');\n\n    this.set('table_name', attrs.table.get('name'));\n\n    this._startGeocoding();\n  },\n\n  _startGeocoding: function() {\n    this._changeState('isOngoing');\n\n    var self = this;\n    var table = this.get('table');\n    table.save({\n      longitude_column: this.get('longitude_column'),\n      latitude_column: this.get('latitude_column'),\n      force_all_rows: this.get('force_all_rows')\n    }, {\n      success: function() {\n        // when finish fetch the data again and throw a signal to notify the changes\n        // TODO: this should not exist, geometry_types change should be monitored\n        table.trigger('geolocated');\n        table.data().fetch();\n        self._changeState('hasCompleted');\n      },\n      error: function(msg, resp) {\n        var error;\n        try {\n          error = resp && JSON.parse(resp.responseText).errors[0];\n        } catch(err) {\n          // e.g. if responseText is empty (seems to happen when server is down/offline)\n          error = 'Unknown error';\n        }\n        self.set('error', error);\n        self._changeState('hasFailed');\n      },\n      wait: true // don't update attrs until success is triggered\n    });\n  },\n\n  isOngoing: function() {\n    return this.get('isOngoing');\n  },\n\n  hasCompleted: function() {\n    return this.get('hasCompleted');\n  },\n\n  hasFailed: function() {\n    return this.get('hasFailed');\n  },\n\n  getError: function() {\n    return this.get('error');\n  },\n\n  _changeState: function(newState) {\n    var changedStates = _.reduce(['isOngoing', 'hasCompleted', 'hasFailed'], function(memo, state) {\n      memo[state] = state === newState;\n      return memo;\n    }, {});\n    this.set(changedStates);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Pecan = require('cartodb-pecan');\n\n/**\n *  Pecan model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  _PRINT_STATS: true,\n\n  defaults: {\n    table_id: '',\n    column: '',\n    state: 'idle'\n  },\n\n  initialize: function() {\n    _.bindAll(this, \"_onDescribe\");\n    this.sql = cdb.admin.SQL();\n    this.query = 'SELECT * FROM ' + this.get(\"table_id\");\n  },\n\n  getData: function() {\n    this.sql.describe(this.query, this.get(\"column\"), {}, this._onDescribe);\n  },\n\n  _onDescribe: function(stats) {\n    var properties = {\n      state: \"analyzed\",\n      success: false\n    };\n\n    if (this._PRINT_STATS) {\n      this.trigger('print_stats', stats, this);\n    }\n\n    var hasEnoughToGuess = Pecan.hasEnoughToGuess({\n      stats: stats,\n      isPointGeometryType: this.get('geometry_type') === 'point'\n    });\n\n    if (hasEnoughToGuess) {\n      var response = Pecan.guessMap({\n        tableName: this.get('table_id'),\n        column: {\n          stats: stats,\n          geometryType: this.get('geometry_type'),\n          bbox: this.get('bbox')\n        },\n        dependencies: {\n          underscore: _\n        }\n      });\n\n      if (response) {\n        var overrides = {\n          sql: this.query,\n          success: true\n        };\n        properties = _.extend(properties, overrides, stats, response);\n      }\n    }\n\n    if (stats.type === 'geom' && stats.bbox) {\n      properties.bbox = stats.bbox;\n    }\n\n    this.set(properties);\n  },\n\n  isAnalyzed: function() {\n    return this.get('state') === 'analyzed';\n  },\n\n  hasFailed: function() {\n    return this.get('state') === 'failed';\n  }\n\n});\n",
    "/*\n * Periodically fetches a model/collection. It waits for ongoing \n * fetch requests before trying to fetch again. A stop condition\n * can be specified.\n *\n * Usage example:\n * \n * var poller = new Poller(model, {\n *   interval: 1000,\n *   stopWhen: function(model) {\n *     return model.get('state') === 'completed';\n *   }\n * });\n * \n * poller.start();\n *\n * // ...\n *\n * poller.stop();\n * \n */\nvar Poller = function(model, options) {\n  this.model = model;\n  this.numberOfRequests = 0;\n  this.polling = false;\n  this.interval = options['interval'];\n  if (typeof this.interval !== \"function\") {\n    this.interval = function() { return options['interval']; };\n  }\n  this.stopWhen = options['stopWhen'];\n  this.error = options['error'];\n  this.autoStart = options['autoStart'];\n\n  if (this.autoStart) {\n    this.start();\n  }\n}\n\nPoller.prototype.start = function() {\n  if (this.timeout) {\n    return;\n  }\n\n  this._scheduleFetch();\n}\n\nPoller.prototype._scheduleFetch = function() {\n  this.timeout = setTimeout(this._fetch.bind(this), this.interval(this.numberOfRequests));\n}\n\nPoller.prototype._fetch = function() {\n  var self = this;\n  if (!self.polling) {\n    self.polling = true;\n    self.model.fetch({\n      success: function() {\n        self.polling = false;\n        self.numberOfRequests++;\n        if (self._continuePolling()) {\n          self._scheduleFetch();\n        }\n      },\n      error: function(e) {\n        _.isFunction(self.error) && self.error(self.model);\n      }\n    })\n  }\n}\n\nPoller.prototype._continuePolling = function() {\n  return !this.stopWhen ||\n    (_.isFunction(this.stopWhen) && !this.stopWhen(this.model));\n}\n\nPoller.prototype.stop = function() {\n  this.polling = false;\n  clearTimeout(this.timeout);\n  delete(this.timeout);\n}\n\nmodule.exports = Poller;\n",
    "\n/**\n *  Default upload config\n *\n */\n\nmodule.exports = {\n  uploadStates: [\n    'enqueued',\n    'pending',\n    'importing',\n    'uploading',\n    'guessing',\n    'unpacking',\n    'getting',\n    'creating',\n    'complete'\n  ],\n  fileExtensions: [\n    'csv',\n    'xls',\n    'xlsx',\n    'zip',\n    'kml',\n    'geojson',\n    'json',\n    'ods',\n    'kmz',\n    'tsv',\n    'gpx',\n    'tar',\n    'gz',\n    'tgz',\n    'osm',\n    'bz2',\n    'tif',\n    'tiff',\n    'txt',\n    'sql',\n    'rar',\n    'carto',\n    'gpkg'\n  ],\n  // How big should file be?\n  fileTimesBigger: 3\n}\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar UploadConfig = require('./upload_config');\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Model that let user upload files to our endpoints.\n *\n * NOTE: this model extends Backbone.Model instead of cdb.core.Model, because it's required for the\n * vendor/backbone-model-file-upload.\n */\nmodule.exports = Backbone.Model.extend({\n\n  url: '/api/v1/imports',\n\n  fileAttribute: 'filename',\n\n  defaults: {\n    type: '',\n    value: '',\n    interval: 0,\n    privacy: '',\n    progress: 0,\n    state: 'idle',\n    service_item_id: '',\n    service_name: '',\n    option: '',\n    content_guessing: true,\n    type_guessing: true,\n    create_vis: true\n  },\n\n  initialize: function(val, opts) {\n    this.user = opts && opts.user;\n    this._initBinds();\n    // We need to validate entry attributes\n    this._validate(this.attributes, { validate: true});\n  },\n\n  isValidToUpload: function() {\n    return this.get('value') && this.get('state') !== 'error';\n  },\n\n  setFresh: function(d) {\n    if (d && !_.isEmpty(d)) {\n      // Set upload properties except create_vis (defined when created)\n      this.set(_.omit(d, 'create_vis'));\n    } else {\n      this.clear();\n    }\n  },\n\n  _initBinds: function() {\n    this.bind('progress', function(progress) {\n      this.set({\n        progress: progress*100,\n        state: 'uploading'\n      });\n    }, this);\n\n    this.bind('change:value', function() {\n      if (this.get('state') === \"error\") {\n        this.set({ state: 'idle' })\n        this.unset('get_error_text', { silent: true });\n      }\n    }, this);\n\n    this.bind('error invalid', function(m, d) {\n      this.set({\n        state: 'error',\n        error_code: (d && d.error_code) || '',\n        get_error_text: {\n          title: 'Invalid import',\n          what_about: (d && d.msg) || ''\n        }\n      }, { silent: true });\n      // We need this, if not validate will run again and again and again... :(\n      this.trigger('change');\n    }, this);\n  },\n\n  validate: function(attrs) {\n    if (!attrs) return;\n\n    if (attrs.type === \"file\") {\n      // Number of files\n      if (attrs.value && attrs.value.length) {\n        return {\n          msg: \"Unfortunately only one file is allowed per upload\"\n        }\n      }\n\n      // File name\n      var name = attrs.value.name;\n      if (!name) {\n        return {\n          msg: \"File name should be defined\"\n        }\n      }\n\n      // File extension\n      var ext = name.substr(name.lastIndexOf('.') + 1);\n      if (ext) {\n        ext = ext.toLowerCase();\n      }\n      if (!_.contains(UploadConfig.fileExtensions, ext)) {\n        return {\n          msg: \"Unfortunately this file extension is not allowed\"\n        }\n      }\n      // File size\n      if (this.user && ((this.user.get('remaining_byte_quota') * UploadConfig.fileTimesBigger) < attrs.value.size)) {\n        return {\n          msg: \"Unfortunately the size of the file is bigger than your remaining quota\",\n          error_code: 8001\n        }\n      }\n    }\n\n    if (attrs.type === \"remote\") {\n      // Valid remote visualization id?\n      if (!attrs.remote_visualization_id) {\n        return {\n          msg: \"The remote visualization id was not specified\"\n        }\n\n      }\n      // Remote size?\n      if (this.user && attrs.size && ((this.user.get('remaining_byte_quota') * UploadConfig.fileTimesBigger) < attrs.size)) {\n        return {\n          msg: \"Unfortunately the size of the remote dataset is bigger than your remaining quota\",\n          error_code: 8001\n        }\n      }\n    }\n\n    if (attrs.type === \"url\") {\n      // Valid URL?\n      if (!Utils.isURL(attrs.value)) {\n        return {\n          msg: \"Unfortunately the URL provided is not valid\"\n        }\n      }\n    }\n\n    if (attrs.type === \"sql\") {\n      if (!attrs.value) {\n        return {\n          msg: \"Query is not provided\"\n        }\n      }\n    }\n\n    if (attrs.type === \"duplication\") {\n      if (!attrs.value) {\n        return {\n          msg: \"Dataset copy is not defined\"\n        }\n      }\n    }\n\n    if (attrs.type === \"service\" && attrs.service_name === \"twitter_search\") {\n      var service_item_id = attrs.service_item_id;\n\n      // Empty?\n      if (!service_item_id || _.isEmpty(service_item_id)) {\n        return {\n          msg: \"Twitter data is empty\"\n        }\n      }\n\n      // Categories?\n      if (_.isEmpty(service_item_id.categories)) {\n        return {\n          msg: \"Twitter categories are not valid\"\n        }\n      }\n\n      // Dates?\n      var dates = service_item_id.dates;\n      if (!dates || _.isEmpty(dates)) {\n        return {\n          msg: \"Twitter dates are empty\"\n        }\n      }\n      var isToDateValid = moment(dates.fromDate) <= moment(new Date());\n      if (!dates.fromDate || !dates.toDate || !isToDateValid) {\n        return {\n          msg: \"Twitter dates are not valid\"\n        }\n      }\n    }\n  },\n\n  isValid: function() {\n    return this.get('value') && this.get('state') !== \"error\"\n  },\n\n  upload: function() {\n    if (this.get('type') === \"file\") {\n      var self = this;\n      this.xhr = this.save(\n        {\n          filename: this.get('value')\n        },\n        {\n          success: function(m) {\n            m.set('state', 'uploaded');\n          },\n          error: function(m, msg) {\n\n            var message = 'Unfortunately there was a connection error';\n\n            if (msg && msg.status === 429) {\n              var response = JSON.parse(msg.responseText);\n              message = response.errors.imports;\n            }\n\n            self.set({\n              state: 'error',\n              get_error_text: { title: 'There was an error', what_about: message }\n            });\n\n          },\n          complete: function() {\n            delete self.xhr;\n          }\n        }\n      );\n    }\n  },\n\n  stopUpload: function() {\n    if (this.xhr) this.xhr.abort();\n  },\n\n  setGuessing: function(val) {\n    this.set({\n      type_guessing: val,\n      content_guessing: val\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ViewFactory = require('../../../view_factory');\nvar PecanDialog = require('../../../dialogs/pecan/pecan_dialog_view');\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportItem',\n  tagName: 'li',\n\n  events: {\n    'click .js-abort':       '_removeItem',\n    'click .js-show_dialog': '_showDialog',\n    'click .js-close':       '_removeItem'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.vis = this.options.vis;\n    this.template = cdb.templates.getTemplate('common/background_polling/views/analysis/background_analysis_item');\n    this._initBinds();\n  },\n\n  render: function() {\n    var totalItems    = this.collection.getTotalAnalysis();\n    var totalAnalyzed = this.collection.getCompletedAnalysis();\n    var totalSuccess  = this.collection.getSuccessfullyAnalysedColumns();\n\n    var d = {\n      totalSuccess: totalSuccess,\n      totalItems: totalItems,\n      totalAnalyzed: totalAnalyzed,\n      progress: (totalAnalyzed / totalItems) * 100\n    };\n\n    this.$el.html(this.template(d));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.collection.bind('change:state', this._onChangeState, this);\n    this.add_related_model(this.collection);\n  },\n\n  _onChangeState: function() {\n    var totalItems    = this.collection.getTotalAnalysis();\n    var totalAnalyzed = this.collection.getCompletedAnalysis();\n    var totalSuccess  = this.collection.getSuccessfullyAnalysedColumns();\n\n    this.render();\n\n    if (totalAnalyzed === totalItems && totalSuccess === 0) {\n      this._removeItem();\n    }\n  },\n\n  _showDialog: function() {\n\n    var pecanDialog = new PecanDialog({\n      clean_on_hide: true,\n      vis: this.vis,\n      collection:this.collection,\n      user: this.user\n    });\n\n    pecanDialog.appendToBody();\n  },\n\n  _skip: function() {\n    var layerID = this.vis.get(\"active_layer_id\");\n    var name;\n    var activeLayer  = this.vis.map.layers.where({ id: layerID });\n\n    if (activeLayer) {\n      name = activeLayer[0].table.get(\"name\");\n    }\n\n    var skipPencanDialog = 'pecan_' + this.user.get(\"username\") + \"_\" + name;\n    localStorage[skipPencanDialog] = true;\n  },\n\n  _removeItem: function() {\n    this.trigger('remove', this.collection, this);\n    this._skip();\n    this.clean();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Background polling header title view\n *\n *  It will contain only the title\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'h3',\n  className: 'CDB-Text CDB-Size-large u-lSpace--xl',\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/background_polling/views/background_polling_header_title');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        imports: this.model.getTotalImports(),\n        geocodings: this.model.getTotalGeocodings(),\n        analysis: this.model.getTotalAnalysis(),\n        totalPollings: this.model.getTotalPollings()\n      })\n    );\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change analysisAdded analysisRemoved importAdded importRemoved geocodingAdded geocodingRemoved', this.render, this);\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BackgroundPollingHeaderTitleView = require('./background_polling_header_title_view');\n\n/**\n *  Background polling header view\n *\n *  It will contain:\n *  - Badge\n *  - Title\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: \"BackgroundPolling-header\",\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/background_polling/views/background_polling_header');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(this.template());\n    this._initViews();\n    this._updateBadges();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change importAdded importRemoved geocodingAdded geocodingRemoved', this._updateBadges, this);\n  },\n\n  _initViews: function() {\n    var headerTitle = new BackgroundPollingHeaderTitleView({\n      model: this.model\n    });\n    this.$el.append(headerTitle.render().el);\n    this.addView(headerTitle);\n  },\n\n  _updateBadges: function() {\n    var failed = this.model.getTotalFailedItems();\n\n    if (this.$('.BackgroundPolling-headerBadgeCount').length === 0 && failed > 0) {\n      var $span = $('<span>').addClass(\"BackgroundPolling-headerBadgeCount Badge Badge--negative CDB-Text CDB-Size-small\").text(failed);\n      this.$('.BackgroundPolling-headerBadge')\n        .append($span)\n        .addClass('has-failures');\n    } else if (this.$('.BackgroundPolling-headerBadgeCount').length > 0 && failed > 0) {\n      this.$('.BackgroundPolling-headerBadgeCount').text(failed);\n    } else if (failed === 0) {\n      this.$('.BackgroundPolling-headerBadgeCount').remove();\n      this.$('.BackgroundPolling-headerBadge').removeClass('has-failures');\n    }\n\n    // Show geocoding icon if only geocoding\n    var geocodingsCount = this.model.getTotalGeocodings();\n    var isGeocoding = geocodingsCount > 0 && geocodingsCount === this.model.getTotalPollings();\n    this.$('.js-icon').toggleClass('CDB-IconFont-marker', isGeocoding);\n    this.$('.js-icon').toggleClass('CDB-IconFont-cloud', !isGeocoding);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar pluralizeString = require('../../../view_helpers/pluralize_string');\nvar GeocodingResultDetailsView = require('./geocoding_result_details_view');\n\n/**\n *  Geocoding item within background polling\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportItem',\n  tagName: 'li',\n\n  events: {\n    'click .js-abort': '_cancelGeocoding',\n    'click .js-info': '_showDetails',\n    'click .js-close': '_removeGeocoding'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/background_polling/views/geocodings/background_geocoding_item');\n    this._initBinds();\n  },\n\n  render: function() {\n    var processedRows = this.model.get('processed_rows') || 0;\n    var processableRows = this.model.get('processable_rows') || 0;\n    var realRows = this.model.get('real_rows') || 0;\n    var isLatLngType = this.model.get('latitude_column') && this.model.get('longitude_column');\n\n    var d = {\n      realRows: realRows,\n      tableName: this.model.get('table_name'),\n      canCancel: _.isFunction(this.model.cancelGeocoding),\n      hasFailed: this.model.hasFailed(),\n      hasCompleted: this.model.hasCompleted(),\n      processedRows: processedRows,\n      processableRows: processableRows,\n      processableRowsFormatted: Utils.formatNumber(processableRows),\n      realRowsPluralize: pluralizeString('row', 'rows', this.model.get('real_rows')),\n      realRowsFormatted: Utils.formatNumber(realRows),\n      processableRowsPluralize: pluralizeString('row', 'rows', processableRows),\n      width: realRows > 0 ? (processableRows/realRows) : 100,\n      isLatLngType: isLatLngType\n    }\n    this.$el.html(this.template(d));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.model.bind('remove', this.clean, this);\n  },\n\n  _cancelGeocoding: function() {\n    this.model.cancelGeocoding();\n  },\n\n  _removeGeocoding: function() {\n    this.trigger('remove', this.model, this);\n    this.clean();\n  },\n\n  _showDetails: function() {\n    new GeocodingResultDetailsView({\n      clean_on_hide: true,\n      user: this.user,\n      model: this.model,\n      showGeocodingDatasetURLButton: this.options.showGeocodingDatasetURLButton\n    }).appendToBody();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../../views/base_dialog/view');\nvar pluralizeString = require('../../../view_helpers/pluralize_string');\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\n\n/**\n *  When a geocoding proccess finishes, this dialog displays\n *  all the info about the task (price, rows, errors, etc).\n *\n */\n\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog BackgroundPollingDetails is-opening',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.user = this.options.user;\n  },\n\n  render_content: function() {\n    var error = this.model.get('error') || {};\n\n    var processedRows = this.model.get('processed_rows') || 0;\n    var processableRows = this.model.get('processable_rows') || 0;\n    var realRows = this.model.get('real_rows') || 0;\n    var geometryType = this.model.get('geometry_type') || 'point';\n\n    // Related to price and credits\n    var price = this.model.get('price');\n    var hasPrice = price !== undefined && price !== null;\n    var googleUser = this.user.featureEnabled('google_maps');\n\n    var datasetURL;\n    if (this.user && this.model.get('table_name')) {\n      var vis = new cdb.admin.Visualization({\n        type: 'table',\n        table: {\n          name: this.model.get('table_name')\n        }\n      });\n      vis.permission.owner = this.user;\n      datasetURL = encodeURI(vis.viewUrl(this.user).edit());\n    }\n\n    // Select template\n    var template = 'common/background_polling/views/geocodings/';\n    if (this.model.hasCompleted()) {\n      template += realRows === 0 ? 'geocoding_no_result_details' : 'geocoding_success_details';\n    } else {\n      template += 'geocoding_error_details';\n    }\n\n    return cdb.templates.getTemplate(template)({\n      id: this.model.get('id'),\n      geometryTypePluralize: pluralizeString(geometryType, geometryType + 's', processableRows),\n      geometryType: geometryType,\n      remainingQuotaFormatted: Utils.formatNumber(this.model.get('remaining_quota')),\n      googleUser: googleUser,\n      tableName: this.model.get('table_name'),\n      state: this.model.get('state') || '',\n      blockPrice: this.user.get('geocoding').block_price,\n      realRows: realRows,\n      realRowsFormatted: Utils.formatNumber(realRows),\n      processedRows: processedRows,\n      processableRows: processableRows,\n      processableRowsFormatted: Utils.formatNumber(processableRows),\n      hasPrice: hasPrice,\n      price: price,\n      customHosted: cdb.config.get('cartodb_com_hosted'),\n      errorDescription: error.description,\n      showGeocodingDatasetURLButton: this.options.showGeocodingDatasetURLButton && datasetURL,\n      datasetURL: datasetURL\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar UploadConfig = require('../../models/upload_config');\nvar ErrorDetailsView = require('../../../views/error_details_view');\nvar WarningsDetailsView = require('../../../views/warnings_details_view');\nvar ViewFactory = require('../../../view_factory');\nvar TwitterImportDetailsDialog = require('./twitter_import_details_view');\n\n/**\n *  Import item within background importer\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportItem',\n  tagName: 'li',\n\n  events: {\n    'click .js-abort':      '_removeItem',\n    'click .js-show_error': '_showImportError',\n    'click .js-show_warnings': '_showImportWarnings',\n    'click .js-show_stats': '_showImportStats',\n    'click .js-close':      '_removeItem'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this._showSuccessDetailsButton = this.options.showSuccessDetailsButton;\n    this.template = cdb.templates.getTemplate('common/background_polling/views/imports/background_import_item');\n    this._initBinds();\n  },\n\n  render: function() {\n    var upload = this.model.get('upload');\n    var imp = this.model.get('import');\n\n    var d = {\n      name: '',\n      state: this.model.get('state'),\n      progress: '',\n      service: '',\n      step: this.model.get('step'),\n      url: '',\n      failed: this.model.hasFailed(),\n      completed: this.model.hasCompleted(),\n      warnings: this.model.getWarnings(),\n      showSuccessDetailsButton: this._showSuccessDetailsButton,\n      tables_created_count: imp.tables_created_count\n    };\n\n    // URL\n    if (d.state === \"complete\") {\n      var vis = this.model.importedVis();\n      if (vis) {\n        d.url = encodeURI(vis.viewUrl(this.user).edit());\n      }\n    }\n\n    // Name\n    if (upload.type) {\n      if (upload.type === \"file\") {\n        if (upload.value.length > 1) {\n          d.name = upload.value.length + ' files';\n        } else {\n          d.name = upload.value.name;\n        }\n      }\n      if (upload.type === \"url\" || upload.type === \"remote\") {\n        d.name = upload.value;\n      }\n      if (upload.type === \"service\") {\n        d.name = upload.value && upload.value.filename || '';\n      }\n      if (upload.service_name === \"twitter_search\") {\n        d.name = 'Twitter import';\n      }\n      if (upload.type === \"sql\") {\n        d.name = 'SQL';\n      }\n      if (upload.type === \"duplication\") {\n        d.name = upload.table_name || upload.value;\n      }\n    } else {\n      d.name = imp.display_name || imp.item_queue_id || 'import';\n    }\n\n    // Service\n    d.service = upload.service_name;\n\n    // Progress\n    if (this.model.get('step') === 'upload') {\n      d.progress = this.model.get('upload').progress;\n    } else {\n      d.progress = (UploadConfig.uploadStates.indexOf(d.state)/UploadConfig.uploadStates.length) * 100;\n    }\n\n    this.$el.html(this.template(d));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.model.bind('remove', this.clean, this);\n  },\n\n  _removeItem: function() {\n    this.trigger('remove', this.model, this);\n    this.model.pause();\n    this.clean();\n  },\n\n  _showImportStats: function() {\n    (new TwitterImportDetailsDialog({\n      clean_on_hide: true,\n      user: this.user,\n      model: this.model\n    })).appendToBody();\n  },\n\n  _showImportError: function() {\n    var dialog = ViewFactory.createDialogByView(\n      new ErrorDetailsView({\n        err: this.model.getError(),\n        user: this.user\n      })\n    );\n    dialog.appendToBody();\n  },\n\n  _showImportWarnings: function() {\n    var dialog = ViewFactory.createDialogByView(\n      new WarningsDetailsView({\n        warnings: this.model.getWarnings(),\n        user: this.user\n      })\n    );\n    dialog.appendToBody();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Import limit message within background importer\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportItem ImportItem--sticky',\n  tagName: 'li',\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/background_polling/views/imports/background_import_limit');\n  },\n\n  render: function() {\n    var importQuota = this.user.getMaxConcurrentImports();\n    var isUpgradeable = !cdb.config.get('cartodb_com_hosted') && importQuota === 1;\n\n    this.$el.html(\n      this.template({\n        upgradeUrl: window.upgrade_url,\n        isUpgradeable: isUpgradeable,\n        importQuota: importQuota\n      })\n    );\n\n    return this;\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../../views/base_dialog/view');\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\n\n/**\n *  When a Twitter import finishes, this dialog displays\n *  all the info about the price/cost etc.\n *\n */\n\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog TwitterImportDetails is-opening',\n\n  initialize: function() {\n    this.elder('initialize');\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/background_polling/views/imports/twitter_import_details');\n  },\n\n  render_content: function() {\n    var imp = this.model.get('import');\n    var userTwitterValues = this.user.get('twitter');\n    var availableTweets = userTwitterValues.quota - userTwitterValues.monthly_use;\n    var vis = this.model.importedVis();\n    var url = vis && encodeURI(vis.viewUrl(this.user).edit()) || '';\n    var d = {\n      type: vis && vis.get('type') === \"table\" ? \"dataset\" : \"map\",\n      mapURL: url,\n      datasetTotalRows: imp.tweets_georeferenced,\n      datasetTotalRowsFormatted: Utils.formatNumber(imp.tweets_georeferenced),\n      tweetsCost: imp.tweets_cost,\n      tweetsCostFormatted: Utils.formatNumber(imp.tweets_cost),\n      availableTweets: availableTweets,\n      availableTweetsFormatted: Utils.formatNumber(availableTweets),\n      tweetsOverquota: imp.tweets_overquota,\n      tweetsOverquotaFormatted: Utils.formatNumber(imp.tweets_overquota),\n      blockSizeFormatted: Utils.formatNumber(userTwitterValues.block_size),\n      blockPriceFormatted: Utils.formatNumber(userTwitterValues.block_price)\n    };\n    return this.template(d);\n  }\n\n});\n",
    "var queue = require('queue-async');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Convenient object to do async batch processing, and don't continue until all items have successfully finished.\n * In case of error it will fail immediately.\n *\n * Example usage:\n *   var batchProcess = require('../common/batch_process_items');\n *   batchProcess({\n *     items: [ ... ],\n *     done: function() {\n *       this.close();\n *     },\n *     fail: function(jqXHR, errorType, e) {\n *       this._errorMsg = 'Server response: '+ jqXHR.responseText;\n *       this.render();\n *     }\n *   });\n *\n * @param opts {Object}\n *   howManyInParallel: {Number}\n *   items: {Array} each item will be passed to processItem(item, ...\n *   processItem: {Function} given an item and a callback, should call callback() for success case, or callback(error) if something failed.\n *   fail: {Function}\n *   done: {Function} called if all items\n */\nmodule.exports = function(opts) {\n  var q = queue(opts.howManyInParallel);\n  _.each(opts.items, function(item) {\n    q.defer(function(callback) {\n      opts.processItem(item, callback);\n    });\n  });\n\n  q.awaitAll(function(error/*, result1, ..., resultN */) {\n    // error and results contains outcome of the jqXHR requests above, see http://api.jquery.com/jQuery.ajax/#jqXHR\n    if (error) {\n      opts.fail(error);\n    } else {\n      opts.done();\n    }\n  });\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar XYZModel = require('./xyz/xyz_model.js');\nvar WMSModel = require('./wms/wms_model.js');\nvar NASAModel = require('./nasa/nasa_model.js');\nvar MapboxModel = require('./mapbox/mapbox_model.js');\nvar TileJSONModel = require('./tile_json/tile_json_view_model.js');\n\n/**\n * View model for the add-custom-basemap view\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    map: undefined,\n    baseLayers: undefined,\n    tabs: undefined,\n    currentView: 'tabs',\n    currentTab: 'xyz'\n  },\n\n  initialize: function(attrs) {\n    this.elder('initialize');\n    if (!attrs.map) throw new Error('map is required');\n    if (!attrs.baseLayers) throw new Error('baseLayers is required');\n    this._initTabs();\n    this._initBinds();\n  },\n\n  activeTabModel: function() {\n    return this.get('tabs').where({ name: this.get('currentTab') })[0];\n  },\n\n  canSaveBasemap: function() {\n    return this.get('currentView') === 'tabs' && this._layerToSave();\n  },\n\n  saveBasemap: function() {\n    if (!this.canSaveBasemap()) return;\n    this.set('currentView', 'saving');\n\n    var layer = this._layerToSave();\n    if (this.activeTabModel().hasAlreadyAddedLayer(this.get('baseLayers'))) {\n      this._onLayerSaved(layer);\n    } else {\n      // Add to baseLayers collection before saving, so save URL resolves to the expected endpoint.\n      this.get('baseLayers').add(layer);\n\n      var self = this;\n      layer.save()\n      .done(function() {\n        self._onLayerSaved(layer);\n      })\n      .fail(function() {\n        // Cleanup, remove layer it could not be saved!\n        self.get('baseLayers').remove(layer);\n        self.set('currentView', 'saveFail');\n      });\n    }\n  },\n\n  _onLayerSaved: function(layer) {\n    var map = this.get('map');\n\n    var clonedLayer = layer.clone();\n    clonedLayer.unset('id');\n    map.changeProvider('leaflet', clonedLayer);\n\n    var bbox = layer.get('bounding_boxes');\n    if (bbox && bbox.length === 4) {\n      map.setBounds([\n        [bbox[1], bbox[0]],\n        [bbox[3], bbox[2]]\n      ]);\n    }\n\n    this.set('currentView', 'saveDone');\n  },\n\n  _initTabs: function() {\n    var tabs = new Backbone.Collection([\n      new XYZModel(),\n      new WMSModel({\n        baseLayers: this.get('baseLayers')\n      }),\n      new NASAModel(),\n      new MapboxModel(),\n      new TileJSONModel()\n    ]);\n    this.set({\n      tabs: tabs,\n      currentTab: tabs.first().get('name')\n    });\n  },\n\n  _initBinds: function() {\n    this.get('tabs').each(function(tabModel) {\n      tabModel.bind('saveBasemap', this.saveBasemap, this);\n    }, this);\n  },\n\n  _layerToSave: function() {\n    return this.activeTabModel().get('layer');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar BaseDialog = require('../../views/base_dialog/view.js');\nvar randomQuote = require('../../view_helpers/random_quote.js');\nvar ViewFactory = require('../../view_factory.js');\nvar ViewModel = require('./add_custom_basemap_model.js');\nvar TabsView = require('./tabs_view.js');\n\n/**\n * Dialog to add ¯custom basemap to current map.\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    this.model = new ViewModel({\n      map: this.options.map,\n      baseLayers: this.options.baseLayers\n    });\n    this._initViews();\n    this._initBinds();\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.render\n   */\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('Dialog-contentWrapper');\n    return this;\n  },\n\n  /**\n   * @implements cdb.ui.common.Dialog.prototype.render_content\n   */\n  render_content: function() {\n    var contentView = this._panes.active(this.model.get('currentView')).render();\n    contentView.$el.addClass('Dialog-body Dialog-body--expanded Dialog-body--create');\n    contentView.delegateEvents(); // enable events after being added to $el\n    var $el = $(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/add_custom_basemap')({\n        model: this.model\n      })\n    );\n    $el.append(contentView.el);\n    return $el;\n  },\n\n  ok: function() {\n    if (this.model.canSaveBasemap()) {\n      this.model.saveBasemap();\n    }\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('tabs',\n      new TabsView({\n        model: this.model\n      })\n    );\n    this._panes.addTab('saving',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Setting basemap…',\n        quote: randomQuote()\n      }).render()\n    );\n    this._panes.addTab('saveFail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: ''\n      }).render()\n    );\n    this._panes.active(this.model.get('currentView'));\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:currentView', this._onCurrentViewChange, this);\n  },\n\n  _onCurrentViewChange: function() {\n    if (this.model.get('currentView') === 'saveDone') {\n      this.close();\n    } else {\n      this.render();\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar MapboxView = require('./mapbox_view');\nvar MapboxToTileLayerFactory = require('./mapbox_to_tile_layer_factory');\n\n/**\n * View model for XYZ tab content.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: 'mapbox',\n    label: 'Mapbox',\n    currentView: 'enterURL', //, validatingInputs, valid\n    lastErrorMsg: '', //set if fails to save\n    layer: undefined // will be set when valid\n  },\n\n  createView: function() {\n    this.set({\n      currentView: 'enterURL',\n      layer: undefined\n    });\n    return new MapboxView({\n      model: this\n    });\n  },\n\n  hasAlreadyAddedLayer: function(baseLayers) {\n    var urlTemplate = this.get('layer').get('urlTemplate');\n    return _.any(baseLayers.custom(), function(customLayer) {\n      return customLayer.get('urlTemplate') === urlTemplate;\n    });\n  },\n\n  save: function(url, accessToken) {\n    this.set({\n      currentView: 'validatingInputs',\n      url: url,\n      accessToken: accessToken\n    });\n\n    var self = this;\n    var mf = new MapboxToTileLayerFactory({\n      url: url,\n      accessToken: accessToken\n    });\n    mf.createTileLayer({\n      success: function(tileLayer) {\n        self.set('layer', tileLayer);\n        self.trigger('saveBasemap');\n      },\n      error: function(errorMsg) {\n        self.set({\n          currentView: 'enterURL',\n          lastErrorMsg: errorMsg\n        });\n      }\n    });\n  }\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Factory to create a cdb.admin.TileLayer from a given URL and access token tuple for Mapbox.\n * Extracted from mapbox_basemap_pane to maintain current logic, since it's rather complex…\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    url: '',\n    accessToken: ''\n  },\n\n  _MAPBOX: {\n    version: 4,\n    https: 'https://dnv9my2eseobd.cloudfront.net',\n    base: 'https://a.tiles.mapbox.com/'\n  },\n\n  /**\n   * @param {Object} callbacks\n   *   success {Function} given a new TileLayer object\n   *   error {Function} given an error explanation\n   */\n  createTileLayer: function(callbacks) {\n    var val = this.get('url');\n    var url = this._lowerXYZ(val);\n    var access_token = this.get('accessToken');\n    var type = 'json';\n    var subdomains = ['a', 'b', 'c'];\n    var mapbox_id;\n\n    // Detects the URL's type\n    if (url.indexOf('{x}') < 0 && url.indexOf('tiles.mapbox.com') !== -1) {\n      mapbox_id = this._getMapBoxMapID(url);\n      if (mapbox_id) {\n        type = 'mapbox_id';\n        url = mapbox_id;\n      }\n    } else if (url.indexOf('{x}') !== -1) {\n      type = 'xyz';\n      url = url.replace(/\\{s\\}/g, function() {\n          return subdomains[Math.floor(Math.random() * 3)];\n        })\n        .replace(/\\{x\\}/g, '0')\n        .replace(/\\{y\\}/g, '0')\n        .replace(/\\{z\\}/g, '0');\n    } else if (url && url.indexOf('http') < 0 && url.match(/(.*?)\\.(.*)/) != null && url.match(/(.*?)\\.(.*)/).length === 3) {\n      type = 'mapbox_id';\n      mapbox_id = val;\n    } else { // If not, check https\n      url = this._fixHTTPS(url);\n    }\n\n    var self = this;\n    var image;\n    if (type === 'mapbox') {\n      callbacks.success(this._newTileLayer({ tiles: [url] }));\n    } else if (type === 'xyz') {\n      image = new Image();\n      image.onload = function() {\n        callbacks.success(self._newTileLayer({\n          tiles: [self._lowerXYZ(val)]\n        }));\n      };\n      image.onerror = function() {\n        callbacks.error(self._errorToMsg());\n      };\n      image.src = url;\n    } else if (type === 'mapbox_id') {\n      var params = '?access_token=' + access_token;\n      var base_url = this._MAPBOX.base + 'v' + this._MAPBOX.version + '/' + mapbox_id;\n      var tile_url = base_url + '/{z}/{x}/{y}.png' + params;\n      var json_url = base_url + '.json' + params;\n\n      // JQuery has a faulty implementation of the getJSON method and doesn't return\n      // a 404, so we use a timeout. TODO: replace with CORS\n      var errorTimeout = setTimeout(function() {\n        callbacks.error(self._errorToMsg());\n      }, 5000);\n\n      $.ajax({\n        url: json_url,\n        success: function(data) {\n          clearTimeout(errorTimeout);\n          callbacks.success(self._newTileLayer({\n            tiles: [tile_url],\n            attribution: data.attribution,\n            minzoom: data.minzoom,\n            maxzoom: data.maxzoom,\n            name: data.name\n          }));\n        },\n        error: function(e) {\n          clearTimeout(errorTimeout);\n          callbacks.error(self._errorToMsg(e));\n        }\n      });\n    } else {\n      callbacks.error(this._errorToMsg());\n    }\n  },\n\n  _newTileLayer: function(data) {\n    // Check if the respond is an array\n    // In that case, get only the first\n    if (_.isArray(data) && _.size(data) > 0) {\n      data = _.first(data);\n    }\n\n    return new cdb.admin.TileLayer({\n      urlTemplate: data.tiles[0],\n      attribution: data.attribution || null,\n      maxZoom: data.maxzoom || 21,\n      minZoom: data.minzoom || 0,\n      name: data.name || ''\n    });\n  },\n\n  _errorToMsg: function(error) {\n    if (typeof error === 'object' || !error) {\n      if (error && error.status && error.status === 401) {\n        return 'Error retrieving your basemap. Please, check your access token.';\n      } else {\n        return 'This value is not valid.';\n      }\n    }\n\n    return error;\n  },\n\n  _lowerXYZ: function(url) {\n    return url.replace(/\\{S\\}/g, \"{s}\")\n      .replace(/\\{X\\}/g, \"{x}\")\n      .replace(/\\{Y\\}/g, \"{y}\")\n      .replace(/\\{Z\\}/g, \"{z}\");\n  },\n\n  // Extracts the Mapbox MapId from a Mapbox URL\n  _getMapBoxMapID: function(url) {\n    // http://d.tiles.mapbox.com/v3/{user}.{map}/3/4/3.png\n    // http://a.tiles.mapbox.com/v3/{user}.{map}/page.html\n    // http://a.tiles.mapbox.com/v4/{user}.{map}.*\n    var reg1 = /https?:\\/\\/[a-z]?\\.?tiles\\.mapbox.com\\/v(\\d)\\/([^\\/.]*)\\.([^\\/.]*)/;\n\n    // https://tiles.mapbox.com/{user}/edit/{map}?newmap&preset=Streets#3/0.00/-0.09\n    var reg2 = /https?:\\/\\/tiles\\.mapbox\\.com\\/(.*?)\\/edit\\/(.*?)(\\?|#)/;\n\n    var match = '';\n\n    // Check first expresion\n    match = url.match(reg1);\n\n    if (match && match[1] && match[2]) {\n      return match[2] + \".\" + match[3];\n    }\n\n    // Check second expresion\n    match = url.match(reg2);\n\n    if (match && match[1] && match[2]) {\n      return match[1] + \".\" + match[2];\n    }\n  },\n\n  /**\n   * return a https url if the current application is loaded from https\n   */\n  _fixHTTPS: function(url, loc) {\n    loc = loc || location;\n\n    // fix the url to https or http\n    if (url.indexOf('https') !== 0 && loc.protocol === 'https:') {\n      // search for mapping\n      var i = url.indexOf('mapbox.com');\n      if (i !== -1) {\n        return this._MAPBOX.https + url.substr(i + 'mapbox.com'.length);\n      }\n      return url.replace(/http/, 'https');\n    }\n    return url;\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ViewFactory = require('../../../view_factory.js');\nvar randomQuote = require('../../../view_helpers/random_quote.js');\n\n\n/**\n * Represents the Mapbox tab content.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-ok': '_onClickOK',\n    'keydown': '_onKeyDown',\n    'keyup': '_onKeyUp'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    var view;\n    switch (this.model.get('currentView')) {\n      case 'validatingInputs':\n        view = ViewFactory.createByTemplate('common/templates/loading', {\n          title: 'Validating…',\n          quote: randomQuote()\n        });\n        break;\n      case 'enterURL':\n      default:\n        view = ViewFactory.createByTemplate('common/dialogs/add_custom_basemap/mapbox/enter_url', {\n          url: this.model.get('url'),\n          accessToken: this.model.get('accessToken'),\n          lastErrorMsg: this.model.get('lastErrorMsg')\n        });\n    }\n    this.addView(view);\n    this.$el.append(view.render().el);\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n  },\n\n  _hasValues: function() {\n    return this._urlVal() && this._accessToken();\n  },\n\n  _urlVal: function() {\n    return this.$('.js-url').val();\n  },\n\n  _accessToken: function() {\n    return this.$('.js-access-token').val();\n  },\n\n  _onClickOK: function(ev) {\n    this.killEvent(ev);\n    if (this._hasValues()) {\n      var url = this._urlVal();\n      var accessToken = this._accessToken();\n      this.model.save(url, accessToken);\n    }\n  },\n\n  _onKeyDown: function(ev) {\n    ev.stopPropagation();\n    this.$('.js-error').removeClass('is-visible');\n  },\n\n  _onKeyUp: function(ev) {\n    ev.stopPropagation();\n    this.$('.js-ok').toggleClass('is-disabled', !this._hasValues());\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar NASAView = require('./nasa_view');\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\nvar TYPES = {\n  day: {\n    url:          'http://map1.vis.earthdata.nasa.gov/wmts-webmerc/MODIS_Terra_CorrectedReflectance_TrueColor/default/<%- date %>/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpeg',\n    limit:        '2012-05-01',\n    default:      '2012-05-01',\n    attribution:  '<a href=\"http://earthdata.nasa.gov/gibs\" target=\"_blank\">NASA EOSDIS GIBS</a>',\n    name:         'NASA Terra',\n    maxZoom:      9,\n    minZoom:      1\n  },\n\n  night: {\n    url:          'http://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/<%- date %>/GoogleMapsCompatible_Level8/{z}/{y}/{x}.jpeg',\n    limit:        '2012-05-01',\n    default:      '2012-05-02',\n    attribution:  '<a href=\"http://earthdata.nasa.gov/gibs\" target=\"_blank\">NASA EOSDIS GIBS</a>',\n    name:         'NASA Earth at night',\n    maxZoom:      8,\n    minZoom:      1\n  }\n};\n\n/**\n * View model for XYZ tab content.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: 'nasa',\n    label: 'NASA',\n    layer: undefined, //gets set on dayOrNight/date changes\n    layerType: 'day',\n\n    // for date picker\n    date: undefined,\n    current: undefined,\n    format: 'Y-m-d' // YYYY-MM-DD\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  createView: function() {\n    var utc = new Date().getTimezoneOffset();\n    var today = moment(new Date()).utcOffset(utc).format('YYYY-MM-DD');\n    var yesterday = moment(new Date()).utcOffset(utc).subtract(1, 'days').format('YYYY-MM-DD');\n    this.set({\n      current: today,\n      date: yesterday\n    });\n\n    return new NASAView({\n      model: this\n    });\n  },\n\n  hasAlreadyAddedLayer: function(baseLayers) {\n    var urlTemplate = this.get('layer').get('urlTemplate');\n    return _.any(baseLayers.custom(), function(customLayer) {\n      return customLayer.get('urlTemplate') === urlTemplate;\n    });\n  },\n\n  _initBinds: function() {\n    this.bind('change:date change:layerType', this._onChange, this);\n  },\n\n  _onChange: function() {\n    var dateStr = this.get('date');\n    var layerType = this.get('layerType');\n    this.set('layer', new cdb.admin.TileLayer({\n      urlTemplate: _.template(TYPES[layerType].url)({\n        date: dateStr\n      }),\n      attribution: TYPES[layerType].attribution,\n      maxZoom: TYPES[layerType].maxZoom,\n      minZoom: TYPES[layerType].minZoom,\n      name: TYPES[layerType].name + ' ' + dateStr\n    }));\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar DateFieldView = require('../../../edit_fields/date_field/date_field_view');\nvar EditFieldModel = require('../../../edit_fields/edit_field_model');\n\n/**\n * Represents the XYZ tab content.\n */\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    dateFormat: 'YYYY-MM-DD'\n  },\n\n  events: {\n    'click .js-day': '_onChangeToDay',\n    'click .js-night': '_onChangeToNight'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.dateModel = new EditFieldModel({\n      value: this.model.get('date'),\n      type: 'date'\n    });\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.$el.html(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/nasa/nasa')({\n        layerType: this.model.get('layerType'),\n        initialDateStr: moment(this.dateModel.get('value')).format(this.options.dateFormat)\n      })\n    );\n\n    this._renderDatePicker();\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:layerType', function() {\n      this.dateModel.set('readOnly', this.model.get('layerType') === \"night\");\n      this.render()\n    }, this);\n    this.dateModel.bind('change:value', function() {\n      var date = moment(this.dateModel.get('value')).format(this.options.dateFormat);\n      this.model.set('date', date);\n    }, this);\n    this.add_related_model(this.dateModel);\n  },\n\n  _renderDatePicker: function() {\n    // Date field \n    var dateField = new DateFieldView({\n      model: this.dateModel,\n      showTime: false,\n      showGMT: false\n    });\n    this.addView(dateField);\n    this._$datePicker().append(dateField.render().el);\n\n    // Disabled tooltip\n    if (this.dateModel.get('readOnly')) {\n      this.addView(\n        new cdb.common.TipsyTooltip({\n          el: this._$datePicker(),\n          title: function(e) {\n            return $(this).attr('data-title')\n          }\n        })\n      )\n    }\n  },\n\n  _onChangeToNight: function(ev) {\n    this.model.set('layerType', 'night');\n  },\n\n  _onChangeToDay: function() {\n    this.model.set('layerType', 'day');\n  },\n\n  _$datePicker: function() {\n    return this.$('.js-datePicker');\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * View representing the tabs content of the dialog.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-tabs button': '_onClickTab'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  render: function() {\n    var $el = $(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/tabs')({\n        model: this.model\n      })\n    );\n    $el.find('.js-tab-content').append(this._createTabContentView().el);\n    this.$el.html($el);\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:currentTab', this.render, this);\n  },\n\n  _createTabContentView: function() {\n    if (this._currentTabView) {\n      this._currentTabView.clean();\n    }\n    this._currentTabView = this.model.activeTabModel().createView();\n    this.addView(this._currentTabView);\n    return this._currentTabView.render();\n  },\n\n  _onClickTab: function(ev) {\n    this.killEvent(ev);\n    var name = $(ev.target).closest('button').data('name');\n    if (name) {\n      this.model.set('currentTab', name);\n    } else {\n      cdb.log.error('tab name was expected but was empty');\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Represents the TileJSON tab content.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'keydown .js-url': '_update',\n    'paste .js-url': '_update'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._lastURL = '';\n  },\n\n  render: function() {\n    this.$el.html(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/tile_json/tile_json')({\n      })\n    );\n\n    return this;\n  },\n\n  _update: function(ev) {\n    ev.stopPropagation();\n    this._debouncedUpdate();\n  },\n\n  _debouncedUpdate: _.debounce(function() {\n    this._disableOkBtn(true);\n    this._indicateIsValidating(true);\n\n    var url = this._urlWithHTTP();\n    if (url === this._lastURL) {\n      // Even if triggered nothing really changed so just update UI and return early\n      this._indicateIsValidating(false);\n      this._updateError();\n      return;\n    }\n\n    this._lastURL = url;\n    this._indicateIsValidating(true);\n    var tileJSON = new cdb.admin.TileJSON({\n      url: url\n    });\n\n    var self = this;\n    tileJSON.fetch({\n      success: function() {\n        if (url === self._lastURL) {\n          self.model.set('layer', tileJSON.newTileLayer());\n          self._disableOkBtn(false);\n          self._indicateIsValidating(false);\n          self._updateError();\n        }\n      },\n      error: function() {\n        if (url === self._lastURL) {\n          self._indicateIsValidating(false);\n          // Note that this text can not be longer, or it will exceed available space of the error label.\n          self._updateError('Invalid URL, please make sure it is correct');\n        }\n      }\n    });\n  }, 150),\n\n  _disableOkBtn: function(disable) {\n    this.$('.ok')[ disable ? 'addClass' : 'removeClass' ]('is-disabled');\n  },\n\n  _updateError: function(msg) {\n    this.$('.js-error').text(msg)[ msg ? 'addClass' : 'removeClass' ]('is-visible');\n  },\n\n  _indicateIsValidating: function(indicate) {\n    if (indicate) {\n      this.$('.js-idle').hide();\n      this.$('.js-validating').show();\n    } else {\n      this.$('.js-validating').hide();\n      this.$('.js-idle').show();\n    }\n  },\n\n  // So don't try to be fetched relatively to current URL path later\n  _urlWithHTTP: function() {\n    var str = this.$('.js-url').val();\n    if (str.indexOf('http://') === -1) {\n      return 'http://' + str;\n    } else {\n      return str;\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar TileJSONView = require('./tile_json_view');\n\n/**\n * View model for TileJSON tab content.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: 'tile_json',\n    label: 'TileJSON',\n    layer: undefined // will be set when valid\n  },\n\n  createView: function() {\n    this.set({\n      layer: undefined\n    });\n    return new TileJSONView({\n      model: this\n    });\n  },\n\n  hasAlreadyAddedLayer: function(baseLayers) {\n    var urlTemplate = this.get('layer').get('urlTemplate');\n    return _.any(baseLayers.custom(), function(customLayer) {\n      return customLayer.get('urlTemplate') === urlTemplate;\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Model for an individual WMS/WMTS layer.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    state: 'idle', //, saving, saveDone, saveFail\n    layer: undefined // set after saveDone\n  },\n\n  canSave: function(baseLayers) {\n    return !_.any(baseLayers.custom(), function(customLayer) {\n      return customLayer.get('name') === this.get('title');\n    }, this);\n  },\n\n  save: function() {\n    this.set('state', 'saving');\n    this._shouldBeProxied() ? this._createProxiedLayer() : this._newTileLayer();\n  },\n\n  _shouldBeProxied: function() {\n    if (this.get('type') === 'wmts') {\n      var supportedMatrixSets = cdb.admin.WMSService.supportedMatrixSets(this.get('matrix_sets') || []);\n      return supportedMatrixSets.length > 0;\n    }\n    return true;\n  },\n\n  _createProxiedLayer: function() {\n    var self = this;\n    var w = new cdb.admin.WMSService({\n      wms_url: this.url(),\n      title: this.get('title'),\n      name: this.get('name'),\n      layer: this.get('name'),\n      srs: this.get('srs'),\n      bounding_boxes: this.get('llbbox'),\n      type: this.get('type'), // wms/wmts\n      matrix_sets: this.get('matrix_sets')\n    });\n\n    // Event tracking \"WMS layer selected\"\n    cdb.god.trigger('metrics', 'select_wms', {\n      email: window.user_data.email\n    });\n\n    var self = this;\n    w.save({}, {\n      success: function(m) {\n        var tileLayer;\n        try {\n          tileLayer = m.newTileLayer();\n        } catch(e) {\n        }\n        if (tileLayer) {\n          self._setNewTileLayer(tileLayer);\n        } else {\n          self.set('state', 'saveFail');\n        }\n      },\n      error: function() {\n        self.set('state', 'saveFail');\n      }\n    });\n\n    return w;\n  },\n\n  _setNewTileLayer: function(tileLayer) {\n    this.set({\n      state: 'saveDone',\n      tileLayer: tileLayer\n    });\n  },\n\n  _newTileLayer: function() {\n    var tileLayer = cdb.admin.TileLayer.byCustomURL(this._xyzURLTemplate(), false);\n    tileLayer.set({\n      name: this.get('title') || this.get('name'),\n      attribution: this.get('attribution'),\n      bounding_boxes: this.get('llbbox')\n    });\n    this._setNewTileLayer(tileLayer);\n    return tileLayer;\n  },\n\n  _xyzURLTemplate: function() {\n    var urlTemplate = this.get('url_template') || '';\n    // Convert the proxy template variables to XYZ format, http://foo.com/bar/%%(z)s/%%(x)s/%%(y)s.png\"\n    return urlTemplate.replace(/%%\\((\\w)\\)s/g, '{$1}');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for an individual layer item.\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'li',\n  className: 'List-row',\n\n  events: {\n    'click .js-add': '_onClickAdd'\n  },\n\n  render: function() {\n    this.$el.html(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/wms/layer')({\n        model: this.model,\n        canSave: this.model.canSave(this.options.baseLayers)\n      })\n    );\n    return this;\n  },\n\n  _onClickAdd: function(ev) {\n    this.killEvent(ev);\n    if (this.model.canSave(this.options.baseLayers)) {\n      this.model.save();\n    }\n  }\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar LayerModel = require('./layer_model.js');\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: LayerModel,\n\n  fetch: function(url, callback) {\n    this.url = url;\n\n    var wmsService = new cdb.admin.WMSService({\n      wms_url: url\n    });\n\n    var self = this;\n    wmsService.fetch().always(function() {\n      self.reset(wmsService.get('layers'));\n      self.each(function(model) {\n        model.set('type', wmsService.get('type')); // wms/wmts\n      });\n      callback();\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar pluralizeStr = require('../../../view_helpers/pluralize_string');\nvar LayerView = require('./layer_view.js');\n\n/**\n * Sub view, to select what layer to use as basemap.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-back': '_onClickBack'\n  },\n\n  render: function() {\n\n    this.clearSubViews();\n\n    var $el = $(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/wms/select_layer')({\n        searchQuery: this.model.get('searchQuery'),\n        layersFound: this.model.getLayers(),\n        layersAvailableCount: this.model.layersAvailableCount(),\n        pluralizeStr: pluralizeStr\n      })\n    );\n    var $list = $el.find('.js-layers');\n    $list.append.apply($list, this._renderedLayers());\n    this.$el.html($el);\n    return this;\n  },\n\n  _renderedLayers: function() {\n    return this.model.getLayers().map(function(layer) {\n      var view = new LayerView({\n        model: layer,\n        baseLayers: this.model.get('baseLayers')\n      });\n      this.addView(view);\n      return view.render().el;\n    }, this);\n  },\n\n  _onClickBack: function(ev) {\n    this.killEvent(ev);\n    this.model.set('currentView', 'enterURL');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar WMSView = require('./wms_view.js');\nvar LayersCollection = require('./layers_collection.js');\n\n/**\n * View model for WMS/WMTS tab content.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: 'wms',\n    label: 'WMS/WMTS',\n    currentView: 'enterURL', // [fetchingLayers, selectLayer, savingLayer]\n    layersFetched: false,\n    layers: undefined,\n    baseLayers: undefined // expected when instantiated\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.set('layers', new LayersCollection());\n    this._initBinds();\n  },\n\n  createView: function() {\n    this.set({\n      currentView: 'enterURL',\n      layersFetched: false\n    });\n    return new WMSView({\n      model: this\n    });\n  },\n\n  fetchLayers: function(url) {\n    this.set('currentView', 'fetchingLayers');\n    var self = this;\n    this.get('layers').fetch(url, function() {\n      self.set({\n        currentView: self.get('layers').length > 0 ? 'selectLayer' : 'enterURL',\n        layersFetched: true\n      });\n    });\n  },\n\n  layersAvailableCount: function() {\n    return _.difference(\n      this.get('layers').pluck('title'),\n      this.get('baseLayers').pluck('name')\n    ).length;\n  },\n\n  get: function(name) {\n    if (name === 'layer') {\n      return this.get('layers')\n        .find(function(m) {\n          return m.get('state') === 'saveDone';\n        })\n        .get('tileLayer');\n    } else {\n      return cdb.core.Model.prototype.get.apply(this, arguments);\n    }\n  },\n\n  getLayers: function() {\n    if (this.get(\"searchQuery\")) {\n      var regExp = new RegExp(this.get(\"searchQuery\"), 'i');\n      return this.get(\"layers\").filter(function(layer) {\n        return layer.get(\"name\").match(regExp);\n      }, this);\n    } else {\n      return this.get(\"layers\");\n    }\n  },\n\n  hasAlreadyAddedLayer: function() {\n    // Already added layers are disabled to be saved for each layer\n    return false;\n  },\n\n  _initBinds: function() {\n    this.get('layers').bind('change:state', this._onLayerStateChange, this);\n  },\n\n  _onLayerStateChange: function(_, newState) {\n    switch (newState) {\n      case 'saving':\n        this.set('currentView', 'savingLayer');\n        break;\n      case 'saveDone':\n        this.trigger('saveBasemap');\n        break;\n      case 'saveFail':\n      this.set('currentView', 'saveFail');\n        break;\n      default:\n        this.set('currentView', 'selectLayer');\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar randomQuote = require('../../../view_helpers/random_quote.js');\nvar SelectLayerView = require('./select_layer_view.js');\nvar ViewFactory = require('../../../view_factory.js');\n\n/**\n * Represents the WMS/WMTS tab category.\n * Current state is defined by presence (or lack of) layers\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'keydown .js-search-input': '_onKeyDown',\n    'submit .js-search-form': 'killEvent',\n    'keydown .js-url': '_update',\n    'paste .js-url': '_update',\n    'click .js-fetch-layers': '_onClickFetchLayers',\n    'click .js-clean-search': '_onCleanSearchClick',\n    'click .js-search-link': '_submitSearch'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    var view;\n\n    switch (this.model.get('currentView')) {\n      case 'savingLayer':\n        view = ViewFactory.createByTemplate('common/templates/loading', {\n          title: 'Saving layer…',\n          quote: randomQuote()\n        });\n        break;\n      case 'selectLayer':\n        view = new SelectLayerView({\n          model: this.model\n        });\n        break;\n      case 'saveFail':\n        view = ViewFactory.createByTemplate('common/templates/fail', {\n          msg: ''\n        });\n        break;\n      case 'fetchingLayers':\n        view = ViewFactory.createByTemplate('common/templates/loading', {\n          title: 'Fetching layers…',\n          quote: randomQuote()\n        });\n        break;\n      case 'enterURL':\n      default:\n        view = ViewFactory.createByTemplate('common/dialogs/add_custom_basemap/wms/enter_url', {\n          layersFetched: this.model.get('layersFetched'),\n          layers: this.model.get('layers')\n        });\n        break;\n    }\n    this.addView(view);\n    this.$el.append(view.render().el);\n\n    this.$(\".js-search-input\").focus();\n\n    return this;\n  },\n\n  _showCleanSearchButton: function() {\n    this.$('.js-clean-search').show();\n  },\n\n  _hideCleanSearchButton: function() {\n    this.$('.js-clean-search').hide();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.model.bind('change', this._onChangeSearchQuery, this);\n    this.model.get(\"layers\").bind('reset', this.render, this);\n  },\n\n  _update: function(ev) {\n    ev.stopPropagation();\n    this._debouncedUpdate();\n  },\n\n  _debouncedUpdate: _.debounce(function() {\n    this._enableFetchLayersButton(!!this.$('.js-url').val());\n    this.$('.js-error').removeClass('is-visible'); // resets error state when changed\n  }, 100),\n\n  _enableFetchLayersButton: function(enable) {\n    this.$('.js-fetch-layers')[ enable ? 'removeClass' : 'addClass' ]('is-disabled');\n  },\n\n  _onKeyDown: function(ev) {\n    var enterPressed = (ev.keyCode == $.ui.keyCode.ENTER);\n    if (enterPressed) {\n      this.killEvent(ev);\n      this._submitSearch();\n    } \n  },\n\n  _submitSearch: function(ev) {\n    this.killEvent(ev);\n\n    this.model.set(\"searchQuery\", this.$(\".js-search-input\").val());\n  },\n\n  _onChangeSearchQuery: function() {\n\n    var searchQuery = this.model.get(\"searchQuery\");\n\n    if (!searchQuery) {\n      this._hideCleanSearchButton();\n    }\n  \n  },\n\n  _onCleanSearchClick: function(ev) {\n    this.killEvent(ev);\n    this.model.set(\"searchQuery\", \"\");\n  },\n\n  _onClickFetchLayers: function(ev) {\n    this.killEvent(ev);\n    var url = this.$('.js-url').val();\n    if (url) {\n      this.model.fetchLayers(url);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar XYZView = require('./xyz_view');\n\n/**\n * View model for XYZ tab content.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: 'xyz',\n    label: 'XYZ',\n    tms: false,\n    layer: undefined // will be set when valid\n  },\n\n  createView: function() {\n    return new XYZView({\n      model: this\n    });\n  },\n\n  hasAlreadyAddedLayer: function(baseLayers) {\n    var urlTemplate = this.get('layer').get('urlTemplate');\n    return _.any(baseLayers.custom(), function(customLayer) {\n      return customLayer.get('urlTemplate') === urlTemplate;\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Represents the XYZ tab content.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'XYZPanel',\n\n  events: {\n    'click .js-tms': '_changeTMS',\n    'keydown .js-url': '_update',\n    'paste .js-url': '_update'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._lastCallSeq = 0;\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(\n      cdb.templates.getTemplate('common/dialogs/add_custom_basemap/xyz/xyz')({\n      })\n    );\n    this._initViews();\n    return this;\n  },\n\n  _initViews: function() {\n    // Add TMS tooltip\n    var tooltip = new cdb.common.TipsyTooltip({\n      el: this.$('.js-tms'),\n      title: function() {\n        return $(this).data('title')\n      }\n    })\n    this.addView(tooltip);\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:tms', this._setTMSCheckbox, this);\n  },\n\n  _update: function(ev) {\n    ev.stopPropagation();\n    this._debouncedUpdate();\n  },\n\n  _changeTMS: function(ev) {\n    this.model.set('tms', !this.model.get('tms'));\n    this._update(ev);\n  },\n\n  _setTMSCheckbox: function(e) {\n    this.$('.js-tms .Checkbox-input')[ this.model.get('tms') ? 'addClass' : 'removeClass' ]('is-checked');\n  },\n\n  _debouncedUpdate: _.debounce(function() {\n    this._disableOkBtn(true);\n    this._indicateIsValidating(true);\n    var layer;\n    var urlErrorMsg;\n\n    var url = this.$('.js-url').val();\n    var tms = this.model.get('tms');\n\n    if (url) {\n      try {\n        layer = cdb.admin.TileLayer.byCustomURL(url, tms);\n      } catch (e) {\n        urlErrorMsg = 'It does not look like a valid XYZ URL';\n      }\n    }\n\n    this.model.set('layer', layer);\n    if (layer) {\n      var self = this;\n      // Make sure only the last call made is the one that defines view change,\n      // avoids laggy responses to indicate wrong state\n      var thisCallSeq = ++this._lastCallSeq;\n      layer.validateTemplateURL({\n        success: function() {\n          if (thisCallSeq === self._lastCallSeq) {\n            self._disableOkBtn(false);\n            self._indicateIsValidating(false);\n            self._updateError();\n          }\n        },\n        error: function() {\n          if (thisCallSeq === self._lastCallSeq) {\n            self._disableOkBtn(false);\n            self._indicateIsValidating(false);\n            // Note that this text can not be longer, or it will exceed available space of the error label.\n            self._updateError(\"We couldn't validate this, if you're sure it contains data click \\\"add basemap\\\"\");\n          }\n        }\n      });\n    } else if (url) {\n      this._indicateIsValidating(false);\n      this._updateError(urlErrorMsg);\n    } else {\n      this._indicateIsValidating(false);\n      this._updateError();\n    }\n  }, 150),\n\n  _setTMS: function(ev) {\n    var $checkbox = $(ev.target).closest('.Checkbox');\n    $checkbox.find('.Checkbox-input').toggleClass('is-checked');\n    this._update(ev);\n  },\n\n  _disableOkBtn: function(disable) {\n    this.$('.ok')[ disable ? 'addClass' : 'removeClass' ]('is-disabled');\n  },\n\n  _updateError: function(msg) {\n    this.$('.js-error').text(msg)[ msg ? 'addClass' : 'removeClass' ]('is-visible');\n  },\n\n  _indicateIsValidating: function(indicate) {\n    if (indicate) {\n      this.$('.js-validating').show();\n    } else {\n      this.$('.js-validating').hide();\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\nmodule.exports = BaseDialog.extend({\n\n  events: function () {\n    return _.extend({}, BaseDialog.prototype.events, {\n      'click .js-ok': '_continue'\n    });\n  },\n\n  initialize: function () {\n    this.elder('initialize');\n    this.template = cdb.templates.getTemplate('common/dialogs/builder_features_warning/template');\n  },\n\n  render_content: function () {\n    return this.template({\n\n    });\n  },\n\n  _continue: function () {\n    this.close();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar pluralizeString = require('../../view_helpers/pluralize_string');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Lock/unlock datasets/maps dialog.\n */\nmodule.exports = BaseDialog.extend({\n\n  events: function() {\n    return _.extend({}, BaseDialog.prototype.events, {\n      'click .js-ok': '_ok'\n    });\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.options.template = this.options.template || cdb.templates.getTemplate('common/dialogs/change_lock/templates/dashboard');\n    this.model.bind('change', function() {\n      if (this.model.get('state') === 'ProcessItemsDone') {\n        this.close();\n      } else {\n        this.render();\n      }\n    }, this);\n  },\n\n  /**\n   * @implements cdb.ui.common.Dialog.prototype.render_content\n   */\n  render_content: function() {\n    return this['_render' + this.model.get('state')]();\n  },\n\n  _renderConfirmChangeLock: function() {\n    // An entity can be an User or Organization\n    var itemsCount = this.model.get('items').length;\n    var areLocked = this.model.get('initialLockValue');\n\n    return this.options.template({\n      model: this.model,\n      itemsCount: itemsCount,\n      ownerName: this.options.ownerName,\n      isOwner: this.options.isOwner,\n      thisOrTheseStr: itemsCount === 1 ? 'this' : 'these',\n      itOrThemStr: itemsCount === 1 ? 'it' : 'them',\n      areLocked: areLocked,\n      positiveOrNegativeStr: areLocked ? 'positive' : 'alert',\n      lockOrUnlockStr: areLocked ? 'unlock' : 'lock',\n      contentTypePluralized: pluralizeString(\n        this.model.get('contentType') === 'datasets' ? 'dataset' : 'map', //singular\n        this.model.get('contentType'), // plural\n        itemsCount\n      )\n    });\n  },\n\n  /**\n   * @overrides BaseDialog.prototype._ok\n   */\n  _ok: function(e) {\n    this.killEvent(e);\n    this.model.inverseLock();\n    this.render();\n  },\n\n  _renderProcessingItems: function() {\n    var lockingOrUnlockingStr = this.model.get('initialLockValue') ? 'Unlocking' : 'Locking';\n    return cdb.templates.getTemplate('common/templates/loading')({\n      title: lockingOrUnlockingStr + ' ' + pluralizeString(this.model.get('contentType') === 'datasets' ? 'dataset' : 'map', this.model.get('items').length) + '…',\n      quote: randomQuote()\n    });\n  },\n\n  _renderProcessItemsFail: function() {\n    var lockingOrUnlockingStr = this.model.get('initialLockValue') ? 'unlock' : 'lock';\n    return cdb.templates.getTemplate('common/templates/fail')({\n      msg: 'Failed to ' + lockingOrUnlockingStr + ' all items'\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar batchProcessItems = require('../../batch_process_items');\n\n/**\n * View model for change lock view.\n * Manages the life cycle states for the change lock view.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    state: 'ConfirmChangeLock',\n    initialLockValue: false,\n    contentType: 'datasets',\n    items: undefined // a Backbone collection\n  },\n\n  initialize: function(attrs) {\n    this.elder('initialize');\n    this.set('items', new Backbone.Collection(attrs.items));\n    if (this.get('items').chain().map(function(item) { return item.get('locked'); }).uniq().value().length > 1) {\n      var errorMsg = 'It is assumed that all items have the same locked state, a user should never be able to ' +\n        'select a mixed item with current UI. If you get an error with this message something is broken';\n      if (window.trackJs && window.trackJs.track) {\n        window.trackJs.track(errorMsg);\n      } else {\n        throw new Error(errorMsg);\n      }\n    }\n\n    this.set('initialLockValue', this.get('items').at(0).get('locked'));\n  },\n\n  inverseLock: function() {\n    this.set('state', 'ProcessingItems');\n\n    batchProcessItems({\n      howManyInParallel: 5,\n      items: this.get('items').toArray(),\n      processItem: this._lockItem.bind(this, !this.get('initialLockValue')),\n      done: this.set.bind(this, 'state', 'ProcessItemsDone'),\n      fail: this.set.bind(this, 'state', 'ProcessItemsFail')\n    });\n  },\n\n  _lockItem: function(newLockedValue, item, callback) {\n    item.save({ locked: newLockedValue })\n      .done(function() {\n        callback();\n      })\n      .fail(function() {\n        callback('something failed');\n      });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar StartView = require('./start_view');\nvar PrivacyOptions = require('./options_collection');\nvar BaseDialog = require('../../views/base_dialog/view');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar ViewFactory = require('../../view_factory');\nvar ShareView = require('./share/share_view');\n\n/**\n * Change privacy datasets/maps dialog.\n */\nvar ChangePrivacyView = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    this._privacyOptions = PrivacyOptions.byVisAndUser(this.options.vis, this.options.user);\n    this._initViews();\n    this._initBinds();\n  },\n\n  /**\n   * @implements cdb.ui.common.Dialog.prototype.render_content\n   */\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  ok: function() {\n    var selectedOption = this._privacyOptions.selectedOption();\n    if (!selectedOption.canSave()) {\n      return;\n    }\n\n    var self = this;\n    this._panes.active('saving');\n    selectedOption.saveToVis(this.options.vis, {\n      success: function() {\n        self.close();\n      },\n      error: function() {\n        self._panes.active('saveFail');\n      }\n    });\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('start',\n      new StartView({\n        privacyOptions: this._privacyOptions,\n        user: this.options.user,\n        vis: this.options.vis\n      })\n    );\n    this._panes.addTab('saving',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Saving privacy…',\n        quote: randomQuote()\n      }).render()\n    );\n    this._panes.addTab('saveFail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: ''\n      }).render()\n    );\n    this._panes.active('start');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n    this._panes.getPane('start').bind('clickedShare', this._openShareDialog, this);\n  },\n\n  _openShareDialog: function() {\n    var view = new ShareView({\n      clean_on_hide: true,\n      enter_to_confirm: true,\n      user: this.options.user,\n      vis: this.options.vis,\n      ChangePrivacyView: ChangePrivacyView\n    });\n\n    // Order matters, close this dialog before appending the share one, for side-effects to work as expected (body.is-inDialog)\n    this.close();\n    view.appendToBody();\n  }\n});\n\nmodule.exports = ChangePrivacyView;\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Default model for a privacy option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    privacy: 'PUBLIC',\n    disabled: false,\n    selected: false,\n    password: undefined\n  },\n\n  validate: function(attrs) {\n    if (attrs.disabled && attrs.selected) {\n      return 'Option can not be disabled and selected at the same time';\n    }\n  },\n\n  classNames: function() {\n    return _.chain(['disabled', 'selected'])\n      .map(function(attr) { return !!this.attributes[attr] ? 'is-'+attr : undefined; }, this)\n      .compact().value().join(' ');\n  },\n\n  canSave: function() {\n    return !this.get('disabled');\n  },\n\n  /**\n   * @param vis {Object} instance of cdb.admin.Visualization\n   * @param callbacks {Object}\n   */\n  saveToVis: function(vis, callbacks) {\n    return vis.save(this._attrsToSave(), _.extend({ wait: true }, callbacks));\n  },\n\n  /**\n   * @returns {Object} attrs\n   * @protected\n   */\n  _attrsToSave: function() {\n    return _.pick(this.attributes, 'privacy', 'password');\n  }\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar OptionModel = require('./option_model');\nvar PasswordOptionModel = require('./password_option_model');\n\n/**\n * type property should match the value given from the API.\n */\nvar ALL_OPTIONS = [{\n  privacy: 'PUBLIC',\n  illustrationType: 'positive',\n  iconFontType: 'unlock',\n  title: 'Public',\n  desc: 'Everyone can view and download it',\n  alwaysEnable: true\n}, {\n  privacy: 'LINK',\n  illustrationType: 'alert',\n  iconFontType: 'unlock',\n  title: 'With link',\n  desc: 'Only the people with the link can view it'\n}, {\n  privacy: 'PASSWORD',\n  illustrationType: 'alert',\n  iconFontType: 'unlockWithEllipsis',\n  title: 'Password protected',\n  desc: 'Only the people with the password can view it'\n}, {\n  privacy: 'PRIVATE',\n  illustrationType: 'negative',\n  iconFontType: 'lock',\n  title: 'Private',\n  desc: 'Only you can access it'\n}];\n\n\n/**\n * Collection that holds the different privacy options.\n */\nmodule.exports = Backbone.Collection.extend({\n\n  model: function(attrs, options) {\n    if (attrs.privacy === 'PASSWORD') {\n      return new PasswordOptionModel(attrs, options);\n    } else {\n      return new OptionModel(attrs, options);\n    }\n  },\n\n  initialize: function() {\n    this.bind('change:selected', this._deselectLastSelected, this)\n  },\n\n  selectedOption: function() {\n    return this.find(function(option) {\n      return option.get('selected');\n    })\n  },\n\n  passwordOption: function() {\n    return this.find(function(option) {\n      return option.get('privacy') === 'PASSWORD';\n    })\n  },\n\n  _deselectLastSelected: function(m, isSelected) {\n    if (isSelected) {\n      this.each(function(option) {\n        if (option !== m) {\n          option.set({selected: false}, {silent: true});\n        }\n      });\n    }\n  }\n\n}, { // Class properties:\n\n  /**\n   * Get a privacy options collection from a Vis model\n   *\n   * Note that since the user's permissions should change very seldom, it's reasonable to assume they will be static for\n   * the collection's lifecycle, so set them on the models attrs when creating the collection.\n   * collection is created.\n   *\n   * @param vis {Object} instance of cdb.admin.Visualization\n   * @param user {Object} instance of cdb.admin.User\n   * @returns {Object} instance of this collection\n   */\n  byVisAndUser: function(vis, user) {\n    var canSelectPremiumOptions = user.get('actions')[ vis.isVisualization() ? 'private_maps' : 'private_tables' ];\n    var currentPrivacy = vis.get('privacy');\n    var availableOptions = vis.privacyOptions();\n\n    return new this(\n      _.chain(ALL_OPTIONS)\n        .filter(function(option) {\n          return _.contains(availableOptions, option.privacy);\n        })\n        .map(function(option) {\n          // Set state that depends on vis and user attrs, they should not vary during the lifecycle of this collection\n          return _.defaults({\n            selected: option.privacy === currentPrivacy,\n            disabled: !(option.alwaysEnable || canSelectPremiumOptions)\n          }, option)\n        })\n        .value()\n    );\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar OptionModel = require('./option_model');\n\n/**\n * View model for the special privacy option representing a password protected map.\n * It handles the logic related to the password that needs to be set for the option.\n */\nvar PasswordOptionModel = OptionModel.extend({\n  \n  initialize: function() {\n    OptionModel.prototype.initialize.apply(this, arguments);\n\n    // Initially a default fake password is set, but if option is selected (like switching option) it's reset\n    this.set('password', PasswordOptionModel.DEFAULT_FAKE_PASSWORD);\n  },\n\n  /**\n   * @override OptionModel.attrsToSave\n   */\n  _attrsToSave: function() {\n    var attrs = OptionModel.prototype._attrsToSave.call(this);\n    \n    if (attrs.password === PasswordOptionModel.DEFAULT_FAKE_PASSWORD) {\n      delete attrs.password;\n    }\n    \n    return attrs;\n  }, \n  \n  canSave: function() {\n    return OptionModel.prototype.canSave.call(this) && !_.isEmpty(this.get('password'));\n  }\n  \n}, {\n  \n  DEFAULT_FAKE_PASSWORD: '!@#!@#'\n  \n});\n\nmodule.exports = PasswordOptionModel;\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar PermissionView = require('./permission_view');\nvar UserDetailsView = require('./user_details_view');\nvar GroupDetailsView = require('./group_details_view');\nvar ViewFactory = require('../../../view_factory');\n\n/**\n * Content view of the share dialog, lists of users to share item with.\n * - model: {Object} the share view model\n * - collection: {cdb.admin.Grantables}\n * - hasSearch: {Boolean}\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    _.each(['model', 'collection', 'pagedSearchModel'], function(name) {\n      if (_.isUndefined(this.options[name])) throw new Error(name + ' is required');\n    }, this);\n\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.empty();\n\n    if (!this.options.pagedSearchModel.get('q')) {\n      this._renderOrganizationPermissionView()\n    }\n    this._renderGrantablesViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.collection.bind('reset', this.render, this);\n    this.add_related_model(this.collection);\n\n    this.options.pagedSearchModel.on('change:q', this.render, this);\n    this.add_related_model(this.options.pagedSearchModel);\n  },\n\n  _renderGrantablesViews: function() {\n    var dependentVisualizations = this.model.get('vis').tableMetadata().dependentVisualizations();\n    this.collection.each(function(grantable) {\n      this._appendView(\n        new PermissionView({\n          model: grantable.entity,\n          permission: this.model.get('permission'),\n          isWriteAccessTogglerAvailable: this.model.isWriteAccessTogglerAvailable(),\n          detailsView: this._createDetailsView(\n            this._detailsViewOpts.bind(this, dependentVisualizations, grantable.entity),\n            grantable\n          )\n        })\n      )\n    }, this);\n  },\n\n  _renderOrganizationPermissionView: function() {\n    this._appendView(\n      new PermissionView({\n        model: this.model.get('organization'),\n        permission: this.model.get('permission'),\n        isWriteAccessTogglerAvailable: this.model.isWriteAccessTogglerAvailable(),\n        detailsView: ViewFactory.createByTemplate('common/dialogs/change_privacy/share/details', {\n          avatarUrl: false,\n          willRevokeAccess: false,\n          title: 'Default settings for your Organization',\n          desc: 'New users will have this permission',\n          roleLabel: false\n        }, {\n          className: 'ChangePrivacy-shareListItemInfo'\n        })\n      })\n    );\n  },\n\n  _appendView: function(view) {\n    this.$el.append(view.render().el);\n    this.addView(view);\n  },\n\n  _createDetailsView: function(detailsViewOpts, grantable) {\n    var type = grantable.get('type');\n    switch(type) {\n      case 'user':\n        return new UserDetailsView(\n          detailsViewOpts([grantable.id])\n        );\n        break;\n      case 'group':\n        return new GroupDetailsView(\n          detailsViewOpts(\n            grantable.entity.users.chain()\n              .reject(this._isCurrentUser)\n              .pluck('id')\n              .value()\n          )\n        );\n        break;\n      default:\n        cdb.log.error('No details view for grantable model of type ' + type);\n        return new cdb.core.View(detailsViewOpts());\n    }\n  },\n\n  _detailsViewOpts: function(dependentVisualizations, grantableEntity, userIds) {\n    return {\n      className: 'ChangePrivacy-shareListItemInfo',\n      model: grantableEntity,\n      permission: this.model.get('permission'),\n      isUsingVis: _.any(dependentVisualizations, function(vis) {\n        return _.any(userIds, function(userId) {\n          return userId === vis.permission.owner.id;\n        })\n      })\n    };\n  },\n\n  _isCurrentUser: function(user) {\n    return user.id === cdb.config.get('user').id;\n  },\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar pluralizeString = require('../../../view_helpers/pluralize_string')\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    _.each(['permission', 'isUsingVis'], function(name) {\n      if (_.isUndefined(this.options[name])) throw new Error(name + ' is required');\n    }, this);\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/change_privacy/share/details')({\n        willRevokeAccess: this._willRevokeAccess(),\n        avatarUrl: this.model.get('avatar_url'),\n        title: this.model.get('display_name'),\n        desc: this._desc(),\n        roleLabel: false\n      })\n    );\n    return this;\n  },\n\n  _desc: function() {\n    var usersCount = this.model.users.length;\n    var xMembers = pluralizeString.prefixWithCount('member', 'members', usersCount);\n\n    if (this._willRevokeAccess()) {\n      return xMembers + '. ' + pluralizeString(\"Member's\", \"Members'\", usersCount) + ' maps will be affected';\n    } else if (this.options.isUsingVis) {\n      return xMembers + '. ' + pluralizeString('Member is', 'Members are', usersCount) + ' using this dataset';\n    } else {\n      return xMembers;\n    }\n  },\n\n  _willRevokeAccess: function() {\n    return this.options.isUsingVis && !this.options.permission.hasReadAccess(this.model);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for an individual access toggler.\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'span',\n\n  events: {\n    'mouseover .js-toggler.is-disabled': '_onHoverDisabledToggler',\n    'mouseout .js-toggler': '_closeTooltip',\n    'mouseleave .js-toggler': '_closeTooltip',\n    'change .js-input': '_onChangeInput'\n  },\n\n  initialize: function() {\n    _.each(['model', 'permission', 'hasAccess', 'canChangeAccess', 'toggleAccess', 'label'], function(name) {\n      if (_.isUndefined(this.options[name])) throw new Error(name + ' is required');\n    }, this);\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(\n      cdb.templates.getTemplate('common/dialogs/change_privacy/share/permission_toggler')({\n        cid: this.cid,\n        hasAccess: this.options.hasAccess(),\n        canChangeAccess: this.options.canChangeAccess(),\n        label: this.options.label\n      })\n    );\n    return this;\n  },\n\n  _onChangeInput: function() {\n    this.options.toggleAccess();\n  },\n\n  _onHoverDisabledToggler: function(ev) {\n    var aclItem = this.options.permission.findRepresentableAclItem(this.model);\n    if (aclItem && !aclItem.isOwn(this.model)) {\n      this._tooltipView().showTipsy();\n    }\n  },\n\n  _closeTooltip: function() {\n    this._tooltipView().hideTipsy();\n  },\n\n  _tooltipView: function(el) {\n    if (!this._tooltip) {\n      this._tooltip = this._newTooltipView();\n      this.addView(this._tooltip);\n    }\n    return this._tooltip;\n  },\n\n  _newTooltipView: function(el) {\n    return new cdb.common.TipsyTooltip({\n      el: this.$('.js-toggler'),\n      trigger: 'manual',\n      title: this._inheritedAccessTooltipText.bind(this)\n    });\n  },\n\n  _inheritedAccessTooltipText: function() {\n    var aclItem = this.options.permission.findRepresentableAclItem(this.model);\n    var type = aclItem.get('type');\n    switch(type) {\n      case 'group':\n        return 'Access is inherited from group ' + aclItem.get('entity').get('name');\n      case 'org':\n        return 'Access is inherited from organization';\n      default:\n        cdb.log.error('Trying to display inherited access for an unrecognized type ' + type)\n        return ''\n    }\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar PermissionTogglerview = require('./permission_toggler_view');\nvar ViewFactory = require('../../../view_factory');\n\n/**\n * View to change permission for a given model.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ChangePrivacy-shareListItem',\n\n  initialize: function() {\n    _.each(['model', 'permission', 'isWriteAccessTogglerAvailable', 'detailsView'], function(name) {\n      if (_.isUndefined(this.options[name])) throw new Error(name + ' is required');\n    }, this);\n\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.options.permission.acl.bind('add remove reset change', this.render, this);\n    this.add_related_model(this.options.permission);\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this._renderDetails();\n    this._renderAccessTogglers();\n    return this;\n  },\n\n  _renderDetails: function() {\n    this._renderView(this.options.detailsView);\n  },\n\n  _renderAccessTogglers: function() {\n    var togglers = [\n      this._newReadToggler()\n    ];\n\n    if (this.options.isWriteAccessTogglerAvailable) {\n      togglers.unshift(this._newWriteToggler());\n    }\n\n    this._renderView(ViewFactory.createByList(togglers));\n  },\n\n  _newWriteToggler: function() {\n    var p = this.options.permission;\n    return new PermissionTogglerview({\n      className: 'ChangePrivacy-shareListItemTogglerContainer',\n      model: this.model,\n      permission: p,\n      label: 'Write',\n      hasAccess: p.hasWriteAccess.bind(p, this.model),\n      canChangeAccess: p.canChangeWriteAccess.bind(p, this.model),\n      toggleAccess: this._toggleWrite.bind(this)\n    });\n  },\n\n  _newReadToggler: function() {\n    var p = this.options.permission;\n    return new PermissionTogglerview({\n      model: this.model,\n      permission: p,\n      label: 'Read',\n      hasAccess: p.hasReadAccess.bind(p, this.model),\n      canChangeAccess: p.canChangeReadAccess.bind(p, this.model),\n      toggleAccess: this._toggleRead.bind(this)\n    });\n  },\n\n  _renderView: function(view) {\n    this.addView(view);\n    this.$el.append(view.render().el)\n  },\n\n  _toggleWrite: function() {\n    var p = this.options.permission;\n    if (p.canChangeWriteAccess(this.model)) {\n      if (p.hasWriteAccess(this.model)) {\n        p.revokeWriteAccess(this.model);\n      } else {\n        p.grantWriteAccess(this.model);\n      }\n    }\n  },\n\n  _toggleRead: function() {\n    var p = this.options.permission;\n    if (p.canChangeReadAccess(this.model)) {\n      if (p.hasReadAccess(this.model)) {\n        p.revokeAccess(this.model);\n      } else {\n        p.grantReadAccess(this.model);\n      }\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * View model for a share view modal.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    vis: undefined,\n    permission: undefined,\n    organization: undefined\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.vis) throw new Error('vis is required');\n    if (!attrs.organization) throw new Error('organization is required');\n\n    var vis = this.get('vis');\n    this.set('permission', vis.permission.clone());\n\n    if (!vis.isVisualization()) {\n      var self = this;\n      vis.tableMetadata().fetch({\n        silent: true,\n        success: function() {\n          self.trigger('all');\n        }\n      });\n    }\n  },\n\n  name: function() {\n    return this.get('vis').get('name');\n  },\n\n  isWriteAccessTogglerAvailable: function() {\n    return !this.get('vis').isVisualization();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar BaseDialog = require('../../../views/base_dialog/view');\nvar randomQuote = require('../../../view_helpers/random_quote');\nvar ViewFactory = require('../../../view_factory');\nvar PagedSearchModel = require('../../../paged_search_model');\nvar PagedSearchView = require('../../../views/paged_search/paged_search_view');\nvar ShareModel = require('./share_model');\nvar GrantablesView = require('./grantables_view');\n\n/**\n * Dialog to share item with other users in organization.\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-back': '_openChangePrivacy'\n  }),\n\n  initialize: function() {\n    if (!this.options.ChangePrivacyView) throw new Error('ChangePrivacyView is required');\n    this.user = this.options.user;\n    this.organization = this.user.organization;\n    this.model = new ShareModel({\n      vis: this.options.vis,\n      organization: this.organization\n    });\n    this.elder('initialize');\n    this._initViews();\n    this._initBinds();\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('Dialog-content--expanded');\n    return this;\n  },\n\n  // @implements cdb.ui.common.Dialog.prototype.render_content\n  render_content: function() {\n    return [\n      this._htmlNode(\n        cdb.templates.getTemplate('common/dialogs/change_privacy/share/share_header')({\n          name: this.options.vis.get('name')\n        })\n      ),\n      this._grantablesView.render().el,\n      this._htmlNode(cdb.templates.getTemplate('common/dialogs/change_privacy/share/share_footer')())\n    ];\n  },\n\n  // @implements cdb.ui.common.Dialog.prototype.ok\n  ok: function() {\n    var loadingView = ViewFactory.createDialogByTemplate('common/templates/loading', {\n      title: 'Sharing…',\n      quote: randomQuote()\n    });\n    loadingView.appendToBody();\n\n    var permission = this.options.vis.permission;\n    permission.overwriteAcl(this.model.get('permission'));\n    permission.save()\n      .always(function() {\n        loadingView.close();\n      })\n      .fail(function() {\n        var failView = ViewFactory.createDialogByTemplate('common/templates/fail', {\n          msg: ''\n        });\n        failView.appendToBody();\n      })\n      .done(this._openChangePrivacy.bind(this));\n  },\n\n  _initViews: function() {\n    var model = this.model;\n    var grantables = this.organization.grantables;\n    var pagedSearchModel = new PagedSearchModel({\n      per_page: 50,\n      order: 'name',\n    });\n    this._grantablesView = new PagedSearchView({\n      isUsedInDialog: true,\n      pagedSearchModel: pagedSearchModel,\n      collection: grantables,\n      createListView: function() {\n        return new GrantablesView({\n          model: model,\n          collection: grantables,\n          pagedSearchModel: pagedSearchModel\n        })\n      }\n    });\n  },\n\n  _initBinds: function() {\n    this.model.on('all', this._grantablesView.render, this._grantablesView);\n  },\n\n  _htmlNode: function(htmlStr) {\n    return $(htmlStr)[0];\n  },\n\n  _openChangePrivacy: function() {\n    var view = new this.options.ChangePrivacyView({\n      clean_on_hide: true,\n      enter_to_confirm: true,\n      vis: this.options.vis,\n      user: this.user\n    });\n    view.appendToBody();\n    this.close();\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for the user details to show in the context of a permission item.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    _.each(['permission', 'isUsingVis'], function(name) {\n      if (_.isUndefined(this.options[name])) throw new Error(name + ' is required');\n    }, this);\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/change_privacy/share/details')({\n        willRevokeAccess: this._willRevokeAccess(),\n        avatarUrl: this.model.get('avatar_url'),\n        title: this.model.get('username'),\n        desc: this._desc(),\n        roleLabel: this.model.get('viewer') ? 'Viewer' : 'Builder'\n      })\n    );\n    return this;\n  },\n\n  _desc: function() {\n    var email = this.model.get('email')\n\n    if (this._willRevokeAccess()) {\n      return email + \". User's maps will be affected\";\n    } else if (this.options.isUsingVis) {\n      return email + \". User is using this dataset\";\n    } else {\n      return email;\n    }\n  },\n\n  _willRevokeAccess: function() {\n    return this.options.isUsingVis && !this.options.permission.hasReadAccess(this.model);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar pluralizeStr = require('../../view_helpers/pluralize_string');\n\nvar DISABLED_SAVE_CLASS_NAME = 'is-disabled';\nvar SHARED_ENTITIES_SAMPLE_SIZE = 5;\n\n/**\n * View represent the start screen when opening the privacy dialog.\n * Display privacy options and possibly a upgrade or share banner depending on user privileges.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-option': '_onClickOption',\n    'click .js-share': '_onClickShare',\n    'keyup .js-password-input': '_onKeyUpPasswordInput'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.options.privacyOptions) throw new Error('privacyOptions is required');\n    if (!this.options.user) throw new Error('user is required');\n    if (!this.options.vis) throw new Error('vis is required');\n    this.template = cdb.templates.getTemplate('common/dialogs/change_privacy/start');\n    this._initBinds();\n  },\n\n  render: function() {\n    // Password might not be available (i.e. for changing privacy of a dataset)\n    var pwdOption = this.options.privacyOptions.passwordOption();\n    var password = pwdOption ? pwdOption.get(\"password\") : '';\n\n    var selectedOption = this.options.privacyOptions.selectedOption();\n    var upgradeUrl = cdb.config.get('upgrade_url');\n    var sharedEntities = this.options.vis.permission.getUsersWithAnyPermission();\n\n    this.$el.html(\n      this.template({\n        vis: this.options.vis,\n        privacyOptions: this.options.privacyOptions,\n        password: password,\n        saveBtnClassNames: selectedOption.canSave() ? '' : DISABLED_SAVE_CLASS_NAME,\n        showUpgradeBanner: upgradeUrl && this.options.privacyOptions.any(function(o) { return !!o.get('disabled'); }),\n        upgradeUrl: upgradeUrl,\n        showTrial: this.options.user.canStartTrial(),\n        showShareBanner: this.options.user.organization,\n        sharedEntitiesCount: sharedEntities.length,\n        personOrPeopleStr: pluralizeStr('person', 'people', sharedEntities.length),\n        sharedEntitiesSampleCount: SHARED_ENTITIES_SAMPLE_SIZE,\n        sharedEntitiesSample: _.take(sharedEntities, SHARED_ENTITIES_SAMPLE_SIZE),\n        sharedWithOrganization: this.options.vis.permission.isSharedWithOrganization()\n      })\n    );\n\n    this.delegateEvents();\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.options.privacyOptions.bind('change:selected change:disabled', this.render, this);\n    this.options.privacyOptions.bind('change:password', this._onChangePassword, this);\n    this.add_related_model(this.options.privacyOptions);\n  },\n\n  _onClickOption: function(ev) {\n    var i = $(ev.target).closest('.js-option').data('index');\n    var option = this.options.privacyOptions.at(i);\n\n    if (!option.get('disabled')) {\n      option.set('selected', true);\n    }\n\n    var pwdOption = this.options.privacyOptions.passwordOption();\n    if (option === pwdOption) {\n      this.$(\".js-password-input\")\n        .val('') // reset any existing input value\n        .focus()\n        .keyup(); // manually trigger a key up event to change password state\n    } else if (pwdOption) { // Password might not be available (i.e. for changing privacy of a dataset)\n      this.$(\".js-password-input\").val(pwdOption.get(\"password\"));\n    }\n  },\n\n  _onChangePassword: function() {\n    this.$('.ok').toggleClass(DISABLED_SAVE_CLASS_NAME, !this.options.privacyOptions.selectedOption().canSave());\n  },\n\n  _onKeyUpPasswordInput: function(ev) {\n    this.options.privacyOptions.passwordOption().set('password', ev.target.value);\n  },\n\n  _onClickShare: function(ev) {\n    this.killEvent(ev);\n    this.trigger('clickedShare');\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar DatasetsView = require('./listing/datasets_view');\nvar ImportsView = require('./listing/imports_view');\n\n/**\n *  Create listing view\n *\n *  It will display all the possibilities to select\n *  any of your current datasets or connect a new dataset.\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'CreateDialog-listing CreateDialog-listing--noPaddingTop',\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.createModel = this.options.createModel;\n    this.template = cdb.templates.getTemplate('common/views/create/create_listing');\n\n    // Bug with binding... do not work with the usual one for some reason :(\n    this.createModel.bind('change:listing', this._onChangeListing.bind(this));\n    this.add_related_model(this.createModel);\n    this._onChangeListing();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this.template());\n    this._initViews();\n    return this;\n  },\n\n  _onChangeListing: function() {\n    if (this.listingPane) {\n      this.listingPane.active(this.createModel.get('listing'));\n    }\n  },\n\n  _initViews: function() {\n    // Listing content pane\n    this.listingPane = new cdb.ui.common.TabPane({\n      el: this.$(\".ListingContent\")\n    });\n    this.addView(this.listingPane);\n\n    // Datasets view\n    var datasetsView = new DatasetsView({\n      defaultUrl: this.user.viewUrl().dashboard().datasets(),\n      user: this.user,\n      createModel: this.createModel,\n      routerModel: this.createModel.visFetchModel,\n      collection: this.createModel.collection\n    });\n\n    datasetsView.render();\n    this._addListingPane('datasets', datasetsView);\n\n    // Imports view\n    if (this.user.canCreateDatasets()) {\n      var importsView = new ImportsView({\n        user: this.user,\n        createModel: this.createModel\n      });\n\n      importsView.render();\n      this._addListingPane('import', importsView);\n    }\n  },\n\n  _addListingPane: function(name, view) {\n    this.listingPane.addTab(name, view, {\n      active: this.createModel.get('listing') === name\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Manages if upcoming import should guess or not.\n * Expected to be rendered in the footer of a create dialog.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-toggle': '_toggle'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.createModel = this.options.createModel;\n    this.template = cdb.templates.getTemplate('common/dialogs/create/footer/guessing_toggler');\n    this._initBinds();\n  },\n\n  render: function() {\n    var htmlStr = '';\n    if (this.createModel.showGuessingToggler()) {\n      htmlStr = this.template({\n        isGuessingEnabled: this.model.get('guessing'),\n        importState: this.createModel.getImportState(),\n        isUploadValid: this.createModel.upload.isValidToUpload(),\n        customHosted: cdb.config.get('cartodb_com_hosted')\n      });\n    }\n    this.$el.html(htmlStr);\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.createModel.bind('change', this.render, this);\n    this.model.bind('change', this.render, this);\n    this.add_related_model(this.createModel);\n  },\n\n  _toggle: function() {\n    var value = !this.model.get('guessing');\n    this.model.set('guessing', value);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  Change the privacy of the new dataset.\n *  - If the user can't change the privacy, it will refer to the upgrade page\n *   unless app is the \"open source\" version\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n  events: {\n    'click': '_onClick'\n  },\n\n  initialize: function () {\n    this.user = this.options.user;\n    this.createModel = this.options.createModel;\n    this.template = cdb.templates.getTemplate('common/dialogs/create/footer/privacy_toggler_template');\n    this._initBinds();\n  },\n\n  render: function () {\n    this.clearSubViews();\n    this.$el.empty();\n\n    if (this.createModel.showPrivacyToggler()) {\n      var canChangePrivacy = this.user.canCreatePrivateDatasets();\n      var privacy = this.model.get('privacy');\n      var nexPrivacy = privacy === 'PUBLIC' ? 'PRIVATE' : 'PUBLIC';\n      var icon = privacy === 'PUBLIC' ? 'unlock' : 'lock';\n      var upgradeUrl = cdb.config.get('upgrade_url') || window.upgrade_url;\n      var canUpgrade = !cdb.config.get('cartodb_com_hosted') && !canChangePrivacy && upgradeUrl;\n\n      this.$el.html(\n        this.template({\n          privacy: privacy,\n          isDisabled: !canChangePrivacy,\n          canUpgrade: canUpgrade,\n          nextPrivacy: nexPrivacy,\n          upgradeUrl: upgradeUrl,\n          icon: icon\n        })\n      );\n\n      this._initViews();\n    }\n\n    return this;\n  },\n\n  _initBinds: function () {\n    this.model.bind('change:privacy', this.render, this);\n  },\n\n  _initViews: function () {\n    // Tooltip\n    this.addView(\n      new cdb.common.TipsyTooltip({\n        el: this.$('.js-toggler'),\n        html: true,\n        title: function () {\n          return $(this).attr('data-title');\n        }\n      })\n    );\n  },\n\n  _onClick: function () {\n    if (this.user.canCreatePrivateDatasets()) {\n      var privacy = this.model.get('privacy');\n      this.model.set('privacy', privacy === 'PUBLIC' ? 'PRIVATE' : 'PUBLIC');\n      return;\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar randomQuote = require('../../../../../common/view_helpers/random_quote');\n\n/*\n *  Content result default view\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-connect': '_onConnectClick'\n  },\n\n  initialize: function() {\n    if (!this.options.defaultUrl) {\n      throw new Error('defaultUrl is required')\n    }\n    this.user = this.options.user;\n    this.routerModel = this.options.routerModel;\n    this.template = cdb.templates.getTemplate(this.options.template);\n\n    this._initBinds();\n  },\n\n  render: function() {\n    var type = this.routerModel.get('content_type');\n\n    this.$el.html(this.template({\n      defaultUrl:     this.options.defaultUrl,\n      page:           this.routerModel.get('page'),\n      tag:            this.routerModel.get('tag'),\n      q:              this.routerModel.get('q'),\n      shared:         this.routerModel.get('shared'),\n      locked:         this.routerModel.get('locked'),\n      library:        this.routerModel.get('library'),\n      quote:          randomQuote(),\n      type:           type,\n      totalItems:     this.collection.size(),\n      totalEntries:   this.collection.total_entries\n    }));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.routerModel.bind('change', this.render, this);\n    this.collection.bind('reset', this.render, this);\n    this.add_related_model(this.routerModel);\n    this.add_related_model(this.collection);\n  },\n\n  _onConnectClick: function() {\n    this.trigger('connectDataset', this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar pluralizeString = require('../../../../view_helpers/pluralize_string');\nvar LikesView = require('../../../../views/likes/view');\n\n/**\n * View representing an item in the list under datasets route.\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'li',\n  className: 'DatasetsList-item DatasetsList-item--selectable',\n\n  events: {\n    'click .js-tag-link': '_onTagClick',\n    'click': '_toggleSelected'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.routerModel = this.options.createModel.visFetchModel;\n    this.template = cdb.templates.getTemplate('common/views/create/listing/dataset_item');\n    this.table = new cdb.admin.CartoDBTableMetadata(this.model.get('table'));\n\n    this.model.on('change', this.render, this);\n  },\n\n  render: function() {\n    var vis = this.model;\n    var table = this.table;\n    var tags = vis.get('tags') || [];\n    var description = vis.get('description') && Utils.stripHTML(markdown.toHTML(vis.get('description'))) || '';\n\n    var d = {\n      isRaster:                vis.get('kind') === 'raster',\n      geometryType:            table.geomColumnTypes().length > 0 ? table.geomColumnTypes()[0] : '',\n      title:                   vis.get('name'),\n      isOwner:                 vis.permission.isOwner(this.user),\n      owner:                   vis.permission.owner.renderData(this.user),\n      showPermissionIndicator: !vis.permission.hasWriteAccess(this.user),\n      description:             description,\n      privacy:                 vis.get('privacy').toLowerCase(),\n      likes:                   vis.get('likes') || 0,\n      timeDiff:                moment(vis.get('updated_at')).fromNow(),\n      tags:                    tags,\n      tagsCount:               tags.length,\n      maxTagsToShow:           3,\n      rowCount:                undefined,\n      datasetSize:             undefined,\n      syncStatus:              undefined,\n      syncRanAt:               undefined\n    };\n\n    var rowCount = table.get('row_count');\n    if (rowCount >= 0) {\n      d.rowCount = ( rowCount < 10000 ? Utils.formatNumber(rowCount) : Utils.readizableNumber(rowCount) );\n      d.pluralizedRows = pluralizeString('Row', rowCount);\n    }\n\n    var datasetSize = table.get('size');\n    if (datasetSize >= 0) {\n      d.datasetSize = Utils.readablizeBytes(datasetSize, true);\n    }\n\n    if (!_.isEmpty(vis.get(\"synchronization\"))) {\n      d.syncRanAt = moment(vis.get(\"synchronization\").ran_at || new Date()).fromNow();\n      d.syncStatus = vis.get(\"synchronization\").state;\n    }\n\n    this.$el.html(this.template(d));\n\n    this._renderLikesIndicator();\n    this._renderTooltips();\n\n    // Item selected?\n    this.$el[ vis.get('selected') ? 'addClass' : 'removeClass' ]('is--selected');\n\n    return this;\n  },\n\n  _renderLikesIndicator: function() {\n    var view = new LikesView({\n      model: this.model.like\n    });\n    this.$('.js-likes-indicator').replaceWith(view.render().el);\n    this.addView(view);\n  },\n\n  _renderTooltips: function() {\n    if (!_.isEmpty(this.model.get(\"synchronization\"))) {\n      this.addView(\n        new cdb.common.TipsyTooltip({\n          el: this.$('.DatasetsList-itemStatus'),\n          title: function(e) {\n            return $(this).attr('data-title')\n          }\n        })\n      )\n    }\n  },\n\n  _onTagClick: function(ev) {\n    var tag = $(ev.target).val();\n\n    if (tag) {\n      this.routerModel.set('tag', tag);\n    }\n  },\n\n  _toggleSelected: function(ev) {\n    // Let links use default behaviour\n    if (ev.target.tagName !== 'A') {\n      this.killEvent(ev);\n      if (this.options.createModel.canSelect(this.model)) {\n        this.model.set('selected', !this.model.get('selected'));\n      }\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar PaginationModel = require('../../../../views/pagination/model');\nvar PaginationView = require('../../../../views/pagination/view');\n\n\n/**\n * Responsible for the datasets paginator\n *  ___________________________________________________________________________\n * |                                                                           |\n * |                                             Page 2 of 42 [1] 2 [3][4][5]  |\n * |___________________________________________________________________________|\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'DatasetsPaginator',\n\n  initialize: function() {\n    this.routerModel = this.options.routerModel;\n    this.collection = this.options.collection;\n    this.model = new PaginationModel({\n      current_page: this.routerModel.get('page')\n    });\n\n    this._initBinds();\n    this._initViews();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.append(this.paginationView.render().el);\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.model.bind('change:current_page', function() {\n      this.routerModel.set('page', this.model.get('current_page'));\n    }, this);\n    this.collection.bind('reset', this._updatePaginationModelByCollection, this);\n    this.routerModel.bind('change:page', this._updatePaginationModelByRouterModel, this);\n\n    this.add_related_model(this.routerModel);\n    this.add_related_model(this.collection);\n    this.add_related_model(this.model);\n  },\n\n  _initViews: function() {\n    this.paginationView = new PaginationView({\n      model: this.model\n    });\n    this.addView(this.paginationView);\n  },\n\n  _updatePaginationModelByCollection: function() {\n    this.model.set({\n      per_page:    this.collection.options.get('per_page'),\n      total_count: this.collection.total_entries\n    });\n  },\n\n  _updatePaginationModelByRouterModel: function() {\n    this.model.set('current_page', this.routerModel.get('page'));\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar DatasetItem = require('./dataset_item_view');\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar UploadConfig = require('../../../../background_polling/models/upload_config');\nvar pluralizeString = require('../../../../view_helpers/pluralize_string');\n\n/**\n *  Remote dataset item view\n *\n */\n\nmodule.exports = DatasetItem.extend({\n\n  tagName: 'li',\n  className: 'DatasetsList-item',\n\n  events: {\n    'click .js-tag-link': '_onTagClick',\n    'click': '_toggleSelected'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.template = cdb.templates.getTemplate('common/views/create/listing/remote_dataset_item');\n    this.table = new cdb.admin.CartoDBTableMetadata(this.model.get('external_source'));\n  },\n\n  render: function() {\n    var vis = this.model;\n    var table = this.table;\n    var tags = vis.get('tags') || [];\n    var description = vis.get('description') && Utils.stripHTML(markdown.toHTML(vis.get('description'))) || '';\n    var source = vis.get('source') && markdown.toHTML(vis.get('source')) || '';\n\n    var d = {\n      isRaster:                vis.get('kind') === 'raster',\n      geometryType:            table.geomColumnTypes().length > 0 ? table.geomColumnTypes()[0] : '',\n      title:                   vis.get('display_name') || vis.get('name'),\n      source:                  source,\n      description:             description,\n      timeDiff:                moment(vis.get('updated_at')).fromNow(),\n      tags:                    tags,\n      tagsCount:               tags.length,\n      routerModel:             this.routerModel,\n      maxTagsToShow:           3,\n      canImportDataset:        this._canImportDataset(),\n      rowCount:                undefined,\n      datasetSize:             undefined\n    };\n\n    var rowCount = table.get('row_count');\n    if (rowCount >= 0) {\n      d.rowCount = ( rowCount < 10000 ? Utils.formatNumber(rowCount) : Utils.readizableNumber(rowCount) );\n      d.pluralizedRows = pluralizeString('Row', rowCount);\n    }\n\n    var datasetSize = table.get('size');\n    if (datasetSize >= 0) {\n      d.datasetSize = Utils.readablizeBytes(\n        datasetSize,\n        datasetSize.toString().length > 9 ? false : true\n      );\n    }\n\n    this.$el.html(this.template(d));\n    this._setItemClasses();\n    this._renderTooltips();\n\n    return this;\n  },\n\n  _setItemClasses: function() {\n    // Item selected?\n    this.$el[ this.model.get('selected') ? 'addClass' : 'removeClass' ]('is--selected');\n    // Check if it is selectable\n    this.$el[ this._canImportDataset() ? 'addClass' : 'removeClass' ]('DatasetsList-item--selectable');\n    // Check if it is importable\n    this.$el[ this._canImportDataset() ? 'removeClass' : 'addClass' ]('DatasetsList-item--banned');\n  },\n\n  _renderTooltips: function() {\n    this.addView(\n      new cdb.common.TipsyTooltip({\n        el: this.$('.DatasetsList-itemStatus'),\n        title: function(e) {\n          return $(this).attr('data-title')\n        }\n      })\n    )\n  },\n\n  _onTagClick: function(ev) {\n    if (ev) {\n      this.killEvent(ev);\n    }\n\n    var tag = $(ev.target).val();\n\n    if (tag) {\n      this.routerModel.set({\n        tag: tag,\n        library: true\n      });\n    }\n  },\n\n  _canImportDataset: function() {\n    var table_size = this.table.get('size') || 0;\n    return (\n        this.user.get('remaining_byte_quota') * UploadConfig.fileTimesBigger >= table_size &&\n        this.user.get('limits')['import_file_size'] > table_size\n      );\n  },\n\n  _toggleSelected: function(ev) {\n    // Let links use default behaviour\n    if (ev.target.tagName !== 'A') {\n      this.killEvent(ev);\n      if (this._canImportDataset() && this.options.createModel.canSelect(this.model)) {\n        this.model.set('selected', !this.model.get('selected'));\n      }\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar DatasetsItem = require('./datasets/dataset_item_view');\nvar RemoteDatasetsItem = require('./datasets/remote_dataset_item_view');\n\n/**\n * View representing the list of items\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'ul',\n\n  className: 'DatasetsList',\n\n  events: {},\n\n  _ITEMS: {\n    'remotes':  RemoteDatasetsItem,\n    'datasets': DatasetsItem\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.createModel = this.options.createModel;\n    this.collection.bind('reset', this.render, this);\n    this.add_related_model(this.collection);\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.collection.each(this._addItem, this);\n    return this;\n  },\n\n  _addItem: function(m, i) {\n    var type = m.get('type') === \"remote\" ? 'remotes' : 'datasets';\n\n    var item = new this._ITEMS[type]({\n      model:       m,\n      createModel: this.createModel,\n      user:        this.user\n    });\n\n    this.addView(item);\n    this.$el.append(item.render().el);\n  },\n\n  show: function() {\n    this.$el.removeClass('is-hidden');\n  },\n\n  hide: function() {\n    this.$el.addClass('is-hidden');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar DatasetsList = require('./datasets_list_view');\nvar ContentResult = require('./datasets/content_result_view');\nvar DatasetsPaginator = require('./datasets/datasets_paginator_view');\n\n/**\n *  Datasets list view\n *\n *  Show datasets view to select them for\n *  creating a map or importing a dataset\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.createModel = this.options.createModel;\n    this.routerModel = this.options.routerModel;\n\n    this._initViews();\n    this._initBindings();\n  },\n\n  _initBindings: function() {\n    this.routerModel.bind('change', this._onRouterChange, this);\n    this.collection.bind('loading', this._onDataLoading, this);\n    this.collection.bind('reset', this._onDataFetched, this);\n    this.collection.bind('error', function(e) {\n      // Old requests can be stopped, so aborted requests are not\n      // considered as an error\n      if (!e || (e && e.statusText !== \"abort\")) {\n        this._onDataError()\n      }\n    }, this);\n    this.add_related_model(this.routerModel);\n    this.add_related_model(this.createModel);\n    this.add_related_model(this.collection);\n  },\n\n  _initViews: function() {\n    this.controlledViews = {};  // All available views\n    this.enabledViews = [];     // Visible views\n\n    var noDatasetsView = new ContentResult({\n      className:  'ContentResult no-datasets',\n      user: this.user,\n      defaultUrl: this.options.defaultUrl,\n      routerModel: this.routerModel,\n      collection: this.collection,\n      template: 'common/views/create/listing/content_no_datasets'\n    });\n    noDatasetsView.bind('connectDataset', function() {\n      if (this.user.canCreateDatasets()) {\n        this.createModel.set('listing', 'import');\n      }\n    }, this);\n    noDatasetsView.render().hide();\n    this.controlledViews.no_datasets = noDatasetsView;\n    this.$el.append(noDatasetsView.el);\n    this.addView(noDatasetsView);\n\n    var listView = new DatasetsList({\n      user:         this.user,\n      createModel:  this.createModel,\n      routerModel:  this.routerModel,\n      collection:   this.collection\n    });\n    this.controlledViews.list = listView;\n    this.$el.append(listView.render().el);\n    this.addView(listView);\n\n    var noResultsView = new ContentResult({\n      defaultUrl: this.options.defaultUrl,\n      routerModel: this.routerModel,\n      collection: this.collection,\n      template: 'common/views/create/listing/datasets_no_result'\n    });\n    noResultsView.render().hide();\n    this.controlledViews.no_results = noResultsView;\n    this.$el.append(noResultsView.el);\n    this.addView(noResultsView);\n\n    var errorView = new ContentResult({\n      defaultUrl: this.options.defaultUrl,\n      routerModel: this.routerModel,\n      collection: this.collection,\n      template: 'common/views/create/listing/datasets_error'\n    });\n    errorView.render().hide();\n    this.controlledViews.error = errorView;\n    this.$el.append(errorView.el);\n    this.addView(errorView);\n\n    var mainLoaderView = new ContentResult({\n      defaultUrl: this.options.defaultUrl,\n      routerModel: this.routerModel,\n      collection: this.collection,\n      template: 'common/views/create/listing/datasets_loader'\n    });\n\n    this.controlledViews.main_loader = mainLoaderView;\n    this.$el.append(mainLoaderView.render().el);\n    this.addView(mainLoaderView);\n\n    var datasetsPaginator = new DatasetsPaginator({\n      routerModel: this.routerModel,\n      collection: this.collection\n    });\n\n    this.controlledViews.content_footer = datasetsPaginator;\n    this.$el.append(datasetsPaginator.render().el);\n    this.addView(datasetsPaginator);\n  },\n\n  _onRouterChange: function() {\n    this._hideBlocks();\n    this._showBlocks([ 'main_loader' ]);\n  },\n\n  /**\n   * Arguments may vary, depending on if it's the collection or a model that triggers the event callback.\n   * @private\n   */\n  _onDataFetched: function() {\n    var activeViews = [ 'content_footer' ];\n    var tag = this.routerModel.get('tag');\n    var q = this.routerModel.get('q');\n    var shared = this.routerModel.get('shared');\n    var locked = this.routerModel.get('locked');\n    var library = this.routerModel.get('library');\n\n    if (library && this.collection.total_user_entries === 0) {\n      activeViews.push('no_datasets');\n    }\n\n    if (this.collection.size() === 0) {\n      if (!tag && !q && shared === \"no\" && !locked) {\n        if (!library) {\n          this._goToLibrary();\n          return;\n        } else {\n          activeViews.push('no_results');\n        }\n      } else {\n        activeViews.push('no_results');\n      }\n    } else {\n      activeViews.push('list');\n    }\n\n    this._hideBlocks();\n    this._showBlocks(activeViews);\n  },\n\n  _onDataLoading: function() {\n    this._hideBlocks();\n    this._showBlocks([ 'main_loader' ]);\n  },\n\n  _onDataError: function(e) {\n    this._hideBlocks();\n    this._showBlocks([ 'error' ]);\n  },\n\n  _showBlocks: function(views) {\n    var self = this;\n    if (views) {\n      _.each(views, function(v){\n        if (self.controlledViews[v]) {\n          self.controlledViews[v].show();\n          self.enabledViews.push(v);\n        }\n      })\n    } else {\n      self.enabledViews = [];\n      _.each(this.controlledViews, function(v){\n        v.show();\n        self.enabledViews.push(v);\n      })\n    }\n  },\n\n  _goToLibrary: function() {\n    this.routerModel.set({\n      shared: 'no',\n      library: true,\n      page: 1\n    });\n  },\n\n  _hideBlocks: function(views) {\n    var self = this;\n    if (views) {\n      _.each(views, function(v){\n        if (self.controlledViews[v]) {\n          self.controlledViews[v].hide();\n          self.enabledViews = _.without(self.enabledViews, v);\n        }\n      })\n    } else {\n      _.each(this.controlledViews, function(v){\n        v.hide();\n      });\n      self.enabledViews = [];\n    }\n  },\n\n  _isBlockEnabled: function(name) {\n    if (name) {\n      return _.contains(this.enabledViews, name);\n    }\n    return false\n  }\n\n});\n",
    "var ImportService = require('./imports/service_import/import_service_view');\nvar ImportTwitter = require('./imports/twitter_import/import_twitter_view');\nvar ImportDataView = require('./imports/import_data_view');\nvar ImportArcGISView = require('./imports/import_arcgis_view');\n\n/**\n * Attributes:\n *\n *  className: import pane class view\n *  enabled: function that takes cdb.config and returns whether the service is enabled\n *  fallbackClassName: ...\n *  name: local name\n *  title: text for tab link\n *  options:\n *    - service:\n *    - fileExtensions:\n *    - showAvailableFormats:\n *    - acceptSync:\n *    - fileAttrs:\n *\n */\n\nmodule.exports = {\n  File: {\n    className: ImportDataView,\n    enabled: function (config, userData) { return true; },\n    name: 'file',\n    title: 'Data file',\n    options: {\n      type: 'url',\n      fileEnabled: true,\n      acceptSync: true\n    }\n  },\n  GDrive:   {\n    className: ImportService,\n    enabled: function (config, userData) { return !!config.get('oauth_gdrive'); },\n    name: 'gdrive',\n    title: 'Google Drive',\n    options: {\n      service: 'gdrive',\n      fileExtensions: ['Google SpreadSheet', 'CSV'],\n      showAvailableFormats: false,\n      acceptSync: true,\n      fileAttrs: {\n        ext: true,\n        title: 'filename',\n        description: {\n          content: [{\n            name: 'size',\n            format: 'size',\n            key: true\n          }]\n        }\n      }\n    }\n  },\n  Dropbox: {\n    className: ImportService,\n    enabled: function (config, userData) { return !!config.get('oauth_dropbox'); },\n    name: 'dropbox',\n    title: 'Dropbox',\n    options: {\n      service: 'dropbox',\n      fileExtensions: ['CSV', 'XLS'],\n      showAvailableFormats: false,\n      acceptSync: true,\n      fileAttrs: {\n        ext: true,\n        title: 'filename',\n        description: {\n          content: [\n            {\n              name: 'id',\n              format: ''\n            },\n            {\n              name: 'size',\n              format: 'size',\n              key: true\n            }\n          ],\n          separator: '-'\n        }\n      }\n    }\n  },\n  Box: {\n    className: ImportService,\n    enabled: function (config, userData) { return !!config.get('oauth_box'); },\n    name: 'box',\n    title: 'Box',\n    fallback: 'common/views/create/listing/import_box_fallback',\n    options: {\n      service: 'box',\n      fileExtensions: ['CSV', 'XLS'],\n      showAvailableFormats: false,\n      acceptSync: true,\n      fileAttrs: {\n        ext: true,\n        title: 'filename',\n        description: {\n          content: [\n            {\n              name: 'size',\n              format: 'size',\n              key: true\n            }\n          ],\n          separator: '-'\n        }\n      }\n    }\n  },\n  Twitter: {\n    className: ImportTwitter,\n    enabled: function (config, userData) { return userData.twitter.enabled && !!config.get('datasource_search_twitter'); },\n    fallback: 'common/views/create/listing/import_twitter_fallback',\n    name: 'twitter',\n    title: 'Twitter'\n  },\n  Mailchimp: {\n    className: ImportService,\n    enabled: function (config, userData) { return userData.mailchimp.enabled && !!config.get('oauth_mailchimp'); },\n    fallback: 'common/views/create/listing/import_mailchimp_fallback',\n    name: 'mailchimp',\n    title: 'MailChimp',\n    options: {\n      service: 'mailchimp',\n      fileExtensions: [],\n      acceptSync: true,\n      showAvailableFormats: false,\n      headerTemplate: 'common/views/create/listing/import_types/data_header_mailchimp',\n      fileAttrs: {\n        ext: true,\n        title: 'filename',\n        description: {\n          content: [{\n            name: 'member_count',\n            format: 'number',\n            key: true\n          }],\n          itemName: 'member',\n          separator: ''\n        }\n      }\n    }\n  },\n  // Instagram: {\n  //   className: ImportService,\n  //   fallback: 'common/views/create/listing/import_instagram_fallback',\n  //   name: 'instagram',\n  //   title: 'Instagram',\n  //   options: {\n  //     service: 'instagram',\n  //     fileExtensions: [],\n  //     acceptSync: false,\n  //     showAvailableFormats: false,\n  //     fileAttrs: {\n  //       ext: false,\n  //       title: 'title'\n  //     }\n  //   }\n  // },\n  Arcgis: {\n    className: ImportArcGISView,\n    enabled: function (config, userData) { return config.get('arcgis_enabled'); },\n    fallback: 'common/views/create/listing/import_arcgis_fallback',\n    name: 'arcgis',\n    title: 'ArcGIS Server&trade;'\n  },\n  Salesforce: {\n    className: ImportDataView,\n    enabled: function (config, userData) { return config.get('salesforce_enabled'); },\n    fallback: 'common/views/create/listing/import_salesforce_fallback',\n    name: 'salesforce',\n    title: 'Salesforce',\n    options: {\n      type: 'service',\n      service_name: 'salesforce',\n      acceptSync: true,\n      formTemplate: 'common/views/create/listing/import_types/data_form_salesforce',\n      headerTemplate: 'common/views/create/listing/import_types/data_header_salesforce'\n    }\n  }\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\n\n/**\n *  Form view for url import for example\n *\n *  - It accepts an url\n *  - It checks if it is valid\n *  - It could have a file option\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    template: '',\n    fileEnabled: false\n  },\n\n  events: {\n    'keyup .js-textInput': '_onTextChanged',\n    'submit .js-form': '_onSubmitForm'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate(this.options.template || 'common/views/create/listing/import_types/data_form');\n    this._initBinds();\n    this._checkVisibility();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template(this.options)\n    )\n    this._initViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this._checkVisibility, this);\n  },\n\n  _initViews: function() {\n    if (this.options.fileEnabled) {\n      var self = this;\n      this.$('.js-fileInput').bind('change', function(e) {\n        if (this.files && this.files.length > 0) {\n          self._onFileChanged(this.files);\n        }\n        this.value = \"\";\n      });\n\n      this._initDropzone();\n    }\n  },\n\n  _initDropzone: function() {\n    var el = $('html')[0]; // :(\n    var self = this;\n\n    this.dragster = new Dragster(el);\n\n    $(el).bind(\"dragster:enter\", function (e) {\n      self._showDropzone();\n    });\n\n    $(el).bind(\"dragster:leave\", function (e) {\n      self._hideDropzone();\n    });\n\n    if (el.dropzone) { // avoid loading the dropzone twice\n      return;\n    }\n\n    this.dropzone = new Dropzone(el, {\n      url: ':)',\n      autoProcessQueue: false,\n      previewsContainer: false\n    });\n\n    this.dropzone.on('dragover', function() {\n      self._showDropzone();\n    });\n\n    this.dropzone.on(\"drop\", function (ev) {\n      var files = ev.dataTransfer.files;\n      self._onFileChanged(files);\n      self._hideDropzone();\n    });\n  },\n\n  _destroyDropzone: function() {\n    var el = $('html')[0]; // :(\n\n    if (this.dragster) {\n      this.dragster.removeListeners();\n      this.dragster.reset();\n      $(el).unbind('dragster:enter dragster:leave');\n    }\n\n    if (this.dropzone) {\n      this.dropzone.destroy();\n    }\n  },\n\n  _setValidFileExtensions: function(list) {\n    return RegExp(\"(\\.|\\/)(\" + list.join('|') + \")$\", \"i\");\n  },\n\n  _onTextChanged: function() {\n    var value = this.$('.js-textInput').val();\n    if (!value) {\n      this._hideTextError();\n    }\n  },\n\n  _onFileChanged: function(files) {\n    this.trigger('fileSelected', this);\n\n    if (files && files.length === 1) {\n      files = files[0];\n    }\n\n    this.model.set({\n      type: 'file',\n      value: files\n    });\n\n    if (this.model.get('state') !== \"error\") {\n      this._hideFileError();\n      this.model.set('state', 'selected');\n    } else {\n      this._showFileError();\n    }\n  },\n\n  _showTextError: function() {\n    this.$('.Form-inputError').addClass('is-visible');\n  },\n\n  _hideTextError: function() {\n    this.$('.Form-inputError').removeClass('is-visible');\n  },\n\n  _showDropzone: function() {\n    this.$('.Form-upload').addClass('is-dropping');\n    this._hideFileError();\n  },\n\n  _hideDropzone: function() {\n    this.$('.Form-upload').removeClass('is-dropping');\n  },\n\n  _showFileError: function() {\n    if (this.model.get('state') === \"error\") {\n      this.$('.js-fileError')\n        .text(this.model.get('get_error_text').what_about)\n        .show();\n      this.$('.js-fileLabel').hide();\n      this.$('.js-fileButton').addClass('Button--negative');\n    }\n  },\n\n  _hideFileError: function() {\n    this.$('.js-fileError').hide();\n    this.$('.js-fileLabel').show();\n    this.$('.js-fileButton').removeClass('Button--negative');\n  },\n\n  _onSubmitForm: function(e) {\n    if (e) this.killEvent(e);\n\n    // URL submit\n    var value = this.$('.js-textInput').val();\n\n    if (!value) {\n      this._hideTextError();\n      return;\n    }\n\n    // Change file attributes :S\n    this.trigger('urlSelected', this);\n\n    // Change model\n    var importType = this.model.get('service_name') ? 'service' : 'url';\n    this.model.set({\n      type: importType,\n      value: value,\n      service_item_id: value,\n      state: 'idle'\n    });\n\n    if (this.model.get('state') !== \"error\") {\n      // Remove errors\n      this._hideFileError();\n      this._hideTextError();\n      this.model.set('state', 'selected');\n    } else {\n      this._showTextError();\n    }\n  },\n\n  _checkVisibility: function() {\n    var state = this.model.get('state');\n    this[ state !== \"selected\" ? 'show' : 'hide' ]()\n  },\n\n  clean: function() {\n    this._destroyDropzone();\n    this.$('.js-fileInput').unbind('change');\n    this.elder('clean');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Data header view\n *\n *  - It will change when upload state changes\n *  - Possibility to change state with a header button\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-back': '_goToStart'\n  },\n\n  options: {\n    fileEnabled: false,\n    acceptSync: false\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate(this.options.template || 'common/views/create/listing/import_types/data_header');\n    this._initBinds();\n    this._checkVisibility();\n  },\n\n  render: function() {\n    var acceptSync = this.options.acceptSync && this.user.get('actions') && this.user.get('actions').sync_tables && this.model.get('type') !== \"file\"; \n    \n    this.$el.html(\n      this.template({\n        type: this.model.get('type'),\n        fileEnabled: this.options.fileEnabled,\n        acceptSync: acceptSync,\n        state: this.model.get('state')\n      })\n    );\n    this._checkVisibility();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this.render, this);\n  },\n\n  _checkVisibility: function() {\n    this.show()\n  },\n\n  _goToStart: function() {\n    this.model.set('state', 'idle');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar SelectedDataset = require('./import_selected_dataset_view');\n\n/**\n *  Selected ArcGIS dataset\n *\n *  - Displays the result when an ArcGIS url/dataset is selected, no matter the type.\n *  - It will show available sync options if user can and the url is an ArcGIS layer.\n *  - Upgrade link for people who don't have sync permissions.\n *\n */\n\nmodule.exports = SelectedDataset.extend({\n\n  render: function() {\n    var title = this.options.fileAttrs.title && this.model.get('value')[this.options.fileAttrs.title] || this.model.get('value');\n    var description = this._genDescription();\n    var ext = this.options.fileAttrs.ext ? Utils.getFileExtension(title) : '' ;\n\n    if (this.options.fileAttrs.ext) {\n      title = title && title.replace('.' + ext, '');\n    }\n\n    var upgradeUrl = window.upgrade_url;\n    var userCanSync = this.user.get('actions') && this.user.get('actions').sync_tables;\n    var customInstall = cdb.config.get('cartodb_com_hosted');\n\n    this.$el.html(\n      this.template({\n        title: title,\n        description: description,\n        ext: ext,\n        interval: this.model.get('interval'),\n        importCanSync: this.options.acceptSync && this._isArcGISLayer(title),\n        userCanSync: userCanSync,\n        showTrial: this.user.canStartTrial(),\n        showUpgrade: !userCanSync && !customInstall && upgradeUrl && !this.user.isInsideOrg(),\n        upgradeUrl: upgradeUrl\n      })\n    );\n    return this;\n  },\n\n  _isArcGISLayer: function(url) {\n    return url.search(/([0-9]+\\/|[0-9]+)/) !== -1\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar FormView = require('./data_import/data_form_view');\nvar HeaderView = require('./data_import/data_header_view');\nvar SelectedDataset = require('./import_arcgis_selected_dataset_view');\nvar ImportDataView = require('./import_data_view');\n\n/**\n *  Import ArcGIS panel\n *\n *  - It only accepts an url, and it could be a map or a layer.\n *\n */\n\nmodule.exports = ImportDataView.extend({\n\n  options: {\n    fileExtensions: [],\n    type: 'service',\n    service: 'arcgis',\n    acceptSync: true,\n    fileEnabled: false,\n    fileAttrs: {\n      ext: false,\n      title: '',\n      description: ''\n    }\n  },\n\n  _initViews: function() {\n    // Data header\n    var headerView = new HeaderView({\n      el: this.$('.ImportPanel-header'),\n      model: this.model,\n      user: this.user,\n      collection: this.collection,\n      fileEnabled: this.options.fileEnabled,\n      acceptSync: this.options.acceptSync,\n      template: 'common/views/create/listing/import_types/data_header_arcgis'\n    });\n    headerView.render();\n    this.addView(headerView);\n\n    // Dataset selected\n    var selected = new SelectedDataset({\n      el: this.$('.DatasetSelected'),\n      user: this.user,\n      model: this.model,\n      acceptSync: this.options.acceptSync,\n      fileAttrs: this.options.fileAttrs\n    });\n    selected.render();\n    this.addView(selected);\n\n    // Data Form\n    var formView = new FormView({\n      el: this.$('.ImportPanel-form'),\n      user: this.user,\n      model: this.model,\n      template: 'common/views/create/listing/import_types/data_form_arcgis',\n      fileEnabled: this.options.fileEnabled\n    });\n\n    formView.render();\n    this.addView(formView);\n\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar ImportDefaultView = require('./import_default_view');\nvar UploadModel = require('../../../../background_polling/models/upload_model');\nvar FormView = require('./data_import/data_form_view');\nvar HeaderView = require('./data_import/data_header_view');\nvar SelectedDataset = require('./import_selected_dataset_view');\n\n/**\n *  Import data panel\n *\n *  - It accepts an url\n *  - It checks if it is valid\n *\n */\n\nmodule.exports = ImportDefaultView.extend({\n\n  options: {\n    fileExtensions: [],\n    type: 'url',\n    service: '',\n    acceptSync: false,\n    fileEnabled: false,\n    formTemplate: '',\n    headerTemplate: '',\n    fileAttrs: {}\n  },\n\n  className: 'ImportPanel ImportDataPanel',\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new UploadModel({\n      type: this.options.type,\n      service_name: this.options.service\n    }, {\n      user: this.user\n    });\n\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/import_data');\n\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this.template());\n    this._initViews();\n    return this;\n  },\n\n  _initViews: function() {\n    // Data header\n    var headerView = new HeaderView({\n      el: this.$('.ImportPanel-header'),\n      model: this.model,\n      user: this.user,\n      fileEnabled: this.options.fileEnabled,\n      acceptSync: this.options.acceptSync,\n      template: this.options.headerTemplate\n    });\n    headerView.render();\n    this.addView(headerView);\n\n    // Dataset selected\n    var selected = new SelectedDataset({\n      el: this.$('.DatasetSelected'),\n      user: this.user,\n      model: this.model,\n      acceptSync: this.options.acceptSync,\n      fileAttrs: this.options.fileAttrs\n    });\n    selected.render();\n    this.addView(selected);\n\n    // Data Form\n    var formView = new FormView({\n      el: this.$('.ImportPanel-form'),\n      user: this.user,\n      model: this.model,\n      template: this.options.formTemplate,\n      fileEnabled: this.options.fileEnabled\n    });\n\n    formView.bind('fileSelected', function() {\n      selected.setOptions({\n        acceptSync: false,\n        fileAttrs: {\n          ext: true,\n          title: 'name',\n          description: {\n            content: [{\n              name: 'size',\n              format: 'size'\n            }]\n          }\n        }\n      });\n    });\n\n    formView.bind('urlSelected', function() {\n      selected.setOptions({\n        acceptSync: true,\n        fileAttrs: {\n          ext: false,\n          title: '',\n          description: ''\n        }\n      });\n    });\n    formView.render();\n    this.addView(formView);\n\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this._checkState, this);\n    this.model.bind('change', this._triggerChange, this);\n  },\n\n  _checkState: function() {\n    if (this.model.previous('state') === \"selected\") {\n      this.model.set({\n        type: undefined,\n        value: '',\n        service_name: '',\n        service_item_id: '',\n        interval: 0\n      });\n    }\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Import fallback default panel\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportPanel',\n\n  initialize: function() { \n    this.template = cdb.templates.getTemplate( this.options.template || 'common/views/create/listing/import_default_fallback' );\n  },\n\n  render: function() {\n    this.$el.append(this.template());\n  }\n\n})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar UploadModel = require('../../../../background_polling/models/upload_model');\n\n/**\n *  Default view for an import item\n *\n *  - It is based in an upload model.\n *  - Will trigger a change when model changes.\n *  - It returns their data if it is requested with a method.\n */\n\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new UploadModel(null, { user: this.user });\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this._triggerChange, this);\n  },\n\n  _triggerChange: function() {\n    this.trigger('change', this.model.toJSON(), this);\n  },\n\n  getModelData: function() {\n    if (this.model) {\n      return this.model.toJSON()\n    }\n    return {}\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar pluralizeString = require('../../../../view_helpers/pluralize_string');\n\n/**\n *  Selected dataset\n *\n *  - Displays the result when a dataset is selected, no matter the type.\n *  - It will show available sync options if that import lets it.\n *  - Upgrade link for people who don't have sync permissions.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'DatasetSelected',\n\n  _FORMATTERS: {\n    'size': Utils.readablizeBytes,\n    'number': Utils.formatNumber\n  },\n\n  options: {\n    acceptSync: false,\n    fileAttrs: {\n      ext: false,\n      title: '',\n      description: {\n        content: [{\n          name: 'id',\n          format: ''\n        }],\n        itemName: '',\n        separator: ''\n      }\n    }\n  },\n\n  events: {\n    'click .js-interval-0': '_onIntervalZero',\n    'click .js-interval-1': '_onIntervalHour',\n    'click .js-interval-2': '_onIntervalDay',\n    'click .js-interval-3': '_onIntervalWeek',\n    'click .js-interval-4': '_onIntervalMonth'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_selected_dataset');\n    this._initBinds();\n    this._checkVisibility();\n  },\n\n  render: function() {\n    var title = this.options.fileAttrs.title && this.model.get('value')[this.options.fileAttrs.title] || this.model.get('value');\n    var description = this._genDescription();\n    var ext = this.options.fileAttrs.ext ? Utils.getFileExtension(title) : '' ;\n\n    if (this.options.fileAttrs.ext) {\n      title = title && title.replace('.' + ext, '');\n    }\n\n    var upgradeUrl = window.upgrade_url;\n    var userCanSync = this.user.get('actions') && this.user.get('actions').sync_tables;\n    var customInstall = cdb.config.get('cartodb_com_hosted');\n\n    this.$el.html(\n      this.template({\n        title: title,\n        description: description,\n        ext: ext,\n        interval: this.model.get('interval'),\n        importCanSync: this.options.acceptSync,\n        userCanSync: userCanSync,\n        showTrial: this.user.canStartTrial(),\n        showUpgrade: !userCanSync && !customInstall && upgradeUrl && !this.user.isInsideOrg(),\n        upgradeUrl: upgradeUrl\n      })\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:value', this.render, this);\n    this.model.bind('change:interval', this.render, this);\n    this.model.bind('change:state', this._checkVisibility, this);\n  },\n\n  _genDescription: function() {\n    if (this.options.fileAttrs && this.options.fileAttrs.description) {\n      var descriptionOpts = this.options.fileAttrs.description;\n      var descriptionKeyValue = '';\n      var descriptionStr = '';\n      var self = this;\n\n      if (descriptionOpts.content && descriptionOpts.content.length > 0) {\n        _.each(descriptionOpts.content, function(item, i) {\n\n          if (i > 0 && descriptionOpts.separator) {\n            descriptionStr += \" \" + descriptionOpts.separator + ' ';\n          }\n\n          var value = self.model.get('value')[item.name];\n          var format = item.format && self._FORMATTERS[item.format];\n          descriptionStr += format && format(value) || value;\n\n          if (item.key) {\n            descriptionKeyValue = item.name;\n          }\n        })\n      }\n\n      if (descriptionOpts.itemName && descriptionKeyValue) {\n        descriptionStr += ' ' + (descriptionOpts.itemName && pluralizeString(descriptionOpts.itemName, descriptionKeyValue) || '');\n      }\n\n      return descriptionStr;\n    }\n\n    return '';\n  },\n\n  _onIntervalZero: function() {\n    this.model.set('interval', 0);\n  },\n\n  _onIntervalHour: function() {\n    if (this.options.acceptSync && this.user.get('actions').sync_tables) {\n      this.model.set('interval', 3600);\n    }\n  },\n\n  _onIntervalDay: function() {\n    if (this.options.acceptSync && this.user.get('actions').sync_tables) {\n      this.model.set('interval', 86400);\n    }\n  },\n\n  _onIntervalWeek: function() {\n    if (this.options.acceptSync && this.user.get('actions').sync_tables) {\n      this.model.set('interval', 604800);\n    }\n  },\n\n  _onIntervalMonth: function() {\n    if (this.options.acceptSync && this.user.get('actions').sync_tables) {\n      this.model.set('interval', 2592000);\n    }\n  },\n\n  // Change options\n  setOptions: function(d) {\n    if (d && !_.isEmpty(d)) {\n      _.extend(this.options, d);\n    }\n  },\n\n  _checkVisibility: function() {\n    var state = this.model.get('state');\n    if (state === 'selected') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar ImportDefaultView = require('../import_default_view');\nvar UploadModel = require('../../../../../background_polling/models/upload_model');\nvar ServiceHeader = require('./service_header_view');\nvar ServiceLoader = require('./service_loader_view');\nvar ServiceList = require('./service_list_view');\nvar ServiceSelectedFile = require('../import_selected_dataset_view');\nvar ServiceToken = require('../../../../../service_models/service_token_model');\nvar ServiceOauth = require('../../../../../service_models/service_oauth_model');\nvar ServiceCollection = require('./service_items_collection');\n\n/**\n *  Import service view\n *\n *  - Use a service import panel\n *  - It will request login to the service\n *  - If it works, a list of available files will appear.\n *  - Once a file is selected, sync options will appear.\n *\n */\n\nmodule.exports = ImportDefaultView.extend({\n\n  _DATASOURCE_NAME: '',\n  _WINDOW_INTERVAL: 1000, // miliseconds\n\n  className: 'ImportPanel ImportPanelService',\n\n  options: {\n    service: '',                  // Name of the service\n    showAvailableFormats: false,  // If all available format link should appear or not\n    fileExtensions: [],           // File extensions\n    acceptSync: false,            // Accept sync this service?\n    fileAttrs: {                  // Attributes or changes for service list or selected file:\n      ext: false,                 // If files should show extension\n      title: 'filename',          // Title attribute\n      description: '<%- size %>', // Description attribute\n      formatDescription: 'size',  // If any format function should be applied over the description\n      headerTemplate: ''          // Header template\n    }\n  },\n\n  initialize: function() {\n    if (!this.options.service) {\n      cdb.log.info('Service provider not set for import panel!')\n      return false;\n    } else {\n      this._DATASOURCE_NAME = this.options.service;\n    }\n\n    this.user = this.options.user;\n    this.model = new UploadModel({\n      type: 'service',\n      service_name: this._DATASOURCE_NAME\n    }, { user: this.user });\n\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/import_service');\n\n    this._initModels();\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this.template(this.options));\n    this._initViews();\n    return this;\n  },\n\n  _initModels: function() {\n    // Token\n    this.token = new ServiceToken(null, { datasource_name: this._DATASOURCE_NAME });\n    // Service model\n    this.service = new ServiceOauth(null, { datasource_name: this._DATASOURCE_NAME });\n    // List collection\n    this.collection = new ServiceCollection(null, { datasource_name: this._DATASOURCE_NAME });\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this._triggerChange, this);\n    this.model.bind('change:state', this._checkState, this);\n    this.token.bind('change:oauth_valid', this._onOauthChange, this);\n    this.service.bind('change:url', this._openWindow, this);\n    this.add_related_model(this.service);\n    this.add_related_model(this.token);\n  },\n\n  _initViews: function() {\n    // Header\n    var header = new ServiceHeader({\n      el: this.$('.ImportPanel-header'),\n      user: this.user,\n      model: this.model,\n      collection: this.collection,\n      title: this.options.title,\n      showAvailableFormats: this.options.showAvailableFormats,\n      fileExtensions: this.options.fileExtensions,\n      acceptSync: this.options.acceptSync,\n      template: this.options.headerTemplate\n    });\n    header.render();\n    this.addView(header);\n\n    // Loader\n    var loader = new ServiceLoader({\n      el: this.$('.ServiceLoader'),\n      model: this.model,\n      token: this.token,\n      service: this.service\n    });\n    loader.render();\n    this.addView(loader);\n\n    // List\n    var list = new ServiceList({\n      el: this.$('.ServiceList'),\n      model: this.model,\n      collection: this.collection,\n      title: this.options.title,\n      fileAttrs: this.options.fileAttrs\n    });\n    list.render();\n    this.addView(list);\n\n    // Selected file\n    var selected = new ServiceSelectedFile({\n      el: this.$('.ServiceSelected'),\n      user: this.user,\n      model: this.model,\n      acceptSync: this.options.acceptSync,\n      fileAttrs: this.options.fileAttrs\n    });\n    selected.render();\n    this.addView(selected);\n  },\n\n  _onOauthChange: function() {\n    if (this.token.get('oauth_valid')) {\n      this._getFiles();\n    }\n  },\n\n  _getFiles: function() {\n    var self = this;\n\n    this.model.set('state', 'retrieving');\n\n    this.collection.fetch({\n      // data: {\n      //   filter: this.options.acceptFileTypes\n      // },\n      error: function() {\n        self.model.set('state', 'error');\n      },\n      success:  function() {\n        self.model.set('state', 'list');\n      }\n    });\n  },\n\n  _checkState: function() {\n    if (this.model.get('state') === \"list\") {\n      if (this.collection.size() === 1) {\n        var item = this.collection.at(0);\n        this.model.set({\n          state: 'selected',\n          value: item.toJSON(),\n          service_item_id: item.get('id')\n        });\n      }\n    }\n    if (this.model.get('state') !== \"selected\") {\n      this.model.set({\n        value: '',\n        service_item_id: '',\n        interval: 0\n      });\n    }\n  },\n\n  _openWindow: function() {\n    var url = this.service.get('url');\n    var self = this;\n    var i = window.open(url, null, \"menubar=no,toolbar=no,width=600,height=495\");\n    var e = window.setInterval(function() {\n      if (i && i.closed) {\n        self._getFiles();\n        clearInterval(e)\n      } else if (!i) {\n        self.model.set('state', 'error');\n        clearInterval(e)\n      }\n    }, this._WINDOW_INTERVAL);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Service header\n *\n *  - It will change when upload state changes\n *  - Possibility to change state with a header button\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-back': '_goToList'\n  },\n\n  options: {\n    title: 'Service',\n    showAvailableFormats: false,\n    acceptSync: false,\n    fileExtensions: [],\n    template: ''\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate( this.options.template || 'common/views/create/listing/import_types/service_header' );\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        items: this.collection.size(),\n        service_name: this.model.get(\"service_name\"),\n        showAvailableFormats: this.options.showAvailableFormats,\n        fileExtensions: this.options.fileExtensions,\n        acceptSync: this.options.acceptSync && this.user.get('actions').sync_tables,\n        state: this.model.get('state'),\n        title: this.options.title\n      })\n    );\n    this._checkVisibility();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this.render, this);\n  },\n\n  _checkVisibility: function() {\n    var state = this.model.get('state');\n    this[ state !== \"list\" ? 'show' : 'hide' ]()\n  },\n\n  _goToList: function() {\n    this.model.set('state', 'list');\n  }\n\n});\n",
    "var Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\n\n/**\n *  Service list item format utils\n *\n *  - Create customized functions for service list items.\n *\n */\n\nmodule.exports = {\n\n  // Due to the fact that backend data source service\n  // returns 0 size when it doesn't know it\n  formatSize: function(s) {\n    if (s && s > 0) {\n      return Utils.readablizeBytes(s);\n    } else {\n      return 'Unknown'\n    }\n  }\n\n}",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Service item model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n  \n  defaults: {\n    id: '',\n    filename: '',\n    checksum: '',\n    service: '',\n    size: '',\n    title: ''\n  }\n\n});",
    "var ServiceItem = require('./service_item_model.js');\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\n\n/**\n *  Service item model + Service items collection\n *\n *  - It needs a datasource name or it won't work.\n *\n */\n\nmodule.exports = Backbone.Collection.extend({\n\n  _DATASOURCE_NAME: 'dropbox',\n\n  model: ServiceItem,\n\n  initialize: function(coll, opts) {\n    if (opts.datasource_name) {\n      this._DATASOURCE_NAME = opts.datasource_name;\n    }\n  },\n\n  fetch: function() {\n    this.trigger(\"fetch\", this);\n\n    // Pass through to original fetch.\n    return Backbone.Collection.prototype.fetch.apply(this, arguments);\n  },\n\n  parse: function(r) {\n    return r.files;\n  },\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('imports_service', method);\n    return '/api/' + version + '/imports/service/' + this._DATASOURCE_NAME + '/list_files'\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar ServiceUtilsFormat = require('./service_item_description_format');\nvar pluralizeString = require('../../../../../view_helpers/pluralize_string');\n\n/**\n *  Service list item view\n *\n *  - Displays the item info.\n *  - It lets user to select the item for a future import.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    title: '',\n    fileAttrs: {\n      ext: false,\n      title: 'filename',\n      description: 'size',\n      itemName: 'file',\n      formatDescription: ''\n    }\n  },\n\n  _FORMATTERS: {\n    'size': ServiceUtilsFormat.formatSize,\n    'number': Utils.formatNumber\n  },\n\n  className: 'ServiceList-item',\n  tagName: 'li',\n\n  events: {\n    'click .js-choose': '_onSelectItem'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/service_list_item');\n  },\n\n  render: function() {\n    var title = this.model.get(this.options.fileAttrs.title);\n    var description = this._genDescription();\n    var ext = this.options.fileAttrs.ext ? Utils.getFileExtension(title) : '' ;\n\n    if (this.options.fileAttrs.ext) {\n      title = title && title.replace('.' + ext, '');\n    }\n\n    this.$el.html(\n      this.template({\n        name: this.options.title,\n        ext: ext,\n        title: title,\n        description: description\n      })\n    );\n    return this;\n  },\n\n  _genDescription: function() {\n    if (this.options.fileAttrs && this.options.fileAttrs.description) {\n      var descriptionOpts = this.options.fileAttrs.description;\n      var descriptionKeyValue = '';\n      var descriptionStr = '';\n      var self = this;\n\n      if (descriptionOpts.content && descriptionOpts.content.length > 0) {\n        _.each(descriptionOpts.content, function(item, i) {\n\n          if (i > 0 && descriptionOpts.separator) {\n            descriptionStr += \" \" + descriptionOpts.separator + ' ';\n          }\n\n          var value = self.model.get(item.name);\n          var format = item.format && self._FORMATTERS[item.format];\n          descriptionStr += format && format(value) || value;\n\n          if (item.key) {\n            descriptionKeyValue = item.name;\n          }\n        })\n      }\n\n      if (descriptionOpts.itemName && descriptionKeyValue) {\n        descriptionStr += ' ' + (descriptionOpts.itemName && pluralizeString(descriptionOpts.itemName, descriptionKeyValue) || '');\n      }\n\n      return descriptionStr;\n    }\n\n    return '';\n  },\n\n  _onSelectItem: function() {\n    this.trigger('selected', this.model, this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ServiceListItem = require('./service_list_item_view');\nvar pluralizeString = require('../../../../../view_helpers/pluralize_string');\n\n/**\n *  Service list view\n *\n *  - It will display all the items available under\n *  the service and the possibility to chose one of\n *  them.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  _TEXTS: {\n    item: _t('item')\n  },\n\n  options: {\n    title: 'service',\n    fileAttrs: {}\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/service_list');\n    this._initBinds();\n    this._checkVisibility();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    var size = this.collection.size();\n    this.$el.html(\n      this.template({\n        size: size,\n        title: this.options.title,\n        pluralize: pluralizeString(this._TEXTS.item, size)\n      })\n    );\n    if (this.collection.size() > 0) {\n      this.collection.each(this._addItem, this);\n    }\n    return this;\n  },\n\n  _initBinds: function() {\n    this.collection.bind('reset', this.render, this);\n    this.model.bind('change:state', this._checkVisibility, this);\n    this.add_related_model(this.collection);\n  },\n\n  _addItem: function(m) {\n    var item = new ServiceListItem({\n      model: m,\n      title: this.options.title,\n      fileAttrs: this.options.fileAttrs\n    });\n    item.bind('selected', this._onSelectedItem, this);\n    this.$('.ServiceList-items').append(item.render().el);\n    this.addView(item);\n  },\n\n  _onSelectedItem: function(mdl) {\n    this.model.set({\n      state: 'selected',\n      value: mdl.toJSON(),\n      service_item_id: mdl.get('id')\n    });\n  },\n\n  _checkVisibility: function() {\n    var state = this.model.get('state');\n    if (state === 'list') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Service loader view\n *\n *  - It will be on charge to make token and oauth petitions\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-connect': '_checkToken'\n  },\n\n  initialize: function() {\n    this.token = this.options.token;\n    this.service = this.options.service;\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/service_loader');\n    this._initBinds();\n    this._checkVisibility();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        state: this.model.get('state')\n      })\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this.render, this);\n    this.model.bind('change:state', this._checkVisibility, this);\n  },\n\n  _checkToken: function() {\n    var self = this;\n    this.model.set('state', 'token');\n\n    var self = this;\n    this.token.fetch({\n      success: function(r) {\n        if (!r.get('oauth_valid')) {\n          self._getOauthURL();\n        }\n      },\n      error: function(e) {\n        self._getOauthURL();\n      }\n    });\n  },\n\n  _checkVisibility: function() {\n    var state = this.model.get('state');\n    if (state !== 'list' && state !== 'selected') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  },\n\n  _getOauthURL: function() {\n    var self = this;\n    this.model.set('state', 'oauth');\n    this.service.set({ url: '' }, { silent: true });\n    this.service.fetch({\n      error: function() {\n        self.model.set('state', 'error');\n      }\n    });\n  }\n\n})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\n\n/**\n *  Credits info view\n *\n *  - Percentage of use\n *  - Possible money spent\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this.user = this.options.user;\n    this._initBinds();\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/credits_info');\n  },\n\n  render: function() {\n    var twitterData = this.user.get('twitter');\n    var remaining = twitterData.quota - twitterData.monthly_use;\n    var per = Math.min(100,Math.ceil((this.model.get('value') * 100) / remaining));\n\n    this.$el.html(\n      this.template({\n        value: this.model.get('value'),\n        remaining: remaining,\n        per: per,\n        hardLimit: twitterData.hard_limit,\n        remainingFormatted: Utils.formatNumber(remaining),\n        quota: twitterData.quota,\n        block_price: twitterData.block_price,\n        block_size: Utils.readizableNumber(twitterData.block_size)\n      })\n    )\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar CreditsInfo = require('./credits_info_view');\n\n/**\n *  Set max use of credits for Twitter\n *\n *  - Slider range = 1000 credits\n *  - Last step should be infinite if user doesn't\n *    have \"soft_limit\".\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  _DEFAULT_PER_VALUE: 80, // Default percentage value for slider\n  _MIN_PER_VALUE: 1,      // Default min percentage value for slider\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new cdb.core.Model();\n    this._initBinds();\n    this._setModel();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$(\".js-slider\").slider(\"destroy\");\n    this._initViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    _.bindAll(this, '_onSlideChange');\n    this.model.bind('change:value', this._onValueChange, this);\n  },\n\n  _setModel: function() {\n    var twitterData = this.user.get('twitter');\n    var max = twitterData.quota - twitterData.monthly_use;\n    var min =  (this._MIN_PER_VALUE * max) / 100; // Just 1% of the quota\n    var defaultValue = (max * this._DEFAULT_PER_VALUE) / 100;\n    var value = max > 0 ? defaultValue : (max + 1);\n    \n    this.model.set({\n      max: (twitterData.hard_limit ? max : max + 1 ),\n      min: min,\n      step: min,\n      value: max > 0 ? value : twitterData.quota,\n      disabled: max > 0 ? false : true\n    });\n  },\n\n  _initViews: function() {\n    // Slider\n    this.$(\".js-slider\").slider(\n      _.extend({\n          range: 'min',\n          orientation: \"horizontal\",\n          slide: this._onSlideChange,\n          change: this._onSlideChange\n        },\n        this.model.attributes\n      )\n    );\n\n    // Info\n    var creditsInfo = new CreditsInfo({\n      el: this.$('.js-info'),\n      user: this.user,\n      model: this.model\n    });\n    creditsInfo.render();\n    this.addView(creditsInfo);\n  },\n\n  _onSlideChange: function(ev, ui) {\n    this.model.set('value', ui.value);\n  },\n\n  _onValueChange: function() {\n    this.trigger('maxCreditsChange', this.getMaxCredits(), this);\n  },\n\n  getMaxCredits: function() {\n    var twitterData = this.user.get('twitter');\n    var max = twitterData.quota - twitterData.monthly_use;\n    var value = this.model.get('value');\n    return value > max ? 0 : value\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar ImportDefaultView = require('../../../../../dialogs/create/listing/imports/import_default_view');\nvar UploadModel = require('../../../../../background_polling/models/upload_model');\nvar DatesRangePicker = require('../../../../../views/date_pickers/dates_range_picker');\nvar TwitterCategories = require('../../../../../dialogs/create/listing/imports/twitter_import/twitter_categories/twitter_categories_view');\nvar CreditsUsage = require('./credits_usage_view.js');\n\n/**\n *  Import twitter panel\n *\n *  - It accepts up to 3 categories\n *  - Date range can't be longer than 30 days\n *\n */\n\nmodule.exports = ImportDefaultView.extend({\n\n  options: {\n    acceptSync: false,\n    type: 'service',\n    service: 'twitter_search'\n  },\n\n  className: 'ImportPanel ImportTwitterPanel',\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new UploadModel({\n      type: this.options.type,\n      service_name: this.options.service\n    }, {\n      user: this.user\n    });\n\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/import_twitter');\n\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this.template());\n    this._initViews();\n    return this;\n  },\n\n  _initViews: function() {\n    // Categories\n    var categories = this.categories = new TwitterCategories();\n    categories.bind('changeCategory', this._setModel, this);\n    this.$('.ImportTwitterPanel-cagetories').append(categories.render().el);\n    this.addView(categories);\n\n    // Date picker\n    var datepicker = this.datepicker = new DatesRangePicker({\n      className: 'DatePicker DatePicker--withBorder'\n    });\n    datepicker.bind('changeDate', this._setModel, this);\n    this.$('.js-picker').append(datepicker.render().el);\n    this.addView(datepicker);\n\n    // Use slider\n    var creditsUsage = this.creditsUsage = new CreditsUsage({\n      el: this.$('.CreditsUsage'),\n      user: this.user\n    });\n    creditsUsage.bind('maxCreditsChange', this._setModel, this);\n    creditsUsage.render();\n    this.addView(creditsUsage);\n\n    this._setModel();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this._triggerChange, this);\n  },\n\n  _getCategories: function() {\n    var categories = this.categories.getCategories();\n    return _.filter(categories, function(c) {\n      return c.category && c.terms.length > 0\n    });\n  },\n\n  _getDates: function() {\n    return this.datepicker.getDates();\n  },\n\n  _getMaxCredits: function() {\n    return this.creditsUsage.getMaxCredits();\n  },\n\n  _setModel: function() {\n    var categories = this._getCategories();\n    var dates = this._getDates();\n    var maxCredits = this._getMaxCredits();\n    var d = {\n      categories: categories,\n      dates: dates\n    };\n\n    this.model.set({\n      value: d,\n      service_item_id: d,\n      user_defined_limits: {\n        twitter_credits_limit: maxCredits\n      }\n    });\n  }\n\n})\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar TwitterCategoryModel = require('./twitter_category_model');\n  \n// Twitter categories collection\n\nmodule.exports = Backbone.Collection.extend({\n  model: TwitterCategoryModel\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar TwitterCategoriesCollection = require('./twitter_categories_collection');\nvar TwitterCategoriesModel = require('./twitter_category_model');\nvar TwitterCategoryView = require('./twitter_category_view');\n\n/**\n *  Twitter category list view\n *  - It will generate a collection to store all the \n *    terms added.\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  _MAX_CATEGORIES: 4,\n  _MAX_TERMS: 29,\n\n  initialize: function() {\n    // Add a first empty model\n    var m = this._generateCategory();\n    this.collection = new TwitterCategoriesCollection([ m ]);\n\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.collection.each(this._addCategory, this);\n    return this;\n  },\n\n  _initBinds: function() {\n    this.collection.bind('change', this._manageCategories, this);\n    this.collection.bind('change', this._onCategoryChange, this);\n    this.add_related_model(this.collection);\n  },\n\n  _manageCategories: function() {\n    var self = this;\n    var collection_size = this.collection.size();\n\n    // Check if already created models are completed\n    var nonFilled = this.collection.filter(function(m) {\n      return m.get('terms').length === 0\n    });\n\n    // if so, generate new one\n    if (nonFilled.length === 0 && collection_size < this._MAX_CATEGORIES) {\n      var m = this._generateCategory();\n      this.collection.add(m);\n      this._addCategory(m);\n      return false;\n    }\n\n    // else, let's check\n    if (nonFilled.length > 0) {\n      var m = _.first(nonFilled);\n      var v = _.find(this._subviews, function(view){ return m.cid === view.model.cid });\n      var pos = v.$el.index();\n      \n      // Only one item in the collection, do nothing\n      if (collection_size === 1) return false;\n\n      // If it is the last item but there is no more items, do nothing\n      if (pos === (collection_size - 1)) return false;\n\n      // If it is not the last item and there is another non-filled element\n      // let's remove that one.\n      if (pos !== (collection_size - 1) && nonFilled.length > 1) {\n        m = nonFilled[1];\n        v = _.find(this._subviews, function(view){ return m.cid === view.model.cid });\n        this._removeCategory(v);\n      }\n\n      // Reorder category indexes :(\n      this._setCategoryIndex();\n    }\n  },\n\n  // Set proper index after any category removed\n  _setCategoryIndex: function() {\n    var self = this;\n\n    // Hack to set properly category numbers\n    this.$('.twitter-category').each(function(i,el) {\n      // Get category, removing Category word\n      var category = $(el).find('.js-category').text().replace('Category ','');\n\n      if (category !== (i+1) ) {\n        // Find model\n        var m = self.collection.find(function(m) { return m.get('category') === category });\n        // Find view\n        m.set('category', (i+1).toString() );  \n      }\n      \n    })\n  },\n\n  _generateCategory: function() {\n    return new TwitterCategoriesModel({\n      terms: [],\n      category: (this.collection ? ( this.collection.size() + 1 ) : 1 ).toString()\n    });\n  },\n\n  _addCategory: function(m) {\n    var category = new TwitterCategoryView({ model: m });\n    \n    category.bind('submit', this._onCategorySubmit, this);\n    category.bind('limit', this._onCategoryLimit, this);\n    category.bind('nolimit', this._onCategoryNoLimit, this);\n\n    this.$el.append(category.render().el);\n    \n    this.addView(category);\n    this.trigger(\"addCategory\");\n  },\n\n  _removeCategory: function(v) {\n    v.hide();\n    v.clean();\n    v.model.destroy();\n    this.trigger(\"removeCategory\");\n  },\n\n  _onCategorySubmit: function() {\n    this.trigger('submitCategory', this.collection.toJSON(), this);\n  },\n\n  _onCategoryLimit: function() {\n    this.trigger('limitCategory', this.collection.toJSON(), this);\n  },\n\n  _onCategoryNoLimit: function() {\n    this.trigger('noLimitCategory', this.collection.toJSON(), this);\n  },\n\n  _onCategoryChange: function() {\n    this.trigger('changeCategory', this.collection.toJSON(), this);\n  },\n\n  getCategories: function() {\n    return this.collection.toJSON();\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n// Twitter category model\n\nmodule.exports = cdb.core.Model.extend({\n\n  _MAX_COUNTER: 1014,\n\n  _CHAR_MAP: {\n    ' ': 2,\n    '-': 2,\n    '_': 2,\n    '.': 2\n  },\n  \n  defaults: {\n    terms:    [],\n    category: '',\n    counter:  1014\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.bind('change:terms', this._setCounter, this);\n  },\n\n  _setCounter: function() {\n    var count = this._MAX_COUNTER;\n    var self = this;\n\n    // Check terms number\n    if (this.get('terms').length > 1) {\n      count = count - ( ( this.get('terms').length - 1 ) * 4 )\n    }\n\n    // Check characters\n    _.each(this.get('terms'), function(term) {\n      _.each(term, function(c) {\n        if (self._CHAR_MAP[c] !== undefined) {\n          count = count - self._CHAR_MAP[c];\n        } else {\n          count--\n        }\n      });\n    });\n\n    // Count never should be fewer then 0 please!\n    this.set('counter', Math.max(0,count));\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n\n/**\n *  Twitter category item view\n *  - It just needs a twitter category model\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'TwitterCategory',\n\n  _MAX_CATEGORIES: 4,\n  _MAX_TERMS: 29,\n\n  events: {\n    'keydown .js-terms':   '_onInputChange',\n    'keypress .js-terms':  '_onInputChange',\n    'keyup .js-terms':     '_onInputChange'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_types/twitter_category');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.append(\n      this.template({\n        terms: this.model.get('terms'),\n        category: this.model.get('category'),\n        counter: this.model.get('counter')\n      })\n    );\n\n    // Show category\n    this.show();\n\n    return this;\n  },\n\n  _initBinds: function() {\n    _.bindAll(this, '_onInputChange');\n    this.model.bind('change:category', this._onCategoryChange, this);\n  },\n\n  _onCategoryChange: function() {\n    this.$('.js-category').text('Category ' + this.model.get('category'));\n  },\n\n  _onInputChange: function(e) {\n    var value = $(e.target).val();\n\n    // It was a ENTER key event? Send signal!\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.trigger('submit', this.model, this);\n      return false;\n    }\n\n    // Change icon class\n    this.$('.CDB-IconFont-twitter')[value.length > 0 ? 'addClass' : 'removeClass']('is-highlighted');\n\n    // Check if it is possible to add new characters\n    // if not, stop the action, unless user is deleting\n    // any previous character\n    if (( this.model.get('counter') === 0 || this.model.get('terms').length > this._MAX_TERMS) &&\n      e.keyCode !== 37 /* left */ && e.keyCode !== 39 /* right */ && e.keyCode !== 8 && value.length > 0) {\n      this.killEvent(e);\n      this.trigger('limit', this.model, this);\n      return false;\n    } else {\n      this.trigger('nolimit', this.model, this);\n    }\n\n    var $input = $(e.target);\n    var value = $input.val();\n    var d = {};\n\n    // Get valid terms array\n    if (!value) {\n      value = [];\n    } else {\n      value = value.split(',');\n    }\n\n    d['terms'] = value;\n\n    this.model.set(d);\n  },\n\n  show: function() {\n    this.$el.addClass('enabled');\n  },\n\n  hide: function() {\n    this.$el.removeClass('enabled');\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar ImportOptions = require('./import_options');\nvar ImportFallback = require('./imports/import_default_fallback_view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n *  Imports view\n *\n *  Displays all the import options available\n *  through new create dialog.\n *\n *  IMPORTANT!!\n *\n *  If you need to add a new import pane:\n *\n *  - Create the proper class within imports folder and its tests.\n *  - Add necessary info in import_options file.\n *  - Create a check function here if needed, if not will appear\n *    always enabled (for everybody!).\n *\n */\n\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'ImportOptions',\n\n  _TABS_PER_ROW: 5,\n  _DEFAULT_IMPORT: 'file',\n  _IMPORT_OPTIONS: ImportOptions,\n\n  _TEXTS: {\n    key:      _t('<%- name %> key is not specified and panel can\\'t be enabled'),\n    account:  _t('<%- name %> data source is not available in your plan. Please upgrade'),\n    limits:   _t('You\\'ve reached the limits for your account. Please upgrade'),\n    credits:  _t('You\\'ve reached the available <%- name %> credits for your account this month')\n  },\n\n  events: {\n    'click .js-goNext': '_moveNextTabs',\n    'click .js-goPrev': '_movePrevTabs'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new cdb.core.Model({ page: 1, maxPages: 0 });\n    this.createModel = this.options.createModel;\n    this.template = cdb.templates.getTemplate('common/views/create/listing/import_view');\n  },\n\n  render: function() {\n    this._destroyBinds();\n    this.clearSubViews();\n    this.$el.empty();\n\n    // Append template content\n    this.$el.append(this.template());\n    // Generate tabs!\n    this._genTabs();\n    // Generate tabs navigation\n    this._genTabsNavigation();\n    // Generate panes!\n    this._genPanes();\n    // Set binds\n    this._initBinds();\n    // Set option\n    this._setOption();\n\n    return this;\n  },\n\n\n  ////////////////////\n  // TABS && PANES! //\n  ////////////////////\n\n  _genTabs: function() {\n    var tabs = \"\";\n    var tabTemplate = cdb.templates.getTemplate('common/views/create/listing/import_tab');\n\n    _.each(this._IMPORT_OPTIONS, function(t) {\n      if (!_.isEmpty(t) && t.enabled(cdb.config, this.user_data)) {\n        tabs += tabTemplate(t);\n      }\n    });\n\n    this.$('.ImportOptions-tabsList').append(tabs);\n\n    // Create tabs\n    this.importTabs = new cdb.admin.Tabs({\n      el:     this.$('.ImportOptions-tabsList'),\n      slash:  true\n    });\n    this.addView(this.importTabs);\n  },\n\n  _genTabsNavigation: function() {\n    var numTabs = this.$('.ImportOptions-tab').size();\n    if (numTabs <= 1) {\n      this.$('.ImportOptions-tabs').hide();\n    }\n\n    // Set max pages\n    this.model.set('maxPages', Math.ceil(numTabs / this._TABS_PER_ROW));\n    this._checkTabsNavigation();\n    if (this.model.get('maxPages') <= 1) {\n      this.$('.ImportOptions-navigation').hide();\n    }\n  },\n\n  _moveNextTabs: function() {\n    var page = this.model.get('page');\n    var maxPages = this.model.get('maxPages');\n\n    if (page < maxPages) {\n      this.model.set('page', page + 1);\n    }\n  },\n\n  _movePrevTabs: function() {\n    var page = this.model.get('page');\n    if (page > 1) {\n      this.model.set('page', page - 1);\n    }\n  },\n\n  _moveTabsNavigation: function() {\n    var page = this.model.get('page');\n    var rowWidth = 800;\n\n    this.$('.ImportOptions-tabsList').css('margin-left', '-' + (rowWidth * (page-1)) + 'px');\n    this._checkTabsNavigation();\n  },\n\n  _checkTabsNavigation: function() {\n    var page = this.model.get('page');\n    var maxPages = this.model.get('maxPages');\n\n    // Check prev button\n    this.$('.js-goPrev')[ page > 1 ? 'removeClass' : 'addClass' ]('is-disabled');\n\n    // Check next button\n    this.$('.js-goNext')[ page < maxPages ? 'removeClass' : 'addClass' ]('is-disabled');\n  },\n\n  _genPanes: function() {\n    var self = this;\n\n    // Create TabPane\n    this.importPanes = new cdb.ui.common.TabPane({\n      el: this.$(\".ImportOptions-panes\")\n    });\n    this.addView(this.importPanes);\n\n    // Link tabs with panes\n    this.importTabs.linkToPanel(this.importPanes);\n\n    // Render panes!\n    _.each(this._IMPORT_OPTIONS, function(imp,i) {\n      var pane = '';\n\n      // Check if import option function exists\n      var fn = self['_check' + i + 'Import'];\n      var isEnabled = (fn && fn(imp, self));\n\n      if (( isEnabled || isEnabled === undefined ) && !_.isEmpty(imp)) {\n        pane = new imp.className(\n          _.extend(\n            ( imp.options || {} ),\n            {\n              user: self.user,\n              title: imp.title\n            }\n          )\n        );\n      } else if (imp.fallback) {\n        pane = new ImportFallback({\n          template: imp.fallback\n        });\n      }\n\n      if (pane) {\n        pane.render();\n        pane.bind('change', self._setUploadModel, self);\n        self.importPanes.addTab(imp.name, pane);\n        self.addView(pane);\n      }\n    });\n  },\n\n  _checkGDriveImport: function(imp, v) {\n    if (!cdb.config.get('oauth_gdrive')) {\n      v._setFailedTab('gdrive', 'key');\n      return false;\n    }\n    return true;\n  },\n\n  _checkDropboxImport: function(imp, v) {\n    if (!cdb.config.get('oauth_dropbox')) {\n      v._setFailedTab('dropbox', 'key');\n      return false;\n    }\n    return true;\n  },\n\n  _checkBoxImport: function(imp, v) {\n    if (!cdb.config.get('oauth_box')) {\n      v._setFailedTab('box', 'key');\n      return false;\n    }\n    return true;\n  },\n\n  _checkTwitterImport: function(imp, v) {\n    // Check if user have twitter datasource enabled!\n    if (!cdb.config.get('datasource_search_twitter')) {\n      v._setFailedTab('twitter', 'key');\n      return false;\n    }\n    // Check if user can create or import a new file or user has\n    // enough rights to enable twitter!\n    if (!v.user.get('twitter').enabled) {\n      return false;\n    }\n    // Check if user can create or import a new file or user has\n    // enough rights to enable twitter!\n    if (( v.user.get('twitter').quota - v.user.get('twitter').monthly_use ) <= 0 && v.user.get('twitter').hard_limit) {\n      v._setFailedTab('twitter', 'credits');\n      return false;\n    }\n    return true;\n  },\n\n  _checkInstagramImport: function(imp, v) {\n    if (!v.user.featureEnabled('instagram_import')) {\n      return false;\n    }\n    if (!cdb.config.get('oauth_instagram')) {\n      v._setFailedTab('instagram', 'key');\n      return false;\n    }\n    return true;\n  },\n\n  _checkSalesforceImport: function(imp, v) {\n    // Check if salesforce feature is enabled\n    if (!v.user.get('salesforce').enabled) {\n      return false;\n    }\n    return true;\n  },\n\n  _checkMailchimpImport: function(imp, v) {\n    // Config available?\n    if (!cdb.config.get('oauth_mailchimp')) {\n      v._setFailedTab('mailchimp', 'key');\n      return false;\n    }\n    // Feature enabled?\n    if (!v.user.featureEnabled('mailchimp_import')) {\n      return false;\n    }\n    return true;\n  },\n\n  _setFailedTab: function(tab, type) {\n    var $tab = this.importTabs.getTab(tab);\n    $tab.addClass('disabled');\n    this._createTooltip(tab, type);\n  },\n\n  _createTooltip: function(tab, type) {\n    var self = this;\n    var $tab = this.importTabs.getTab(tab);\n\n    // Tipsy?\n    var tooltip = new cdb.common.TipsyTooltip({\n      el: $tab,\n      title: function() {\n        return _.template(self._TEXTS[type])({ name: tab })\n      }\n    })\n    this.addView(tooltip);\n  },\n\n  _setUploadModel: function(d) {\n    this.createModel.upload.setFresh(d);\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:page', this._moveTabsNavigation, this);\n    if (this.importPanes) {\n      this.importPanes.bind('tabEnabled',  this._onTabChange, this);\n    }\n  },\n\n  _destroyBinds: function() {\n    if (this.importPanes) {\n      this.importPanes.unbind('tabEnabled', null, this);\n    }\n  },\n\n  _setOption: function() {\n    // First option > data file\n    this.importPanes.active(this._DEFAULT_IMPORT);\n    this._updateImportOption();\n  },\n\n  _updateImportOption: function() {\n    this.createModel.setActiveImportPane(this.importPanes.activeTab);\n  },\n\n\n  ////////////\n  // Events //\n  ////////////\n\n  _onTabChange: function(tabName) {\n    var v = this.importPanes.getPane(tabName);\n    // Set upload model from activated pane to create model\n    var upload = v.getModelData && v.getModelData();\n    if (upload) {\n      this._setUploadModel(upload);\n    } else {\n      this._setUploadModel({});\n    }\n    this._updateImportOption();\n  },\n\n  clean: function() {\n    this._destroyBinds();\n    cdb.core.View.prototype.clean.call(this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar pluralizeString = require('../../../view_helpers/pluralize_string');\n\n/**\n *  Listing datasets navigation.\n *\n *  - 'Filter by' datasets.\n *  - 'Search' any pattern within dataset collection.\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'submit .js-search-form':   '_submitSearch',\n    'keydown .js-search-form':  '_onSearchKeyDown',\n    'click .js-search-form':    'killEvent',\n    'click .js-search-link':    '_onSearchClick',\n    'click .js-clean-search':   '_onCleanSearchClick',\n    'click .js-shared':         '_onSharedClick',\n    'click .js-library':        '_onLibraryClick',\n    'click .js-connect':        '_onConnectClick',\n    'click .js-datasets':       '_onDatasetsClick',\n    'click .js-create_empty':   '_onCreateEmptyClick'\n  },\n\n  _TEXTS: {\n    createFromScratchLabel: {\n      map: 'Create empty map',\n      dataset: 'Create empty dataset',\n      addLayer: 'Add an empty layer'\n    }\n  },\n\n  initialize: function() {\n    this.routerModel = this.options.routerModel;\n    this.createModel = this.options.createModel;\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/views/create/listing/navigation');\n    this.model = new cdb.core.Model();\n\n    this._preRender();\n    this._initBinds();\n  },\n\n  // It is necessary to add two static elements because\n  // they can't be removed/replaced using render method\n  // each time a change (in a model or a collection) happens.\n  // This is due to the behaviour of the CSS animations.\n  _preRender: function() {\n    var $uInner = $('<div>').addClass('u-inner');\n    var $filtersInner = $('<div>').addClass('Filters-inner');\n    this.$el.append($uInner.append($filtersInner));\n  },\n\n  render: function(m, c) {\n    this.clearSubViews();\n\n    var selectedItemsCount = this._selectedItems().length;\n    // If a change is made from content type we have to know\n    // preventing show wrong data about total items\n    var changedContentType = c && c.changes && c.changes.content_type;\n    var createModelType = this.createModel.get('type');\n\n    this.$('.Filters-inner').html(\n      this.template(\n        _.extend({\n            createModel:           this.createModel,\n            canCreateDataset:      this.user.canCreateDatasets(),\n            listing:               this.createModel.get('listing'),\n            isInsideOrg:           this.user.isInsideOrg(),\n            selectedItemsCount:    selectedItemsCount,\n            maxLayersByMap:        this.user.getMaxLayers(),\n            totalShared:           changedContentType ? 0 : this.collection.total_shared,\n            totalItems:            changedContentType ? 0 : this.collection.total_user_entries,\n            pageItems:             this.collection.size(),\n            routerModel:           this.routerModel,\n            pluralizedContentType: pluralizeString('dataset', changedContentType ? 0 : this.collection.total_user_entries),\n            pluralizedContentTypeSelected: pluralizeString('dataset', selectedItemsCount),\n            createFromScratchLabel: this._TEXTS.createFromScratchLabel[createModelType]\n          },\n          this.routerModel.attributes\n        )\n      )\n    );\n\n    this._animate();\n    if (this.routerModel.isSearching()) {\n      this._focusSearchInput();\n    }\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.on('change:isSearchEnabled', this._onChangeIsSearchEnabled, this);\n    this.createModel.bind('change:listing', this.render, this);\n    this.routerModel.bind('change', this.render, this);\n    this.collection.bind('reset', this.render, this);\n    cdb.god.bind('closeDialogs', this._animate, this);\n    this.add_related_model(cdb.god);\n    this.add_related_model(this.createModel);\n    this.add_related_model(this.collection);\n    this.add_related_model(this.routerModel);\n  },\n\n  _onChangeIsSearchEnabled: function(model, isSearchEnabled) {\n    this._enableSearchUI(isSearchEnabled);\n\n    if (this.routerModel.isSearching()) {\n      this._cleanSearch();\n    } else if (isSearchEnabled) {\n      this._$searchInput().val('');\n      this._focusSearchInput();\n    }\n  },\n\n  _$searchInput: function() {\n    return this.$('.js-search-input')\n  },\n\n  _focusSearchInput: function() {\n    this._$searchInput()\n      .select()\n      .focus();\n  },\n\n  _onSearchKeyDown: function(e) {\n    // ESC\n    if (e.keyCode === 27) {\n      this.killEvent(e);\n      this._cleanSearch();\n    }\n  },\n\n  _selectedItems: function() {\n    return this.collection.where({ selected: true });\n  },\n\n  _animate: function() {\n    this._enableSearchUI(!!this.routerModel.isSearching());\n\n    // Check if user doesn't have any table and it is in library section\n    // to remove useless shadow\n    var inLibrarySection = this.routerModel.get('library');\n    var inDatasetsSection = this.createModel.get('listing') === \"datasets\";\n    var hasDatasets = this.collection.total_user_entries > 0;\n    this.$el.toggleClass('no-shadow', inLibrarySection && !hasDatasets && inDatasetsSection);\n  },\n\n  _enableSearchUI: function(enable) {\n    this.$('.js-search-field').toggle(enable);\n    this.$('.js-links-list').toggleClass('is-hidden', enable);\n    this.$('.js-order-list').toggleClass('is-hidden', enable);\n  },\n\n  _onDatasetsClick: function() {\n    this.routerModel.set({\n      shared: 'no',\n      library: false,\n      page: 1\n    });\n    this.createModel.set('listing', 'datasets');\n  },\n\n  _onSharedClick: function() {\n    this.routerModel.set({\n      shared: 'only',\n      library: false,\n      page: 1\n    });\n    this.createModel.set('listing', 'datasets');\n  },\n\n  _onLibraryClick: function() {\n    this.routerModel.set({\n      shared: 'no',\n      library: true,\n      page: 1\n    });\n    this.createModel.set('listing', 'datasets');\n\n    // Event tracking \"Clicked Common data\"\n    cdb.god.trigger('metrics', 'common_data', {\n      email: window.user_data.email\n    });\n  },\n\n  _onConnectClick: function() {\n    if (this.user.canCreateDatasets()) {\n      this.createModel.set('listing', 'import');\n    }\n  },\n\n  _onCreateEmptyClick: function() {\n    if (this.user.canCreateDatasets()) {\n      this.createModel.createFromScratch();\n    }\n  },\n\n  // Selection actions\n\n  _onSearchClick: function(e) {\n    if (e) this.killEvent(e);\n    this.model.set('isSearchEnabled', !this.model.get('isSearchEnabled'));\n  },\n\n  // Filter actions\n\n  _onCleanSearchClick: function(e) {\n    if (e) e.preventDefault();\n    this._cleanSearch();\n  },\n\n  _cleanSearch: function() {\n    this.routerModel.set({\n      q: '',\n      tag: '',\n      shared: 'no',\n      library: this.createModel.showLibrary()\n    });\n    this.model.set('isSearchEnabled', false);\n  },\n\n  _submitSearch: function(e) {\n    if (e) this.killEvent(e);\n    var val = Utils.stripHTML(this.$('.js-search-input').val().trim(),'');\n    var tag = val.search(':') === 0 ? val.replace(':', '') : '';\n    var q = val.search(':') !== 0 ? val : '';\n\n    this.routerModel.set({\n      page: 1,\n      tag: tag,\n      q: q,\n      shared: 'yes'\n    });\n\n    this.createModel.set('listing', 'datasets');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Create a vis from a dataset, required for some contexts to have a vis before be able to carry out next task\n *  - duplicate vis\n *  - add layer\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.model) throw new Error('model is required (cdb.admin.Visualization)');\n    if (!this.options.title) throw new Error('title is required');\n    if (!this.options.explanation) throw new Error('title is required');\n    if (!this.options.router) throw new Error('router callback is required');\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('confirm',\n      ViewFactory.createByTemplate('common/dialogs/create_vis_first/template', {\n        title: this.options.title,\n        explanation: this.options.explanation\n      })\n    );\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Creating map…',\n        quote: randomQuote()\n      })\n    );\n    this._panes.addTab('fail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not create map for some reason'\n      })\n    );\n    this._panes.active('confirm');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  ok: function() {\n    this._panes.active('loading');\n    var self = this;\n    this.model.changeToVisualization({\n      success: function(vis) {\n        self.options.router.changeToVis(vis);\n        if (self.options.success) {\n          self.options.success(vis);\n        }\n        self.clean();\n      },\n      error: function() {\n        self._panes.active('fail');\n      }\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.table) {\n      throw new Error('table is required');\n    }\n\n    if (!this.options.column) {\n      throw new Error('column is required');\n    }\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n\n    this.table = this.options.table;\n    this.column = this.options.column;\n\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('confirm',\n      ViewFactory.createByTemplate('common/dialogs/delete_column/template', {\n        column: this.column\n      })\n    );\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Deleting column…',\n        quote: randomQuote()\n      })\n    );\n    this._panes.addTab('fail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not delete column for some reason'\n      })\n    );\n    this._panes.active('confirm');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  ok: function() {\n    this._panes.active('loading');\n    this.table.deleteColumn(this.column);\n    this.close();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../views/base_dialog/view');\nvar pluralizeString = require('../view_helpers/pluralize_string');\nvar randomQuote = require('../view_helpers/random_quote');\nvar MapCardPreview = require('../views/mapcard_preview');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\nvar AFFECTED_ENTITIES_SAMPLE_COUNT = 3;\nvar AFFECTED_VIS_COUNT = 3;\n\n/**\n * Delete items dialog\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.options.viewModel) {\n      throw new TypeError('viewModel is required');\n    }\n    if (!this.options.user) {\n      throw new TypeError('user is required');\n    }\n\n    this._viewModel = this.options.viewModel;\n    this._viewModel.loadPrerequisites();\n    this._viewModel.bind('change', function() {\n      if (this._viewModel.state() === 'DeleteItemsDone') {\n        this.close();\n      } else {\n        this.render();\n      }\n    }, this);\n    this.add_related_model(this._viewModel);\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.call(this);\n    this._loadMapPreviews();\n    return this;\n  },\n\n  /**\n   * @implements cdb.ui.common.Dialog.prototype.render_content\n   */\n  render_content: function() {\n    return this['_render' + this._viewModel.state()]();\n  },\n\n  _renderLoadingPrerequisites: function() {\n    return cdb.templates.getTemplate('common/templates/loading')({\n      title: 'Checking what consequences deleting the selected ' + this._pluralizedContentType() + ' would have...',\n      quote: randomQuote()\n    });\n  },\n\n  _renderLoadPrerequisitesFail: function() {\n    return cdb.templates.getTemplate('common/templates/fail')({\n      msg: 'Failed to check consequences of deleting the selected ' + this._pluralizedContentType()\n    });\n  },\n\n  _renderConfirmDeletion: function() {\n    // An entity can be an User or Organization\n    var affectedEntities = this._viewModel.affectedEntities();\n    var affectedVisData = this._viewModel.affectedVisData();\n\n    return cdb.templates.getTemplate('common/dialogs/delete_items_view_template')({\n      firstItemName: this._getFirstItemName(),\n      selectedCount: this._viewModel.length,\n      isDatasets: this._viewModel.isDeletingDatasets(),\n      pluralizedContentType: this._pluralizedContentType(),\n      affectedEntitiesCount: affectedEntities.length,\n      affectedEntitiesSample: affectedEntities.slice(0, AFFECTED_ENTITIES_SAMPLE_COUNT),\n      affectedEntitiesSampleCount: AFFECTED_ENTITIES_SAMPLE_COUNT,\n      affectedVisCount: affectedVisData.length,\n      pluralizedMaps: pluralizeString('map', affectedVisData.length),\n      affectedVisVisibleCount: AFFECTED_VIS_COUNT,\n      visibleAffectedVis: this._prepareVisibleAffectedVisForTemplate(affectedVisData.slice(0, AFFECTED_VIS_COUNT))\n    });\n  },\n\n  _prepareVisibleAffectedVisForTemplate: function(visibleAffectedVisData) {\n    return visibleAffectedVisData.map(function(visData) {\n      var vis = new cdb.admin.Visualization(visData);\n      var owner = vis.permission.owner;\n      return {\n        visId: vis.get('id'),\n        name: vis.get('name'),\n        url: vis.viewUrl(this.options.user).edit(),\n        owner: owner,\n        ownerName: owner.get('username'),\n        isOwner: vis.permission.isOwner(this.options.user),\n        showPermissionIndicator: !vis.permission.hasWriteAccess(this.options.user),\n        timeDiff: moment(vis.get('updated_at')).fromNow()\n      };\n    }, this);\n  },\n\n  /**\n   * @overrides BaseDialog.prototype.ok\n   */\n  ok: function() {\n    this._viewModel.deleteItems();\n    this.render();\n  },\n\n  _loadMapPreviews: function() {\n    var self = this;\n\n    this.$el.find('.MapCard').each(function() {\n      var username = $(this).data('visOwnerName');\n      var mapCardPreview = new MapCardPreview({\n        el: $(this).find('.js-header'),\n        width: 298,\n        height: 130,\n        mapsApiResource: cdb.config.getMapsResourceName(username),\n        visId: $(this).data('visId'),\n        username: username\n      }).load();\n\n      self.addView(mapCardPreview);\n    });\n  },\n\n  _renderDeletingItems: function() {\n    return cdb.templates.getTemplate('common/templates/loading')({\n      title: 'Deleting the selected ' + this._pluralizedContentType() + '...',\n      quote: randomQuote()\n    });\n  },\n\n  _renderDeleteItemsFail: function() {\n    var message = this._viewModel.errorMessage().replace(/\\n/g, '<br>');\n    if (message === 'something failed') {\n      message = '';\n    }\n    return cdb.templates.getTemplate('common/templates/fail')({\n      msg: 'Failed to delete the selected ' + this._pluralizedContentType() + '. ' + message\n    });\n  },\n\n  _pluralizedContentType: function() {\n    return pluralizeString(\n      this._viewModel.isDeletingDatasets() ? 'dataset' : 'map',\n      this._viewModel.length\n    );\n  },\n\n  _getFirstItemName: function() {\n    if (!this.options.viewModel) return;\n\n    var firstItem = this.options.viewModel.at(0);\n\n    if (firstItem) {\n      return firstItem.get(\"name\");\n    }\n  }\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar batchProcessItems = require('../../common/batch_process_items');\n\n/**\n * View model for delete items view.\n * Manages the states changes for the delete items view.\n */\nmodule.exports = Backbone.Collection.extend({\n\n  initialize: function(models, opts) {\n    if (!opts.contentType) {\n      throw new TypeError('contentType is required')\n    }\n\n    this._contentType = opts.contentType;\n  },\n\n  state: function() {\n    return this._state;\n  },\n\n  errorMessage: function() {\n    return this._errorMessage;\n  },\n\n  setState: function(newState) {\n    this._state = newState;\n    this.trigger('change');\n    this.trigger(newState);\n  },\n\n  isDeletingDatasets: function() {\n    return this._contentType === 'datasets';\n  },\n\n  loadPrerequisites: function() {\n    var setStateToConfirmDeletion = this.setState.bind(this, 'ConfirmDeletion');\n\n    if (this.isDeletingDatasets()) {\n      this.setState('LoadingPrerequisites');\n\n      batchProcessItems({\n        howManyInParallel: 5,\n        items: this.toArray(),\n        processItem: this._loadPrerequisitesForModel,\n        done: setStateToConfirmDeletion,\n        fail: this.setState.bind(this, 'LoadPrerequisitesFail')\n      });\n    } else {\n      setStateToConfirmDeletion();\n    }\n  },\n\n  affectedEntities: function() {\n    return this.chain()\n      .map(function(m) {\n        return m.sharedWithEntities();\n      })\n      .flatten().compact().value();\n  },\n\n  affectedVisData: function() {\n    var visData = this.chain()\n      .map(function(m) {\n          var metadata = m.tableMetadata();\n          return []\n            .concat(metadata.get('dependent_visualizations'))\n            .concat(metadata.get('non_dependent_visualizations'));\n        })\n      .flatten().compact().value();\n\n    return _.uniq(visData, function(metadata) {\n      return metadata.id;\n    });\n  },\n\n  deleteItems: function() {\n    this.setState('DeletingItems');\n\n    // INFO: Don't put more than 1 delete in parallel because this lead to a\n    // race condicition in the derived map deletion (if any)\n    batchProcessItems({\n      howManyInParallel: 1,\n      items: this.toArray(),\n      processItem: this._deleteItem,\n      done: this.setState.bind(this, 'DeleteItemsDone'),\n      fail: this._deletionFailed.bind(this)\n    });\n  },\n\n  _deletionFailed: function(error) {\n    this._errorMessage = error;\n    this.setState('DeleteItemsFail');\n  },\n\n  _loadPrerequisitesForModel: function(m, callback) {\n    var metadata = m.tableMetadata();\n\n    // TODO: extract to be included in fetch call instead? modifying global state is not very nice\n    metadata.no_data_fetch = true;\n\n    metadata.fetch({\n      wait: true, // TODO: from old code (delete_dialog), why is it necessary?\n      success: function() {\n        callback();\n      },\n      error: function(model, jqXHR) {\n        callback(jqXHR.responseText);\n      }\n    });\n  },\n\n  _deleteItem: function(item, callback) {\n    item.destroy({ wait: true })\n      .done(function() {\n        callback();\n      })\n      .fail(function(response) {\n        var errorMessage;\n\n        try {\n          errorMessage = JSON.parse(response.responseText).errors.join('; ');\n        } catch (e) {\n          errorMessage = 'something failed';\n        }\n\n        callback(errorMessage);\n      });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Create a vis from a dataset, required for some contexts to have a vis before be able to carry out next task\n *  - duplicate vis\n *  - add layer\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n\n    // Clean on hide and enter to confirm\n    // have to be mandatory\n    _.extend(\n      this.options,\n      {\n        clean_on_hide: true,\n        enter_to_confirm: true\n      }\n    );\n\n    if (!this.model) throw new Error('model is required (layer)');\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('confirm',\n      ViewFactory.createByTemplate('common/dialogs/delete_layer/template', {\n      })\n    );\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Deleting layer…',\n        quote: randomQuote()\n      })\n    );\n    this._panes.addTab('fail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not delete layer for some reason'\n      })\n    );\n    this._panes.active('confirm');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  ok: function() {\n    this._panes.active('loading');\n    var self = this;\n    this.model.destroy({\n      wait: true,\n      success: function() {\n        self.close();\n      },\n      error: function() {\n        self._panes.active('fail');\n      }\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Modal to delete a row/feature (e.g. a point or polygon), on the table or map view .\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.table) {\n      throw new Error('table is required');\n    }\n\n    if (!this.options.row) {\n      throw new Error('row is required');\n    }\n\n    this.options.name = this.options.name || 'row';\n\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this.table = this.options.table;\n    this.row = this.options.row;\n\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('confirm',\n      ViewFactory.createByTemplate('common/dialogs/delete_row/template', {\n        name: this.options.name\n      })\n    );\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Deleting ' + this.options.name + '…',\n        quote: randomQuote()\n      })\n    );\n    this._panes.addTab('fail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not delete ' + this.options.name + ' for some reason'\n      })\n    );\n    this._panes.active('confirm');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  ok: function() {\n    var self = this\n    this._panes.active('loading');\n    this.table.trigger('removing:row');\n    this.row.destroy({\n      success: function() {\n        self.table.trigger('remove:row', self.row);\n        self.close();\n      },\n      error: function() {\n        self._panes.active('fail');\n      }\n    }, {\n      wait: this.options.wait\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar BaseDialog = require('../views/base_dialog/view');\nvar ViewFactory = require('../view_factory');\nvar randomQuote = require('../view_helpers/random_quote');\nvar ErrorDetailsView = require('../views/error_details_view');\n\n/**\n * Dialog to manage duplication process of a cdb.admin.CartoDBTableMetadata object.\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.model) throw new Error('model is required (cdb.admin.CartoDBTableMetadata)');\n    if (!this.options.user) throw new Error('user is required');\n    this.elder('initialize');\n    this._initViews();\n    this._initBinds();\n    this._duplicateDataset();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: this.model.isInSQLView() ? 'Creating dataset from your query' : 'Duplicating your dataset',\n        quote: randomQuote()\n      })\n    );\n    this._panes.active('loading');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  _duplicateDataset: function(newName) {\n    var self = this;\n    var newName = this.model.get('name') + '_copy';\n    this.model.duplicate(newName, {\n      success: function(newTable) {\n        self._redirectTo(newTable.viewUrl());\n      },\n      error: self._showError.bind(self)\n    });\n  },\n\n  _showError: function(model) {\n    var view;\n    try {\n      var err = _.clone(model.attributes);\n      view = new ErrorDetailsView({\n        err: _.extend(err, model.attributes.get_error_text),\n        user: this.options.user\n      });\n    } catch(err) {\n      view = ViewFactory.createByTemplate('common/templates/fail', {\n        msg: \"Sorry, something went wrong, but we're not sure why.\"\n      });\n    }\n    this._panes.addTab('fail', view.render());\n    this._panes.active('fail');\n  },\n\n  _redirectTo: function(url) {\n    window.location = url;\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar BaseDialog = require('../views/base_dialog/view');\nvar ViewFactory = require('../view_factory');\nvar randomQuote = require('../view_helpers/random_quote');\nvar ErrorDetailsView = require('../views/error_details_view');\n\n/**\n * Dialog to manage duplication process of a cdb.admin.Visualization object.\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.model) throw new Error('model is required (cdb.admin.Visualization)');\n    if (!this.options.user) throw new Error('user is required');\n    this.elder('initialize');\n    this._initViews();\n    this._initBinds();\n    this._duplicateMap();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n    this.addView(this._panes);\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Duplicating your map',\n        quote: randomQuote()\n      })\n    );\n    this._panes.active('loading');\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  _duplicateMap: function(newName) {\n    var self = this;\n    var newName = this.model.get('name') + ' copy';\n    this.model.copy({\n      name: newName\n    }, {\n      success: function(newVis) {\n        self._redirectTo(newVis.viewUrl(self.options.user).edit().toString());\n      },\n      error: self._showError.bind(self)\n    });\n  },\n\n  _showError: function(model) {\n    var view;\n    try {\n      var err = _.clone(model.attributes);\n      view = new ErrorDetailsView({\n        err: _.extend(err, model.attributes.get_error_text),\n        user: this.options.user\n      });\n    } catch(err) {\n      view = ViewFactory.createByTemplate('common/templates/fail', {\n        msg: \"Sorry, something went wrong, but we're not sure why.\"\n      });\n    }\n    this._panes.addTab('fail', view.render());\n    this._panes.active('fail');\n  },\n\n  _redirectTo: function(url) {\n    window.location = url;\n  }\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\n\n\n/**\n *  Edit visualization (dataset or map) dialog\n *\n */\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    maxLength: 200\n  },\n\n  events: {\n    'keydown .js-name': '_onNameKeyDown',\n    'click .js-privacy': '_showPrivacy',\n    'submit': '_onSubmit'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.template = cdb.templates.getTemplate('common/dialogs/edit_vis_metadata/edit_vis_form');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this._destroyTags();\n    this.$el.html(\n      this.template({\n        isDataset: this.model.isDataset(),\n        isDataLibraryEnabled: this.user.featureEnabled('data_library'),\n        visValue: this.model.get('name'),\n        visDescription: this.model.get('description'),\n        visPrivacy: this.model.get('privacy').toLowerCase(),\n        visSource: this.model.get('source'),\n        visAttributions: this.model.get('attributions'),\n        visDisplayName: this.model.get('display_name'),\n        isNameEditable: this.model.isNameEditable(),\n        isMetadataEditable: this.model.isMetadataEditable(),\n        maxLength: this.options.maxLength\n      })\n    );\n    this._initViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('error', this._setFields, this);\n    this.model.bind('valid', this._setFields, this);\n  },\n\n  _initViews: function() {\n    var self = this;\n\n    // Markdown tooltip\n    this.addView(\n      new cdb.common.TipsyTooltip({\n        el: this.$('.js-markdown'),\n        html: true,\n        title: function() {\n          return $(this).data('title');\n        }\n      })\n    );\n\n    // Name error tooltip\n    this.addView(\n      new cdb.common.TipsyTooltip({\n        el: this.$('.js-name'),\n        title: function() {\n          return self.model.getError();\n        }\n      })\n    );\n\n    // Tags\n    _.each(this.model.get('tags'), function(li) {\n      this.$(\".js-tagsList\").append(\"<li>\" + cdb.core.sanitize.html(li) + \"</li>\");\n    }, this);\n\n    var tagsPlaceholder = (!this.model.isMetadataEditable() && this.model.get('tags').length === 0) ? 'No tags' : 'Add tags';\n\n    this.$(\".js-tagsList\").tagit({\n      allowSpaces: true,\n      placeholderText: tagsPlaceholder,\n      readOnly: !this.model.isMetadataEditable(),\n      onBlur: function() {\n        if (self.model.isMetadataEditable()) {\n          self.$('.js-tags').removeClass('is-focus')\n        }\n      },\n      onFocus: function() {\n        if (self.model.isMetadataEditable()) {\n          self.$('.js-tags').addClass('is-focus')\n        }\n      },\n      onSubmitTags: function(ev, tagList) {\n        ev.preventDefault();\n        self._onSubmit();\n        return false;\n      }\n    });\n\n    // Licenses dropdown\n    if (this.model.isDataset()) {\n      this._licenseDropdown = new cdb.forms.Combo({\n        className: 'Select',\n        width: '100%',\n        property: 'license',\n        model: this.model,\n        disabled: !this.model.isMetadataEditable(),\n        extra: this._getLicensesForFormsCombo()\n      });\n      this.addView(this._licenseDropdown);\n      this.$('.js-license').append(this._licenseDropdown.render().el);\n    }\n  },\n\n  _getLicensesForFormsCombo: function() {\n    var items = cdb.config.get('licenses');\n    var emptyOption = [{\n      id: '',\n      name: '-'\n    }];\n    return _.chain(emptyOption.concat(items))\n      .compact()\n      .map(function(d) {\n        return [d.name, d.id];\n      })\n      .value();\n  },\n\n  _setFields: function() {\n    // for the moment only name input is required\n    this.$('.js-name').toggleClass('is-invalid', !!this.model.getError());\n  },\n\n  _showPrivacy: function(ev) {\n    this.killEvent(ev);\n    this.trigger('onPrivacy', this);\n  },\n\n  // Form events\n\n  _onNameKeyDown: function(ev) {\n    if (ev.keyCode === $.ui.keyCode.ENTER) {\n      ev.preventDefault();\n      this._onSubmit();\n      return false;\n    }\n  },\n\n  _onSubmit: function(ev) {\n    if (ev) {\n      this.killEvent(ev);\n    }\n\n    // values\n    var attrs = {};\n    if (this.model.isNameEditable()) {\n      attrs['name'] = Utils.stripHTML(this.$('.js-name').val());\n    }\n    if (this.model.isMetadataEditable()) {\n      attrs['description'] = Utils.removeHTMLEvents(this.$('.js-description').val());\n      attrs['tags'] = this.$('.js-tagsList').tagit(\"assignedTags\");\n\n      if (this.model.isDataset()) {\n        attrs.source = this.$('.js-source').val();\n        attrs.attributions = this.$('.js-attributions').val();\n        attrs.display_name = this.$('.js-displayName').val();\n        // license is set through dropdown view, so no need to do an explicit set here\n      }\n    }\n\n    this.model.set(attrs);\n\n    if (this.model.isValid()) {\n      this.trigger('onSubmit', this.model, this);\n    }\n  },\n\n  // Clean functions\n\n  _destroyTags: function() {\n    this.$('.js-tagsList').tagit('destroy');\n  },\n\n  clean: function() {\n    this._destroyTags();\n    this.elder('clean');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Edit vis metadata dialog model\n *  to control if name and metadata\n *  are editable or not.\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    name: '',\n    description: '',\n    tags: '',\n    privacy: ''\n  },\n\n  initialize: function(attrs, opts) {\n    if (!opts || !opts.vis || !opts.user || !opts.dataLayer) {\n      throw new Error('Visualization, user and dataLayer models are required');\n    }\n    this.vis = opts.vis;\n    this.user = opts.user;\n    this.dataLayer = opts.dataLayer;\n\n    var data = {\n      name: this.vis.get('name'),\n      description: this.vis.get('description'),\n      tags: this.vis.get('tags'),\n      privacy: this.vis.get('privacy')\n    };\n    if (!this.vis.isVisualization()) {\n      // Additional fields, only for dataset, w/ fallbacks for defaults\n      data.source = this.vis.get('source') || '';\n      data.attributions = this.vis.get('attributions') || '';\n      data.license = this.vis.get('license') || '';\n      data.display_name = this.vis.get('display_name') || '';\n    }\n    this.set(data);\n\n    // Validation control variable\n    this.validationError = '';\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.bind('valid', function() {\n      this.validationError = '';\n    }, this);\n    this.bind('error', function(m, error) {\n      this.validationError = error;\n    }, this);\n  },\n\n  // Validation\n  _validate: function(attrs) {\n    var valid = cdb.core.Model.prototype._validate.apply(this, arguments);\n    if (valid) {\n      this.trigger('valid')\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  validate: function(attrs) {\n    if (!attrs) return;\n\n    if (!attrs.name) {\n      return \"Name can't be blank\"\n    }\n  },\n\n  getError: function() {\n    return this.validationError;\n  },\n\n  isValid: function() {\n    if (!this.validate) {\n      return true;\n    }\n    return !this.validate(this.attributes) && this.validationError === \"\";\n  },\n\n  // Helper functions\n  isDataset: function() {\n    return !this.vis.isVisualization();\n  },\n\n  isVisEditable: function() {\n    return this.vis.permission.isOwner(this.user);\n  },\n\n  isAttributeEditable: function(type) {\n    if (this.vis.isVisualization()) {\n      return this.isVisEditable();\n    } else {\n      var isReadOnly = type === \"name\" ? this.dataLayer.isReadOnly() : false;\n      if (!this.dataLayer) {\n        return false;\n      } else if (this.dataLayer && (isReadOnly || !this.dataLayer.permission.isOwner(this.user))) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n\n  isNameEditable: function() {\n    return this.isAttributeEditable('name');\n  },\n\n  isMetadataEditable: function() {\n    return this.isAttributeEditable('rest');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar FormView = require('./edit_vis_form_view');\nvar EditVisMetadataModel = require('./edit_vis_metadata_dialog_model');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n\n/**\n *  Edit visualization (dataset or map) dialog\n *\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-back': '_showForm'\n  }),\n\n  className: 'Dialog is-opening EditVisMetadata',\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.vis) {\n      throw new TypeError('vis model is required');\n    }\n\n    this.vis = this.options.vis;\n    this.user = this.options.user;\n    this.dataLayer = this.options.dataLayer;\n    this.model = new EditVisMetadataModel({}, {\n      vis: this.vis,\n      dataLayer: this.dataLayer,\n      user: this.user\n    });\n    this.template = cdb.templates.getTemplate('common/dialogs/edit_vis_metadata/edit_vis_metadata_dialog');\n  },\n\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    this.$('.content').addClass('Dialog-content--expanded');\n    this._initViews();\n    return this;\n  },\n\n  render_content: function() {\n    var visType = this.vis.isVisualization() ? 'map' : 'dataset';\n    return this.template({\n      visType: visType,\n      visTypeCapitalized: visType.charAt(0).toUpperCase() + visType.slice(1),\n      isNameEditable: this.model.isNameEditable(),\n      isMetadataEditable: this.model.isMetadataEditable()\n    });\n  },\n\n  _initViews: function() {\n    // Panes\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.$('.js-content')\n    });\n\n    // Create form\n    var form = new FormView({\n      el: this.$('.js-form'),\n      model: this.model,\n      user: this.user,\n      maxLength: this.options.maxLength\n    });\n\n    form.bind('onPrivacy', this._showPrivacy, this);\n    form.bind('onSubmit', this._saveAttributes, this);\n    this._panes.addTab('form', form.render());\n\n    // Create loading\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Saving new data...',\n        quote: randomQuote()\n      }).render()\n    );\n\n    // Create error\n    this._panes.addTab('error',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Sorry, something went wrong but you can get <button class=\"Button--link js-back\">back to the form</button>.'\n      }).render()\n    );\n\n    this._panes.active('form');\n  },\n\n  _saveAttributes: function() {\n    var self = this;\n    var newAttrs = _.omit(this.model.toJSON(), 'privacy');\n    var oldAttrs = {\n      name: this.vis.get('name'),\n      description: this.vis.get('description'),\n      tags: this.vis.get('tags')\n    };\n    if (this.model.isDataset()) {\n      oldAttrs.source = this.vis.get('source');\n      oldAttrs.attributions = this.vis.get('attributions');\n      oldAttrs.license = this.vis.get('license');\n    }\n\n    if (!_.isEmpty(this.vis.changedAttributes(newAttrs))) {\n      this._panes.active('loading');\n      this.vis.save(newAttrs,{\n        success: function() {\n          self.options.onDone && self.options.onDone(oldAttrs.name !== newAttrs.name);\n          self.hide();\n        },\n        error: function() {\n          self.vis.set(oldAttrs);\n          self._panes.active('error');\n        }\n      })\n    } else {\n      this.hide();\n    }\n  },\n\n  _showPrivacy: function() {\n    this.options.onShowPrivacy && this.options.onShowPrivacy();\n    this.hide();\n  },\n\n  _showForm: function() {\n    this._panes.active('form');\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\n\n/**\n * shows a dialog to get the table exported\n * new ExportDialog({\n *  table: table_model\n * })\n *\n * (Migrated almost-as-is from old editor to not break functionality)\n */\nmodule.exports = BaseDialog.extend({\n\n  _CSV_FILTER: \"SELECT * FROM (%%sql%%) as subq \",\n  _MAX_SQL_GET_LENGTH: 1000,\n  events: BaseDialog.extendEvents({\n    'click .js-option:not(.is-disabled)': '_export'\n  }),\n\n  /**\n   * Allowed formats on the exporter\n   * @type {Array}\n   */\n  formats: [\n    {format: 'csv', fetcher: 'fetchCSV', geomRequired: false, illustrationIconModifier: 'IllustrationIcon--neutral' },\n    {format: 'shp', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--magenta' },\n    {format: 'kml', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--sunrise' },\n    {format: 'geojson', label: 'geo json', fetcher: 'fetch', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--cyan' },\n    {format: 'svg', fetcher: 'fetchSVG', geomRequired: true, illustrationIconModifier: 'IllustrationIcon--royalDark' }\n  ],\n\n  initialize: function() {\n    _.extend(this.options, {\n      clean_on_hide: true,\n      table_id: this.model.id\n    });\n    this.elder('initialize');\n    _.bindAll(this, '_export');\n    this.baseUrl = cdb.config.getSqlApiUrl();\n    this.model.bind('change:geometry_types', this.refresh, this);\n  },\n\n  /**\n   * search a format based on its name in the format array\n   * @param  {string} format Format name\n   * @return {Object}\n   */\n  getFormat: function(format) {\n    for(var n in this.formats) {\n      if(this.formats[n].format === format) {\n        return this.formats[n]\n      }\n    }\n  },\n\n  /**\n   * Answer to button event and lauchn the export method associated to that format\n   * @param  {Event} ev\n   */\n  _export: function(ev) {\n    this.killEvent(ev);\n    var $button = $(ev.currentTarget);\n    var formatName = $button.data('format');\n    var format = this.getFormat(formatName);\n    this[format.fetcher](formatName);\n  },\n\n\n  /**\n   * Create a dictionary with the options shared between all the methods\n   * @return {Object}\n   */\n  getBaseOptions: function() {\n    var options = {};\n    options.filename = this.model.get('name');\n\n    if (this.options.user_data) {\n      options.api_key = this.options.user_data.api_key;\n    }\n\n    return options;\n  },\n\n  /**\n   * Returns the base sql to retrieve the data\n   * @return {string}\n   */\n  getPlainSql: function() {\n    if(this.options.sql) {\n      sql = this.options.sql;\n    } else {\n      if(this.model.sqlView) {\n        sql = this.model.sqlView.getSQL();\n      } else {\n        sql = \"select * from \" + this.model.get('name')\n      }\n    }\n    return sql;\n  },\n\n  /**\n   * Returns a specific sql filtered by the_geom, used on CSV exports\n   * @return {string}\n   */\n  getGeomFilteredSql: function() {\n    var sql = this.getPlainSql();\n    // if we have \"the_geom\" in our current schema, we apply a custom sql\n    if(this.model.isGeoreferenced()) {\n      return this._CSV_FILTER.replace(/%%sql%%/g, sql);\n    }\n    // Otherwise, we apply regular sql\n    return sql;\n  },\n\n  /**\n   * Populates the hidden form with the format related values and submits them to get the file\n   * @param  {Object} options Base options\n   * @param  {String} sql Sql of the document to be retrieved\n   */\n  _fetch: function(options, sql) {\n    this._showElAndHideRest('.js-preparing-download');\n    this.$('.format').val(options.format);\n    this.$('.q').val(sql);\n    this.$('.filename').val(options.filename);\n    this.$('.api_key').val(options.api_key);\n\n    if (options.format === 'csv') {\n      this.$('.skipfields').val(\"the_geom_webmercator\");\n    } else {\n      this.$('.skipfields').val(\"the_geom,the_geom_webmercator\");\n    }\n\n    if (window.user_data && window.user_data.email) {\n      // Event tracking \"Exported table data\"\n      cdb.god.trigger('metrics', 'export_table', {\n        email: window.user_data.email\n      });\n    }\n\n    // check if the sql is big or not, and send the request as a verb or other. This is a HACK.\n    if (sql.length < this._MAX_SQL_GET_LENGTH) {\n      var location = this.$('form').attr('action') + '?' + this.$('form').serialize()\n      this._fetchGET(location);\n    } else {\n      // I can't find a way of making the iframe trigger load event when its get a form posted,\n      // so we need to leave like it was until\n      this.submit();\n    }\n\n    this.$('.db').attr('disabled', 'disabled');\n    this.$('.skipfields').attr('disabled', 'disabled');\n\n    if (this.options.autoClose) {\n      this.close();\n      this.trigger('generating', this.$('.js-preparing-download').html());\n    }\n\n  },\n\n  showError: function(error) {\n    this.$('.js-error').html(\n      this.getTemplate('common/templates/fail')({\n        msg: error\n      })\n    );\n    this._showElAndHideRest('.js-error');\n  },\n\n  _fetchGET: function(url) {\n    function getError(content) {\n      // sql api returns a json when it fails\n      // but if the browser is running some plugin that\n      // formats it, the window content is the html\n      // so search for the word \"error\"\n      var error = null;\n      try {\n        var json = JSON.parse(content);\n        error = json.error[0];\n      } catch(e) {\n        if (content && content.indexOf('error') !== -1) {\n          error = \"an error occurred\";\n        }\n      }\n      return error;\n    }\n\n    var self = this;\n    var checkInterval;\n\n    var w = window.open(url);\n    w.onload = function() {\n      clearInterval(checkInterval);\n      var error = getError(w.document.body.textContent);\n      if(error) {\n        self.showError(error);\n      } else {\n        self.close();\n      }\n      w.close();\n    };\n    window.focus();\n    checkInterval = setInterval(function check() {\n      // safari needs to check the body because it never\n      // calls onload\n      if (w.closed || (w.document && w.document.body.textContent.length === 0)) {\n        self.close();\n        clearInterval(checkInterval);\n      }\n    }, 100);\n  },\n\n  /**\n   * Submits the form. This method is separated to ease the testing\n   */\n  submit: function() {\n    this.$('form').submit();\n  },\n\n  /**\n   * Base fetch, for the formats that don't require special threatment\n   * @param  {String} formatName\n   */\n  fetch: function(formatName) {\n    var options = this.getBaseOptions();\n    options.format = formatName;\n    var sql = this.getPlainSql();\n    this._fetch(options, sql);\n  },\n\n  /**\n   * Gets the options needed for csv format and fetch the document\n   * @param  {String} formatName\n   */\n  fetchCSV: function() {\n    var options = this.getBaseOptions();\n    options.format = 'csv';\n    var sql = this.getGeomFilteredSql();\n    this.$('.skipfields').removeAttr('disabled');\n    this._fetch(options, sql);\n  },\n  /**\n   * Gets the options needed for svg format and fetch the document\n   * @param  {String} formatName\n   */\n  fetchSVG: function(){\n    this.$('.db').removeAttr('disabled');\n    this.fetch('svg');\n  },\n  /**\n   * Returns the html populated with current data\n   * @return {String}\n   */\n  render_content: function() {\n    var isGeoreferenced = this.model.isGeoreferenced();\n    if (_.isBoolean(isGeoreferenced)) {\n      return this.getTemplate('common/dialogs/export/export_template')({\n        preparingDownloadContent: this._renderLoadingContent('We are preparing your download. Depending on the size, it could take some time.'),\n        formats: this.formats,\n        url: this.baseUrl,\n        isGeoreferenced: isGeoreferenced\n      });\n    } else {\n      return this._renderLoadingContent('Checking georeferences…');\n    }\n  },\n\n  refresh: function() {\n    this.$('.content').html(this.render_content());\n  },\n\n  _renderLoadingContent: function(title) {\n    return this.getTemplate('common/templates/loading')({\n      title: title,\n      quote: cdb.editor.randomQuote()\n    });\n  },\n\n  _showElAndHideRest: function(classNameToShow) {\n    [\n      '.js-start',\n      '.js-preparing-download',\n      '.js-error'\n    ].forEach(function(className) {\n      this.$(className)[ className === classNameToShow ? 'show' : 'hide' ]();\n    }, this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Lock/unlock datasets/maps dialog.\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-ok': '_confirm',\n    'click .js-download': '_download',\n    'click .js-cancel': '_abortExport'\n  }),\n\n  initialize: function (attrs) {\n    this.elder('initialize');\n\n    this._initBinds();\n  },\n\n  render_content: function () {\n    var state = this.model.get('state');\n\n    if (state === 'complete') {\n      var w = window.open(this.model.get('url'));\n\n      // If w is undefined, popup was blocked: we show a \"click to download\" modal. Else, download has started.\n      if (w === undefined) return cdb.templates.getTemplate('common/dialogs/export_map/templates/download');\n\n      w.focus();\n      this.close();\n    } else if (state === 'failure') {\n      return cdb.templates.getTemplate('common/templates/fail')({\n        msg: 'Export has failed'\n      });\n    } else if (state === 'pending' || state === 'exporting' || state === 'uploading') {\n      var loadingTitle = state.charAt(0).toUpperCase() + state.slice(1) + ' ...';\n\n      return this.getTemplate('common/templates/loading')({\n        title: loadingTitle,\n        quote: randomQuote()\n      });\n    } else {\n      return cdb.templates.getTemplate('common/dialogs/export_map/templates/confirm');\n    }\n  },\n\n  _confirm: function () {\n    this.model.requestExport();\n  },\n\n  _download: function () {\n    window.open(this.model.get('url'));\n    window.focus();\n\n    this.close();\n  },\n\n  _abortExport: function () {\n    this.model.cancelExport();\n    this.close();\n  },\n\n  _initBinds: function () {\n    this.model.bind('change:state', function () { this.render(); }, this);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Add column view\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'AddColumn js-addField',\n\n  events: {\n    'click .js-addColumn': '_addColumn'  \n  },\n\n  initialize: function() {\n    this.model = new cdb.core.Model({\n      state: 'idle'\n    });\n    this.table = this.options.table;\n    this.template = cdb.templates.getTemplate('common/dialogs/feature_data/add_column/add_column');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        state: this.model.get('state')\n      })\n    )\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this.render, this);\n  },\n\n  _addColumn: function() {\n    var self = this;\n    // Loading\n    this.model.set('state', 'loading');\n\n    this.table.addColumn('column_' + new Date().getTime(), 'string', {\n      success: function(mdl, data) {\n        self.trigger('newColumn', mdl, this);\n        self.model.set('state', 'idle');\n      },\n      error: function() {\n        self.model.set('state', 'error');\n      }\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar FormView = require('./form_view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n\n/**\n *  Feature data edition dialog\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-back': '_showForm'\n  }),\n\n  className: 'Dialog is-opening FeatureData',\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.table) {\n      throw new TypeError('table is required');\n    }\n\n    this.row = this.options.row;\n    this.table = this.options.table;\n    this.baseLayer = this.options.baseLayer;\n    this.dataLayer = this.options.dataLayer;\n    this.provider = this.options.provider;\n    this.currentZoom = this.options.currentZoom;\n    this.user = this.options.user;\n    this._template = cdb.templates.getTemplate('common/dialogs/feature_data/feature_data_dialog');\n  },\n\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    this.$('.content').addClass('Dialog-content--expanded');\n    this._initViews();\n    return this;\n  },\n\n  render_content: function() {\n    return this._template({\n      featureType: this.row.getFeatureType(),\n      quote: randomQuote()\n    });\n  },\n\n  _initViews: function() {\n    var self = this;\n\n    // Panes\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.$('.js-content')\n    });\n\n    // Create map\n    setTimeout(function() {\n      self._createPreviewMap()\n    }, 200);\n\n    // Create form\n    this.form = new FormView({\n      el: this.$('.js-form'),\n      table: this.table,\n      row: this.row\n    });\n\n    this.form.bind('onSubmit', this._changeAttributes, this);\n    this.form.bind('onError', this._scrollToError, this);\n    this._panes.addTab('form', this.form.render());\n\n    this.addView(this.form);\n\n    // Create loading\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Saving new data...',\n        quote: randomQuote()\n      }).render()\n    );\n\n    // Create error\n    this._panes.addTab('error',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Sorry, something went wrong but you can get <button class=\"Button--link js-back\">back to the form</button>.'\n      }).render()\n    );\n\n    this._panes.active('form');\n  },\n\n  _scrollToError: function(mdl) {\n    this.$('.js-content').animate({\n      scrollTop: ( this.$(\".EditField-label[value='\" + mdl.get('attribute') + \"']\").position().top - 20 )\n    });\n  },\n\n  _changeAttributes: function(attrs) {\n    var self = this;\n    var newData = _.object(_.pluck(attrs, 'attribute'), _.pluck(attrs, 'value'));\n    var oldData = {};\n\n    // Change state\n    this._panes.active('loading');\n\n    // Unset columns already not present in the\n    // new form data\n    _.each(this.row.attributes, function(val, key) {\n      if (newData[key] === undefined && !cdb.admin.Row.isReservedColumn(key) && key !== \"id\") {\n        self.row.unset(key) \n      }\n      oldData[key] = val;\n    });\n\n    if (!_.isEmpty(this.row.changedAttributes(newData))) {\n      // Save new attributes\n      this.row.save(newData, {\n        success: function() {\n          self._ok();\n        },\n        error: function() {\n          self.row.set(oldData);\n          self._panes.active('error');\n        }\n      });\n    } else {\n      self._cancel();\n    }\n  },\n\n  _createPreviewMap: function() {\n    var self = this;\n\n    // Create map\n    var div = this.$('.js-map');\n\n    var mapViewClass = cdb.admin.LeafletMapView;\n    if (this.provider === 'googlemaps') {\n      var mapViewClass = cdb.admin.GoogleMapsMapView;\n    }\n\n    // New map\n    this.map = new cdb.admin.Map();\n\n    this.mapView = new mapViewClass({\n      el: div,\n      map: this.map,\n      user: this.user\n    });\n\n    // Base layer\n    this.baseLayer.set('attribution', '');\n    this.map.addLayer(this.baseLayer);\n\n    // Data layer\n    this.dataLayer.set('query', 'SELECT * FROM ' + this.table.get('name') + ' WHERE cartodb_id=' + this.row.get('cartodb_id'));\n    this.dataLayer.set('attribution', '');\n    this.map.addLayer(this.dataLayer);\n\n    // Set bounds\n    var sql = new cdb.admin.SQL({\n      user: this.user.get('username'),\n      api_key: this.user.get('api_key')\n    });\n    sql.getBounds('SELECT * FROM ' + this.table.get('name') + ' WHERE cartodb_id=' + this.row.get('cartodb_id')).done(function(r) {\n      if (r) {\n        if (r[0][0] === r[1][0] && r[0][1] === r[1][1]) {\n          // Point geometry\n          self.map.setCenter(r[0]);\n        } else {\n          // Rest of geometries\n          self.map.setBounds(r);\n        }\n        self.map.setZoom(self.currentZoom);\n      }\n    });\n  },\n\n  _showForm: function() {\n    this._panes.active('form');\n  },\n\n  _ok: function() {\n    this.options.onDone && this.options.onDone();\n    this.elder('_ok');\n  },\n\n  _cancel: function() {\n    this.elder('_cancel');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\n\n/**\n *  Collection with all fields model\n *  included.\n *\n */\n\nmodule.exports = Backbone.Collection.extend({\n\n  isValid: function() {\n    return !this.getInvalid();\n  },\n\n  getInvalid: function() {\n    return this.find(function(mdl) {\n      return !mdl.isValid()\n    });\n  }\n\n})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar StringFieldView = require('../../../edit_fields/string_field/string_field_view');\nvar NumberFieldView = require('../../../edit_fields/number_field/number_field_view');\nvar BooleanFieldView = require('../../../edit_fields/boolean_field/boolean_field_view');\nvar DateFieldView = require('../../../edit_fields/date_field/date_field_view');\n\n/**\n *  Form field view for edit feature metadata\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'keydown .js-columnName': '_onInputChange',\n    'focusout .js-columnName': '_onColNameChange',\n  },\n\n  _FIELD_VIEW: {\n    'string': StringFieldView,\n    'number': NumberFieldView,\n    'boolean': BooleanFieldView,\n    'date': DateFieldView,\n    'timestamp with time zone': DateFieldView,\n    'timestamp without time zone': DateFieldView\n  },\n\n  initialize: function() {\n    this.model = new cdb.core.Model({\n      columnError: '',\n      typeError: '',\n      fieldError: ''\n    });\n    this.table = this.options.table;\n    this.row = this.options.row;\n    this.fieldModel = this.options.fieldModel;\n    this.template = cdb.templates.getTemplate('common/dialogs/feature_data/form_field/form_field');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(\n      this.template({\n        type: this.fieldModel.get('type'),\n        value: this.fieldModel.get('value'),\n        attribute: this.fieldModel.get('attribute'),\n        readOnly: this.fieldModel.get('readOnly'),\n        typeError: this.model.get('typeError'),\n        columnError: this.model.get('columnError')\n      })\n    );\n    this._initViews();\n    return this;\n  },\n\n  _initBinds: function() {\n    this.fieldModel.bind('change:readOnly', this.render, this);\n    this.fieldModel.bind('change:type', this._onTypeChanged, this);\n    this.add_related_model(this.fieldModel);\n  },\n\n  _initViews: function() {\n    var self = this;\n\n    // Field view\n    var editorField = this._FIELD_VIEW[this.fieldModel.get('type')] || this._FIELD_VIEW['string'];\n    var v = new editorField({\n      readOnly: this.fieldModel.get('readOnly'),\n      model: this.fieldModel\n    }).bind('onSubmit', function(e) {\n      this.trigger('onSubmit');\n    }, this);\n\n    this.$('.js-editField').append(v.render().el);\n    this.addView(v);\n\n    // Field tooltip\n    var fieldTooltip = new cdb.common.TipsyTooltip({\n      el: this.$('.js-editField'),\n      title: function() {\n        return self.fieldModel.getError()\n      }\n    });\n    this.addView(fieldTooltip);\n\n    // Column type combo\n    // Current value has to be available in the extra array,\n    // if not select will place first item as value\n    var types = [this.fieldModel.get('type')].concat(_.filter(['string', 'boolean', 'number', 'date'], function(type){\n      return self.table.isTypeChangeAllowed(self.fieldModel.get('attribute'), type)\n    }));\n    var combo = new cdb.forms.Combo({\n      el: this.$('.js-fieldType'),\n      model: this.fieldModel,\n      property: 'type',\n      disabled: this.fieldModel.get('readOnly'),\n      width: '85px',\n      extra: types\n    });\n\n    this.$(\".js-fieldType\").append(combo.render());\n    combo.bind('change', function(type) {\n      this.fieldModel.set({\n        value: null,\n        type: type\n      })\n    }, this);\n    this.addView(combo);\n\n    // Column type tooltip\n    var typeTooltip = new cdb.common.TipsyTooltip({\n      el: this.$('.js-fieldType'),\n      title: function() {\n        return self.model.get('typeError')\n      }\n    });\n    this.addView(typeTooltip);\n\n    // Column name tooltip\n    var typeTooltip = new cdb.common.TipsyTooltip({\n      el: this.$('.js-columnName'),\n      title: function() {\n        return self.model.get('columnError');\n      }\n    });\n    this.addView(typeTooltip);\n  },\n\n  _onTypeChanged: function() {\n    var self = this;\n    var previousType = this.fieldModel.previous('type');\n    var previousValue = this.fieldModel.previous('value');\n\n    this.model.set('typeError', '');\n\n    // Readonly everything\n    this.fieldModel.set('readOnly', true);\n\n    this.table.changeColumnType(this.fieldModel.get('attribute'), this.fieldModel.get('type'), {\n      success: function() {\n        // refresh record data after change\n        // readOnly to false\n        self._refreshRecordData(function() {\n          self.fieldModel.set('readOnly', false);\n        })\n      },\n      error: function() {\n        // Avoiding silent:true and the event trigger\n        // when other attribute is changed\n        self.fieldModel.attributes.readOnly = false;\n        self.fieldModel.attributes.value = previousValue;\n        self.fieldModel.attributes.type = previousType;\n\n        try {\n          var msg = JSON.parse(e.responseText).errors[0];\n          self.model.set('typeError', msg);\n        } catch (e) {}\n        self.render();\n      }\n    });\n  },\n\n  _onInputChange: function(ev) {\n    if (ev.keyCode === 13) {\n      $(ev.target).blur();\n      this.killEvent(ev);\n    }\n  },\n\n  _onColNameChange: function(ev) {\n    var self = this;\n    var val = $(ev.target).val();\n    var oldVal = this.fieldModel.get('attribute');\n    \n    if (oldVal !== val) {\n      this.fieldModel.set({\n        attribute: val,\n        readOnly: true\n      });\n\n      this.table.renameColumn(oldVal, val, {\n        success: function(mdl, data) {\n          self.model.set('columnError', '');\n          self.fieldModel.set({\n            attribute: data.name,\n            readOnly: false\n          });\n        },\n        error: function(mdl, err) {\n          try {\n            var msg = JSON.parse(err.responseText).errors[0];\n            self.model.set('columnError', msg);\n          } catch (e) {}\n          self.fieldModel.set({\n            attribute: oldVal,\n            readOnly: false\n          });\n        }\n      });\n    }\n  },\n\n  _refreshRecordData: function(onComplete) {\n    var self = this;\n\n    this.row.fetch({\n      success: function(r) {\n        var newValue = r && r.rows[0] && r.rows[0][self.fieldModel.get('attribute')];\n        self.fieldModel.set('value', newValue);\n        onComplete && onComplete();\n      },\n      error: function() {\n        onComplete && onComplete();\n      }\n    })\n  },\n  \n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar FormFieldView = require('./form_field/form_field_view');\nvar AddColumnView = require('./add_column/add_column_view');\nvar EditFieldModel = require('../../edit_fields/edit_field_model');\nvar FormCollection = require('./form_collection');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n *  Form view for edit feature metadata\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-submit': '_onSubmit',\n    'submit': '_onSubmit'\n  },\n\n  initialize: function() {\n    this.model = new cdb.core.Model({ state: 'idle' });\n    this.table = this.options.table;\n    this.row = this.options.row;\n    this.collection = new FormCollection();\n    this._generateCollection();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this._newColumn();\n    this.collection.each(this._renderField, this);\n    return this;\n  },\n\n  _generateCollection: function() {\n    var self = this;\n    var tableSchema = this.table.get('schema');\n    var hiddenColumns = this.table.hiddenColumns;\n\n    _.each(tableSchema, function(pair) {\n      if (!_.contains(hiddenColumns, pair[0])) {\n        var mdl = self._generateModel(pair[0], pair[1], self.row.get(pair[0]));\n        self.collection.add(mdl);\n      }\n    });\n  },\n\n  _generateModel: function(column, type, value) {\n    return new EditFieldModel({\n      attribute: column,\n      value: value,\n      type: type\n    });\n  },\n\n  _renderField: function(mdl) {\n    var v = new FormFieldView({\n      fieldModel: mdl,\n      table: this.table,\n      row: this.row\n    });\n    this.$('.js-addField').before(v.render().el);\n    v.bind('onSubmit', this._onSubmit, this);\n    this.addView(v);\n  },\n\n  _newColumn: function() {\n    var newColumn = new AddColumnView({ table: this.table });\n    newColumn.bind('newColumn', function(d){\n      // add it to the form\n      var mdl = this._generateModel(d.get('_name'), d.get('type'), null);\n      this.collection.add(mdl);\n      this._renderField(mdl);\n    }, this);\n    this.addView(newColumn);\n    this.$el.append(newColumn.render().el);\n  },\n\n  _onSubmit: function(ev) {\n    this.killEvent(ev);\n    \n    // Check if all models are valid, if so\n    // let's go my buddy!\n    var invalid = this.collection.getInvalid();\n    if (!invalid) {\n      var attrs = this.collection.toJSON();\n      this.trigger('onSubmit', attrs, this);\n    } else {\n      this.trigger('onError', invalid, this);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar StepsView = require('./steps_view');\nvar RowModel = require('./row_model');\nvar DefaultFooterView = require('./default_footer_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * Model for the administrative regions georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'Admin. Regions',\n  KIND: 'admin1',\n\n  defaults: {\n    step: 0,\n    columns: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!attrs.columnsNames) throw new Error('columnsNames is required');\n    if (!attrs.columns) throw new Error('columns is required');\n  },\n\n  createView: function() {\n    this._initRows();\n    this._setStateForFirstStep();\n\n    return ViewFactory.createByList([\n      new StepsView({\n        title: 'Select the column that has Administrative Regions',\n        desc: \"Georeference your data by country, state, province or municipality\",\n        model: this\n      }),\n      new DefaultFooterView({\n        model: this\n      })\n    ]);\n  },\n\n  assertIfCanContinue: function() {\n    var value = this.get('step') === 0 ? this._columnNameValue() : this.get('geometryType');\n    this.set('canContinue', !!value);\n  },\n\n  continue: function() {\n    if (this.get('step') === 0) {\n      this._setStateForSecondStep();\n    } else {\n      this._geocode();\n    }\n  },\n\n  goBack: function() {\n    this._setStateForFirstStep();\n  },\n\n  availableGeometriesFetchData: function() {\n    return this.get('geocodeStuff').availableGeometriesFetchData(this.KIND, this._locationValue(), this._isLocationFreeText());\n  },\n\n  _setStateForFirstStep: function() {\n    this.set({\n      step: 0,\n      canGoBack: false,\n      canContinue: false,\n      hideFooter: false\n    });\n    this.get('rows').invoke('unset', 'value');\n  },\n\n  _setStateForSecondStep: function() {\n    this.set({\n      step: 1,\n      canGoBack: true,\n      canContinue: false,\n      hideFooter: true,\n      geometryType: ''\n    });\n  },\n\n  _initRows: function() {\n    var rows = new Backbone.Collection([\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'Select Your Region Name',\n        placeholder: 'Select column',\n        data: this.get('columnsNames')\n      }),\n      new RowModel({\n        label: \"Select Your Country Data\",\n        data: this.get('columns')\n      })\n    ]);\n    this.set('rows', rows);\n  },\n\n  _geocode: function() {\n    var geocodeStuff = this.get('geocodeStuff');\n    var locationValue = this._locationValue();\n    var isLocationFreeText = this._isLocationFreeText();\n\n    var d = geocodeStuff.geocodingChosenData({\n      type: 'admin',\n      kind: geocodeStuff.isLocationWorld(locationValue, isLocationFreeText, true) ? 'admin0' : this.KIND, // migrated from old code, unclear why this is needed\n      location: locationValue,\n      column_name: this._columnNameValue(),\n      geometry_type: this.get('geometryType')\n    }, isLocationFreeText, true);\n\n    this.set('geocodeData', d);\n  },\n\n  _columnNameValue: function() {\n    return this.get('rows').first().get('value');\n  },\n\n  _locationValue: function() {\n    return this._location().get('value');\n  },\n\n  _isLocationFreeText: function() {\n    return this._location().get('isFreeText');\n  },\n\n  _location: function() {\n    return this.get('rows').last();\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar GeometryItemView = require('./geometry_item_view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * View to select which geometry type to use for georeference process.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this.availableGeometries = new cdb.admin.Geocodings.AvailableGeometries();\n\n    this._initBinds();\n    this._fetchAvailableGeometries();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/choose_geometry')()\n    );\n    _.each(\n      this.availableGeometries.get('available_geometries') ? this._createItemsViews() : [this._createLoadingView()],\n      this._appendView, this\n    );\n    return this;\n  },\n\n  _appendView: function(view) {\n    this.addView(view);\n    this.$('.js-items').append(view.render().el);\n  },\n\n  _createItemsViews: function() {\n    return [\n      this._createItemView({\n        type: 'point',\n        titles: {\n          available: 'Georeference your data with points',\n          unavailable: 'No point data available for your selection'\n        }\n      }),\n      this._createItemView({\n        type: 'polygon',\n        titles: {\n          available: 'Georeference your data with administrative regions',\n          unavailable: 'No polygon data available for your selection.',\n          learnMore: \"Sorry, we don't have polygons available for the datatype you are trying to geocode. \" +\n            'For example, if you are geocoding placenames we can only give you points for where those places exist.'\n        }\n      })\n    ];\n  },\n\n  _createItemView: function(d) {\n    return new GeometryItemView(_.extend({\n      model: this.model,\n      availableGeometries: this.availableGeometries\n    }, d));\n  },\n\n  _createLoadingView: function() {\n    return ViewFactory.createByTemplate('common/templates/loading', {\n      title: 'Checking for available geometries…',\n      quote: randomQuote()\n    });\n  },\n\n  _initBinds: function() {\n    this.availableGeometries.bind('change:available_geometries', this.render, this);\n    this.add_related_model(this.availableGeometries);\n  },\n\n  _fetchAvailableGeometries: function() {\n    this.availableGeometries.fetch({\n      data: this.model.availableGeometriesFetchData()\n    });\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar StepsView = require('./steps_view');\nvar RowModel = require('./row_model');\nvar DefaultFooterView = require('./default_footer_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * Model for the city names georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'City Names',\n  KIND: 'namedplace',\n\n  defaults: {\n    step: 0,\n    columns: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!attrs.columnsNames) throw new Error('columnsNames is required');\n    if (!attrs.columns) throw new Error('columns is required');\n  },\n\n  createView: function() {\n    this._initRows();\n    this._setStateForFirstStep();\n\n    return ViewFactory.createByList([\n      new StepsView({\n        title: \"Select the column that contains the City's Name\",\n        desc: 'No matter the type of the columns you select, we will transform them to number for georeferencing.',\n        model: this\n      }),\n      new DefaultFooterView({\n        model: this\n      })\n    ]);\n  },\n\n  assertIfCanContinue: function() {\n    var value = this.get('step') === 0 ? this._columnNameValue() : this.get('geometryType');\n    this.set('canContinue', !!value);\n  },\n\n  continue: function() {\n    if (this.get('step') === 0) {\n      this._setStateForSecondStep();\n    } else {\n      this._geocode();\n    }\n  },\n\n  goBack: function() {\n    this._setStateForFirstStep();\n  },\n\n  availableGeometriesFetchData: function() {\n    return this.get('geocodeStuff').availableGeometriesFetchData(this.KIND, this._locationValue(), this._isLocationFreeText());\n  },\n\n  _setStateForFirstStep: function() {\n    this.set({\n      step: 0,\n      canGoBack: false,\n      canContinue: false,\n      hideFooter: false\n    });\n  },\n\n  _setStateForSecondStep: function() {\n    this.set({\n      step: 1,\n      canGoBack: true,\n      canContinue: false,\n      hideFooter: true,\n      geometryType: ''\n    });\n  },\n\n  _geocode: function() {\n    var d = this.get('geocodeStuff').geocodingChosenData({\n      type: 'city',\n      kind: this.KIND,\n      location: this._locationValue(),\n      column_name: this._columnNameValue(),\n      geometry_type: this.get('geometryType')\n    }, this._isLocationFreeText(), true);\n\n    var region = this._regionValue();\n    if (!_.isEmpty(region)) {\n      d.region = region;\n      d.region_text = this._isRegionFreeText();\n    }\n\n    this.set('geocodeData', d);\n  },\n\n  _initRows: function() {\n    var rows = new Backbone.Collection([\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'In which column are your city names stored?',\n        placeholder: 'Select column',\n        data: this.get('columnsNames')\n      }),\n      new RowModel({\n        label: \"Admin. Region where city's located, if known\",\n        data: this.get('columns')\n      }),\n      new RowModel({\n        label: \"Country where city's located, if known\",\n        data: this.get('columns')\n      })\n    ]);\n    this.set('rows', rows);\n  },\n\n  _columnNameValue: function() {\n    return this.get('rows').first().get('value');\n  },\n\n  _regionValue: function() {\n    return this._region().get('value');\n  },\n\n  _isRegionFreeText: function() {\n    return this._region().get('isFreeText');\n  },\n\n  _region: function() {\n    return this.get('rows').at(1); // 2nd row\n  },\n\n  _locationValue: function() {\n    return this._location().get('value');\n  },\n\n  _isLocationFreeText: function() {\n    return this._location().get('isFreeText');\n  },\n\n  _location: function() {\n    return this.get('rows').last();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for the default footer\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-force-all-rows': '_onClickForceAllRows'\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/default_footer')()\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:canContinue', this._onChangeCanContinue, this);\n    this.model.bind('change:hideFooter', this._onChangeHideFooter, this);\n\n    var geocodeStuff = this._geocodeStuff();\n    geocodeStuff.bind('change:forceAllRows', this._onChangeForceAllRows, this);\n    this.add_related_model(geocodeStuff);\n  },\n\n  _onChangeCanContinue: function(m, canContinue) {\n    this.$('.ok').toggleClass('is-disabled', !canContinue);\n  },\n\n  _onChangeHideFooter: function(m, hideFooter) {\n    this.$el.toggle(!hideFooter);\n  },\n\n  _onChangeForceAllRows: function(m, hasForceAllRows) {\n    this.$('.js-force-all-rows button').toggleClass('is-checked', !!hasForceAllRows);\n  },\n\n  _onClickForceAllRows: function(ev) {\n    this.killEvent(ev);\n    var m = this._geocodeStuff();\n    m.set('forceAllRows', !m.get('forceAllRows'));\n  },\n\n  _geocodeStuff: function() {\n    return this.model.get('geocodeStuff');\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Simple object for common logic in the georeference modal, e.g. for available geometries, and\n * creating chosen geocoding data, etc.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    tableName: undefined,\n    forceAllRows: false\n  },\n\n  initialie: function(attrs) {\n    if (!attrs.tableName) throw new Error('tableName is required');\n  },\n\n  /**\n   * @param {String} kind\n   * @param {String} location\n   * @param {Boolean} isLocationFreeText\n   * @return {Object} hash\n   */\n  availableGeometriesFetchData: function(kind, location, isLocationFreeText) {\n    if (!kind) throw new Error('kind is required');\n\n    var d = {\n      kind: kind\n    };\n\n    if (_.isEmpty(location)) {\n      d.free_text = 'World';\n    } else {\n      if (isLocationFreeText) {\n        d.free_text = location;\n      } else {\n        d.column_name = location;\n        d.table_name = this.get('tableName');\n      }\n    }\n\n    return d;\n  },\n\n  // @return {Boolean} true if location is considered a \"world\" geocoding search value.\n  isLocationWorld: function(location, isFreeText, useFallbackIfLocationIsMissing) {\n    var isLocationMissingAndShouldFallback = (location === undefined && useFallbackIfLocationIsMissing);\n    var isWorld = location === '' || isLocationMissingAndShouldFallback;\n    return isWorld || (!!isFreeText && location.search('world') !== -1);\n  },\n\n  /**\n   * Creates the expected data for the 'geocodingChosen' event on the cdb.god model.\n   * Adheres to the existing workflow and was extracted from old views.\n   * @param {Object} d\n   * @param {Boolean} isLocationFreeText true if location prop was created through a free-text input field, and\n   *  false if matches a column name on the table\n   * @param {Boolean} useFallbackIfLocationIsMissing true if should use fallback value for a missing location value.\n   * @return {Object}\n   */\n  geocodingChosenData: function(d, isLocationFreeText, useFallbackIfLocationIsMissing) {\n    d.table_name = this.get('tableName');\n\n    if (this.isLocationWorld(d.location, isLocationFreeText, useFallbackIfLocationIsMissing)) {\n      d.location = 'world';\n      d.text = true; // Set free text\n    } else if (_.isBoolean(isLocationFreeText) && isLocationFreeText) {\n      d.text = true;\n    }\n\n    if (this.get('forceAllRows')) {\n      d.force_all_rows = true;\n    }\n\n    return d;\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for an individual geometry type\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'OptionCard OptionCard--blocky',\n\n  events: {\n    'click': '_onClick'\n  },\n\n  initialize: function() {\n    if (!this.options.type) cdb.log.error('type is required');\n    if (!this.options.titles) cdb.log.error('titles is required');\n    if (!this.options.titles.available) cdb.log.error('titles.available is required');\n    if (!this.options.titles.unavailable) cdb.log.error('titles.unavailable is required');\n    this.availableGeometries = this.options.availableGeometries;\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/geometry_item_' + this.options.type)({\n      })\n    );\n\n    this._onChangeAvailableGeometries();\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.availableGeometries.bind('change:available_geometries', this._onChangeAvailableGeometries, this);\n    this.add_related_model(this.availableGeometries);\n\n    this.model.bind('change:geometryType', this._onChangeGeometryType, this);\n  },\n\n  _onChangeGeometryType: function(m, type) {\n    this.$el.toggleClass('is-selected', type === this.options.type);\n  },\n\n  _onChangeAvailableGeometries: function() {\n    var isAvailable = this._isAvailable();\n\n    this.$el.toggleClass('OptionCard--static', !isAvailable);\n    this.$('.js-icon').toggleClass('u-disabled', !isAvailable);\n    this.$('.js-warning').toggle(!isAvailable);\n    this.$('.js-title')\n      .toggleClass('u-disabled', !isAvailable)\n      .text(this.options.titles[isAvailable ? 'available' : 'unavailable']);\n  },\n\n  _onClick: function(ev) {\n    this.killEvent(ev);\n    if (this._isAvailable()) {\n      this.model.set('geometryType', this.options.type);\n      this.model.continue();\n    }\n  },\n\n  _isAvailable: function() {\n    return _.contains(this.availableGeometries.get('available_geometries'), this.options.type);\n  }\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar LonLatColumnsModel = require('./lon_lat_columns_model');\nvar CityNamesModel = require('./city_names_model');\nvar AdminRegionsModel = require('./admin_regions_model');\nvar PostalCodesModel = require('./postal_codes_model');\nvar IpAddressesModel = require('./ip_addresses_model');\nvar StreetAddressesModel = require('./street_addresses/street_addresses_model');\nvar GeocodeStuffModel = require('./geocode_stuff_model');\nvar UserGeocodingModel = require('./user_geocoding_model');\n\n/**\n * View model for merge datasets view.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  _EXCLUDED_COLUMN_NAMES: ['cartodb_id', 'the_geom', 'updated_at', 'created_at', 'cartodb_georef_status'],\n  _ALLOWED_COLUMN_TYPES: ['string', 'number', 'boolean', 'date'],\n\n  defaults: {\n    options: undefined // Collection, created with model\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.table) throw new Error('table is required');\n    if (!attrs.user) throw new Error('user is required');\n    this._initGeocodeStuff();\n    this._initOptions();\n  },\n\n  changedSelectedTab: function(newTab) {\n    this.get('options').chain()\n      .without(newTab).each(this._deselect);\n  },\n\n  createView: function() {\n    return this._selectedTabModel().createView();\n  },\n\n  canContinue: function() {\n    return this._selectedTabModel().get('canContinue');\n  },\n\n  continue: function() {\n    if (this.canContinue()) {\n      this._selectedTabModel().continue();\n    }\n  },\n\n  canGoBack: function() {\n    return this._selectedTabModel().get('canGoBack');\n  },\n\n  goBack: function() {\n    if (this.canGoBack()) {\n      this._selectedTabModel().goBack();\n    }\n  },\n\n  _selectedTabModel: function() {\n    return this.get('options').find(this._isSelected);\n  },\n\n  _columnsNames: function() {\n    // Maintained old logic, so for some reason the column types filter is not applied for the places where the column names are usd\n    return _.chain(this.get('table').get('schema'))\n      .filter(this._isAllowedColumnName, this)\n      .map(this._columnName)\n      .value();\n  },\n\n  _filteredColumns: function() {\n    var table = this.get('table');\n    // original_schema may be set if not in SQL view (see where attr is set in the table model)\n    // maintained from code to not break behavior when implementing this new modal\n    return _.chain(table.get('original_schema') || table.get('schema'))\n      .filter(this._isAllowedColumnName, this)\n      .filter(this._isAllowedColumnType, this)\n      .map(this._inverColumnRawValues)\n      .value();\n  },\n\n  _inverColumnRawValues: function(rawColumn) {\n    // The cdb.forms.CustomTextCombo expects the data to be in order of [type, name], so need to translate the raw schema\n    var type = rawColumn[1];\n    var name = rawColumn[0];\n    return [type, name];\n  },\n\n  _isAllowedColumnName: function(rawColumn) {\n    return !_.contains(this._EXCLUDED_COLUMN_NAMES, this._columnName(rawColumn));\n  },\n\n  _isAllowedColumnType: function(rawColumn) {\n    return _.contains(this._ALLOWED_COLUMN_TYPES, this._columnType(rawColumn));\n  },\n\n  _columnName: function(rawColumn) {\n    return rawColumn[0];\n  },\n\n  _columnType: function(rawColumn) {\n    return rawColumn[1];\n  },\n\n  _isSelected: function(m) {\n    return m.get('selected');\n  },\n\n  _deselect: function(m) {\n    m.set('selected', false);\n  },\n\n  _initGeocodeStuff: function() {\n    var m = new GeocodeStuffModel({\n      tableName: this.get('table').get('id')\n    });\n    this.set('geocodeStuff', m);\n  },\n\n  _initOptions: function() {\n    var geocodeStuff = this.get('geocodeStuff');\n    var columnsNames = this._columnsNames();\n    var columns = this._filteredColumns();\n\n    this.set('options',\n      new Backbone.Collection([\n        new LonLatColumnsModel({\n          geocodeStuff: geocodeStuff,\n          columnsNames: columnsNames,\n          selected: true\n        }),\n        new CityNamesModel({\n          geocodeStuff: geocodeStuff,\n          columnsNames: columnsNames,\n          columns: columns\n        }),\n        new AdminRegionsModel({\n          geocodeStuff: geocodeStuff,\n          columnsNames: columnsNames,\n          columns: columns\n        }),\n        new PostalCodesModel({\n          geocodeStuff: geocodeStuff,\n          columnsNames: columnsNames,\n          columns: columns\n        }),\n        new IpAddressesModel({\n          geocodeStuff: geocodeStuff,\n          columnsNames: columnsNames,\n          columns: columns\n        }),\n        new StreetAddressesModel({\n          geocodeStuff: geocodeStuff,\n          columns: columns,\n          isGoogleMapsUser: this._isGmeGeocoderEnabled(),\n          userGeocoding: this._userGeocoding(),\n          lastBillingDate: this.get('user').get('billing_period'),\n          estimation: new cdb.admin.Geocodings.Estimation({\n            id: this.get('table').getUnquotedName()\n          })\n        })\n      ])\n    );\n\n    if (this.get('user').featureEnabled('georef_disabled')) {\n      this._disableGeorefTabs();\n    } else {\n      this._maybeDisabledStreetAddresses();\n    }\n  },\n\n  _disableGeorefTabs: function() {\n    _.each(this._georefTabs(), this._disableTab.bind(this, \"You don't have this option available in this version\"));\n  },\n\n  _georefTabs: function() {\n     // exclude 1st tab (LonLat), since it should not be affected by this feature flag\n    return this.get('options').rest();\n  },\n\n  _maybeDisabledStreetAddresses: function() {\n    var isGmeGeocoderEnabled = this._isGmeGeocoderEnabled();\n    if (this._isGoogleMapsEnabled()) {\n      if (!isGmeGeocoderEnabled) {\n        this._disableTab('Google Maps geocoder is not configured. Please contact us at sales@carto.com', this._streetAddrTabModel());\n      }\n    } else {\n      if (isGmeGeocoderEnabled) {\n        this._disableTab('Geocoder is not configured properly. Please contact us at sales@carto.com', this._streetAddrTabModel());\n      } else if (!this._userGeocoding().hasQuota()) {\n        // Credits are only used for users that use non-GME geocoder\n        this._disableTab('Your geocoding quota is not defined. Please contact us at sales@carto.com', this._streetAddrTabModel());\n      }\n    }\n  },\n\n  _userGeocoding: function() {\n    return new UserGeocodingModel(this.get('user').get('geocoding'));\n  },\n\n  _isGoogleMapsEnabled: function() {\n    return this._hasUserActionEnabled('google_maps_enabled');\n  },\n\n  _isGmeGeocoderEnabled: function() {\n    return this._hasUserActionEnabled('google_maps_geocoder_enabled');\n  },\n\n  _hasUserActionEnabled: function(actionName) {\n    return !!this.get('user').get('actions')[actionName];\n  },\n\n  _streetAddrTabModel: function() {\n    return this.get('options').find(function(m) {\n      return m instanceof StreetAddressesModel;\n    });\n  },\n\n  _disableTab: function(msg, tabModel) {\n    tabModel.set('disabled', msg);\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view.js');\nvar GeoreferenceModel = require('./georeference_model');\nvar TabItemView = require('./tab_item_view');\n\n/**\n * Dialog to georeference a table.\n * This view only acts as a high-level view, that managed the general view logic for the modal.\n * What is supposed to happen is delegated to the model and in turn the selected georeference option.\n */\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-back:not(.is-disabled)': '_onGoBack'\n  }),\n\n  initialize: function() {\n    if (!this.options.user) throw new Error('user is required');\n    this.options.clean_on_hide = true;\n    this.options.enter_to_confirm = true;\n    this.elder('initialize');\n\n    this.model = new GeoreferenceModel({\n      table: this.options.table,\n      user: this.options.user\n    });\n    this._initViews();\n    this._initBinds();\n  },\n\n  /**\n   * @override BaseDialog.prototype.render\n   */\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('Dialog-contentWrapper');\n    return this;\n  },\n\n  render_content: function() {\n    var table = this.model.get('table');\n    var $el = $(\n      this.getTemplate('common/dialogs/georeference/georeference')({\n        hasNoGeoferencedData: !table.isGeoreferenced() && table.data().length > 0\n      })\n    );\n    this._renderTabs($el.find('.js-tabs'));\n    this._renderTabContent($el);\n\n    return $el;\n  },\n\n  ok: function() {\n    this.model.continue();\n  },\n\n  _initViews: function() {\n    this._tabViews = this.model.get('options').map(this._createDefaultTabView, this);\n  },\n\n  _createDefaultTabView: function(model) {\n    var view = new TabItemView({\n      model: model\n    });\n    this.addView(view);\n    return view;\n  },\n\n  _renderTabs: function($target) {\n    $target.append.apply($target, _.map(this._tabViews, this._getRenderedElement));\n  },\n\n  _getRenderedElement: function(view) {\n    return view.render().el;\n  },\n\n  _renderTabContent: function($target) {\n    if (this._tabContentView) {\n      this._tabContentView.clean();\n    }\n    this._tabContentView = this.model.createView();\n    this.addView(this._tabContentView);\n    $target.find('.js-tab-content').html(this._tabContentView.render().el);\n  },\n\n  _initBinds: function() {\n    var options = this.model.get('options');\n    options.bind('change:selected', this._onChangeSelectedTab, this);\n    options.bind('change:canGoBack', this._onChangeCanGoBack, this);\n    options.bind('change:geocodeData', this._onChangeGeocodeData, this);\n    this.add_related_model(options);\n  },\n\n  _onChangeSelectedTab: function(tabModel, isSelected) {\n    if (isSelected) {\n      this.model.changedSelectedTab(tabModel);\n      this._renderTabContent(this.$el);\n    }\n  },\n\n  _onChangeCanGoBack: function(tabModel, canGoBack) {\n    this.$('.js-back').toggle(!!canGoBack);\n  },\n\n  _onGoBack: function() {\n    this.model.goBack();\n  },\n\n  _onChangeGeocodeData: function(tabModel, data) {\n    cdb.god.trigger('geocodingChosen', data);\n    this.close();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar RowModel = require('./row_model');\nvar RowsView = require('./rows_view');\nvar DefaultFooterView = require('./default_footer_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * Model for the IP addresses georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'IP Addresses',\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!attrs.columnsNames) throw new Error('columnsNames is required');\n  },\n\n  createView: function() {\n    this._initRows();\n    this.set({\n      canContinue: false,\n      hideFooter: false\n    });\n\n    return ViewFactory.createByList([\n      ViewFactory.createByTemplate('common/dialogs/georeference/default_content_header', {\n        title: \"Select the column that that contains the IP's name\",\n        desc: 'Convert IP address into geographical locations.'\n      }),\n      new RowsView({\n        model: this\n      }),\n      new DefaultFooterView({\n        model: this\n      })\n    ]);\n  },\n\n  assertIfCanContinue: function() {\n    this.set('canContinue', !!this._columnNameValue());\n  },\n\n  continue: function() {\n    var d = this.get('geocodeStuff').geocodingChosenData({\n      type: 'ip',\n      kind: 'ipaddress',\n      column_name: this._columnNameValue(),\n      geometry_type: 'point'\n    });\n\n    this.set('geocodeData', d);\n  },\n\n  _initRows: function() {\n    var rows = new Backbone.Collection([\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'In which column are your IP addresses stored?',\n        placeholder: 'Select column',\n        data: this.get('columnsNames')\n      })\n    ]);\n    this.set('rows', rows);\n  },\n\n  _columnNameValue: function() {\n    return this.get('rows').first().get('value');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar RowModel = require('./row_model');\nvar RowsView = require('./rows_view');\nvar DefaultFooterView = require('./default_footer_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * Model for the Lon/Lat georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'Lon/Lat Columns',\n\n  defaults: {\n    columnsNames: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!attrs.columnsNames) throw new Error('columnsNames is required');\n  },\n\n  createView: function() {\n    this.set({\n      canContinue: false,\n      hideFooter: false\n    });\n    this._initRows();\n\n    return ViewFactory.createByList([\n      ViewFactory.createByTemplate('common/dialogs/georeference/default_content_header', {\n        title: 'Select the columns containing your Lon/Lat columns',\n        desc: 'The selected columns are transformed into georeference coordinates.'\n      }),\n      new RowsView({\n        model: this\n      }),\n      new DefaultFooterView({\n        model: this\n      })\n    ]);\n  },\n\n  assertIfCanContinue: function() {\n    var canContinue = this.get('rows').all(function(m) {\n      return !!m.get('value');\n    });\n    this.set('canContinue', canContinue);\n  },\n\n  continue: function() {\n    var d = this.get('geocodeStuff').geocodingChosenData({\n      type: 'lonlat',\n      longitude: this.get('rows').first().get('value'),\n      latitude: this.get('rows').last().get('value')\n    });\n\n    this.set('geocodeData', d);\n  },\n\n  _initRows: function() {\n    var rows = new Backbone.Collection([\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'Select your Longitude',\n        placeholder: 'Select column',\n        property: 'longitude',\n        data: this.get('columnsNames')\n      }),\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'Select your Latitude',\n        placeholder: 'Select column',\n        property: 'latitude',\n        data: this.get('columnsNames')\n      })\n    ]);\n    this.set('rows', rows);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar RowModel = require('./row_model');\nvar StepsView = require('./steps_view');\nvar DefaultFooterView = require('./default_footer_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * Model for the postal codes georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'Postal Codes',\n  KIND: 'postalcode',\n\n  defaults: {\n    step: 0,\n    columns: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!attrs.columnsNames) throw new Error('columnsNames is required');\n    if (!attrs.columns) throw new Error('columns is required');\n  },\n\n  createView: function() {\n    this._initRows();\n    this._setStateForFirstStep();\n\n    return ViewFactory.createByList([\n      new StepsView({\n        title: 'Select the column that has the Postal Codes',\n        desc: 'Georeference your data by postal codes.',\n        model: this\n      }),\n      new DefaultFooterView({\n        model: this\n      })\n    ]);\n  },\n\n  assertIfCanContinue: function() {\n    var value = this.get('step') === 0 ? this._columnNameValue() : this.get('geometryType');\n    this.set('canContinue', !!value);\n  },\n\n  continue: function() {\n    if (this.get('step') === 0) {\n      this._setStateForSecondStep();\n    } else {\n      this._geocode();\n    }\n  },\n\n  goBack: function() {\n    this._setStateForFirstStep();\n  },\n\n  availableGeometriesFetchData: function() {\n    return this.get('geocodeStuff').availableGeometriesFetchData(this.KIND, this._locationValue(), this._isLocationFreeText());\n  },\n\n  _setStateForFirstStep: function() {\n    this.set({\n      step: 0,\n      canGoBack: false,\n      canContinue: false,\n      hideFooter: false\n    });\n  },\n\n  _setStateForSecondStep: function() {\n    this.set({\n      step: 1,\n      canGoBack: true,\n      canContinue: false,\n      hideFooter: true,\n      geometryType: ''\n    });\n  },\n\n  _geocode: function() {\n    var d = this.get('geocodeStuff').geocodingChosenData({\n      type: 'postal',\n      kind: this.KIND,\n      location: this._locationValue(),\n      column_name: this._columnNameValue(),\n      geometry_type: this.get('geometryType')\n    }, this._isLocationFreeText(), true);\n\n    this.set('geocodeData', d);\n  },\n\n  _initRows: function() {\n    var rows = new Backbone.Collection([\n      new RowModel({\n        comboViewClass: 'Combo',\n        label: 'In which column are your postal codes stored?',\n        placeholder: 'Select column',\n        data: this.get('columnsNames')\n      }),\n      new RowModel({\n        label: 'Country where postal codes are located, if known',\n        data: this.get('columns')\n      })\n    ]);\n    this.set('rows', rows);\n  },\n\n  _columnNameValue: function() {\n    return this.get('rows').first().get('value');\n  },\n\n  _locationValue: function() {\n    return this._location().get('value');\n  },\n\n  _isLocationFreeText: function() {\n    return this._location().get('isFreeText');\n  },\n\n  _location: function() {\n    return this.get('rows').last();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar RowView = require('./row_view');\n\n/**\n * Model for an individual row\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    comboViewClass: 'CustomTextCombo',\n    label: '',\n    placeholder: 'Select column or type it',\n    isFreeText: false,\n    data: []\n  },\n\n  createView: function() {\n    return new RowView({\n      model: this\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for the street addresses georeference option.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'Form-row Form-row--step',\n\n  initialize: function() {\n    this._initViews();\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/row')({\n        label: this.model.get('label')\n      })\n    );\n    this.$('.js-select').append(this._selectView.render().el);\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:value', this._onChangeValue, this);\n  },\n\n  _initViews: function() {\n    this._selectView = new cdb.forms[this.model.get('comboViewClass')]({\n      model: this.model,\n      placeholder: this.model.get('placeholder'),\n      disabled: this.model.get('disabled'),\n      extra: this.model.get('data'),\n      className: 'Select',\n      width: '100%',\n      property: 'value',\n\n      // This is only needed for a ComboFreeText view, but doesn't hurt for the normal Combo so let's leave it\n      text: 'isFreeText'\n    });\n    this.addView(this._selectView);\n\n    // Simulate a initial selection to update model to be in sync with the view\n    this._selectView.render()._changeSelection();\n  },\n\n  _onChangeValue: function(m, val) {\n    this.$el.toggleClass('is-done', !!val);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to render a set of rows.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this._renderRows();\n    return this;\n  },\n\n  _initBinds: function() {\n    var rows = this.model.get('rows');\n    rows.bind('change', this.model.assertIfCanContinue, this.model);\n    this.add_related_model(rows);\n  },\n\n  _renderRows: function() {\n    this.model.get('rows').chain()\n      .map(this._createRowView, this)\n      .map(this._appendRowToDOM, this);\n  },\n\n  _createRowView: function(m) {\n    var view = m.createView();\n    this.addView(view);\n    return view;\n  },\n\n  _appendRowToDOM: function(view) {\n    this.$el.append(view.render().el);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar RowsView = require('./rows_view');\nvar ChooseGeometryView = require('./choose_geometry_view');\nvar ViewFactory = require('../../view_factory');\n\n/**\n * View for the georeference types that requires the two-steps flow.\n * First select columns values, and then the geometry type to use.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    if (this.model.get('step') === 1) {\n      this._renderChooseGeometry();\n    } else {\n      this._renderHeader();\n      this._renderRows();\n    }\n\n    return this;\n  },\n\n  _renderHeader: function() {\n    this._appendView(\n      ViewFactory.createByTemplate('common/dialogs/georeference/default_content_header', {\n        title: this.options.title,\n        desc: this.options.desc\n      })\n    );\n  },\n\n  _renderRows: function() {\n    this._appendView(\n      new RowsView({\n        model: this.model\n      })\n    );\n  },\n\n  _renderChooseGeometry: function() {\n    this._appendView(\n      new ChooseGeometryView({\n        model: this.model\n      })\n    );\n  },\n\n  _appendView: function(view) {\n    this.addView(view);\n    this.$el.append(view.render().$el);\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:step', this.render, this);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'Georeference-estimation',\n\n  initialize: function() {\n    if (!_.isBoolean(this.options.hasHardLimit)) throw new Error('hasHardLimit is required');\n    if (!this.options.userGeocoding) throw new Error('userGeocoding is required');\n    this._initBinds();\n  },\n\n  render: function() {\n    var estimation = this.model.get('estimation');\n    var rows = this.model.get('rows');\n\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/street_addresses/estimation')({\n        hasEstimation: estimation !== undefined && rows !== undefined,\n        hasHardLimit: this.options.hasHardLimit,\n        costInCredits: this.model.costInCredits(),\n        costInDollars: this.model.costInDollars(),\n        blockPriceInDollars: this.options.userGeocoding.blockPriceInDollars(),\n        hasRows: rows !== 0\n      })\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change error', this.render, this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'Georeference-quota',\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/street_addresses/quota')({\n        quotaLeft: this.model.quotaLeftThisMonth(),\n        quotaUsedInPct: this.model.quotaUsedThisMonthInPct()\n      })\n    );\n    return this;\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar StreetAddressesView = require('./street_addresses_view');\nvar RowModel = require('../row_model');\nvar StreetRowModel = require('./street_row_model');\n\n/**\n * Model for the street addresses georeference option.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  TAB_LABEL: 'Street Addresses',\n  MAX_STREET_ROWS: 3,\n\n  defaults: {\n    columnsNames: [],\n    columns: [],\n    estimation: undefined\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.geocodeStuff) throw new Error('geocodeStuff is required');\n    if (!_.isBoolean(attrs.isGoogleMapsUser)) throw new Error('isGoogleMapsUser is required');\n    if (!attrs.userGeocoding) throw new Error('userGeocoding is required');\n    if (!attrs.columns) throw new Error('columns is required');\n    if (!attrs.estimation) throw new Error('estimation is required'); // cdb.admin.Geocodings.Estimations\n  },\n\n  createView: function() {\n    this.set({\n      canContinue: false,\n      hideFooter: false,\n      mustAgreeToTOS: false,\n      confirmTOS: false,\n      hasAgreedToTOS: false\n    });\n    this._initRows();\n\n    return new StreetAddressesView({\n      model: this\n    });\n  },\n\n  isDisabled: function() {\n    return !this.get('isGoogleMapsUser') && this.get('userGeocoding').hasReachedMonthlyQuota();\n  },\n\n  showCostsInfo: function() {\n    return !this.get('isGoogleMapsUser');\n  },\n\n  getFormatterItemByRow: function(m) {\n    var val = m.get('value');\n    if (val) {\n      return m.get('isFreeText') ? val.trim() : '{' + val + '}';\n    }\n  },\n\n  assertIfCanAddMoreRows: function() {\n    // If can add more rows, enable the add button only on the last street row\n    var streetRows = this.get('rows').filter(this._isStreetRow);\n    _.invoke(streetRows, 'set', 'canAddRow', false);\n    _.last(streetRows).set('canAddRow', streetRows.length < this.MAX_STREET_ROWS);\n  },\n\n  daysLeftToNextBilling: function() {\n    var today = moment().startOf('day');\n    return moment(this.get('lastBillingDate')).add(30, 'days').diff(today, 'days')\n  },\n\n  continue: function() {\n    var mustAgreeToTOS = this.get('mustAgreeToTOS');\n\n    if (this._hasAgreedToTOS() || !mustAgreeToTOS) {\n      var d = this.get('geocodeStuff').geocodingChosenData({\n        type: 'address',\n        kind: 'high-resolution',\n        formatter: this.get('formatter')\n      });\n      this.set('geocodeData', d);\n    } else if (mustAgreeToTOS) {\n      this.set('confirmTOS', true);\n    }\n  },\n\n  hasHardLimit: function() {\n    return !!this.get('userGeocoding').get('hard_limit');\n  },\n\n  _hasAgreedToTOS: function() {\n    return this.get('mustAgreeToTOS') && this.get('hasAgreedToTOS');\n  },\n\n  _isStreetRow: function(row) {\n    return row instanceof StreetRowModel;\n  },\n\n  _initRows: function() {\n    var columns = this.get('columns');\n    var isDisabled = this.isDisabled();\n    var rows = new Backbone.Collection([\n      new StreetRowModel({\n        label: 'Which column are your street addresses stored in?',\n        data: columns,\n        canAddRow: true,\n        disabled: isDisabled\n      }),\n      new RowModel({\n        label: 'State/province where address is located, if known',\n        data: columns,\n        disabled: isDisabled\n      }),\n      new RowModel({\n        label: 'Country where street address is located, if known',\n        data: columns,\n        disabled: isDisabled\n      })\n    ]);\n    this.set('rows', rows);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar ViewFactory = require('../../../view_factory');\nvar EstimationView = require('./estimation_view');\nvar QuotaView = require('./quota_view');\nvar DefaultFooterView = require('../default_footer_view');\nvar pluralizeString = require('../../../view_helpers/pluralize_string');\n\n/**\n * View to select long/lat couple to do the georeference.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initBinds();\n    this._fetchEstimation();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/street_addresses/street_addresses')({\n      })\n    );\n    this._renderHeader();\n    this._renderRows();\n\n    var showCostsInfo = this.model.showCostsInfo();\n    if (showCostsInfo) {\n      this._renderEstimation();\n      this._renderQuota();\n    }\n    this.$('.js-costs-info').toggle(!!showCostsInfo);\n\n    this._renderFooter();\n    return this;\n  },\n\n  _renderHeader: function() {\n    var view = ViewFactory.createByTemplate('common/dialogs/georeference/default_content_header', {\n      title: 'Select the column(s) that has your street address',\n      desc: 'Use this option if you need high resolution geocoding of your street adresses data.'\n    });\n    this.addView(view);\n    this.$el.prepend(view.render().$el);\n  },\n\n  _renderRows: function() {\n    this._$rows().toggleClass('u-disabled', !!this.model.isDisabled());\n    this.model.get('rows').chain()\n      .map(this._createRowView, this)\n      .map(this._appendRowToDOM, this);\n  },\n\n  _renderEstimation: function() {\n    var view = new EstimationView({\n      model: this.model.get('estimation'),\n      userGeocoding: this.model.get('userGeocoding'),\n      hasHardLimit: this.model.hasHardLimit()\n    });\n    this.addView(view);\n    this.$('.js-estimation').append(view.render().el);\n  },\n\n  _renderQuota: function() {\n    var view = new QuotaView({\n      model: this.model.get('userGeocoding')\n    });\n    this.addView(view);\n    this.$('.js-quota').append(view.render().el);\n  },\n\n  _renderFooter: function() {\n    var content;\n\n    if (this.model.isDisabled()) {\n      content = this.getTemplate('common/dialogs/georeference/street_addresses/upgrade_footer')({\n        cartodb_com_hosted: cdb.config.get('cartodb_com_hosted'),\n        upgradeURL: cdb.config.get('upgrade_url'),\n        pluralizeString: pluralizeString,\n        daysLeftToNextBilling: this.model.daysLeftToNextBilling()\n      });\n    } else {\n      var view = new DefaultFooterView({\n        model: this.model\n      });\n      this.addView(view);\n      content = view.render().$el;\n    }\n\n    this.$el.append(content);\n  },\n\n  _createRowView: function(m) {\n    var view = m.createView();\n    this.addView(view);\n    return view;\n  },\n\n  _appendRowToDOM: function(view) {\n    this._$rows().append(view.render().el);\n  },\n\n  _$rows: function() {\n    return this.$('.js-rows');\n  },\n\n  _initBinds: function() {\n    var rows = this.model.get('rows');\n    rows.bind('change', this._onChangeRows, this);\n    rows.bind('add', this._onAddRow, this);\n    this.add_related_model(rows);\n\n    var estimation = this.model.get('estimation');\n    estimation.bind('change', this._onChangeEstimation, this);\n    estimation.bind('error', this._onEstimationError, this);\n    this.add_related_model(estimation);\n\n    var geocodeStuff = this.model.get('geocodeStuff');\n    geocodeStuff.bind('change:forceAllRows', this._onChangeForceAllRows, this);\n    this.add_related_model(geocodeStuff);\n\n    this.model.bind('change:confirmTOS', this._onChangeConfirmTOS, this);\n    this.model.bind('change:isGoogleMapsUser', this.render, this);\n  },\n\n  _onChangeForceAllRows: function() {\n    this.model.get('estimation').reset();\n    this._fetchEstimation();\n  },\n\n  _fetchEstimation: function() {\n    if (this.model.showCostsInfo()) {\n      this.model.get('estimation').fetch({\n        data: {\n          force_all_rows: this.model.get('geocodeStuff').get('forceAllRows')\n        }\n      });\n    }\n  },\n\n  _onChangeRows: function() {\n    var formatter = this.model.get('rows').chain()\n      .map(this.model.getFormatterItemByRow)\n      .compact() // there might be rows that have no value, if so skip them\n      .value().join(', ');\n\n    this.model.set({\n      formatter: formatter,\n      canContinue: !_.isEmpty(formatter)\n    });\n  },\n\n  _onAddRow: function(newRow, rows, opts) {\n    var rowView = this._createRowView(newRow);\n    this.$('.js-rows').children().eq(opts.index).before(rowView.render().el);\n    this.model.assertIfCanAddMoreRows();\n  },\n\n  _onChangeEstimation: function() {\n    var mustAgreeToTOS = this.model.get('estimation').mayHaveCost() && !this.model.hasHardLimit();\n    this.model.set('mustAgreeToTOS', mustAgreeToTOS);\n  },\n\n  _onEstimationError: function() {\n    // Force re-render, handled in subview\n    this.model.get('estimation').set({\n      estimation: -1,\n      rows: -1\n    });\n  },\n\n  _onChangeConfirmTOS: function(m, confirmTOS) {\n    if (confirmTOS) {\n      this.model.set('confirmTOS', false, { silent: true }); // to re-renable if cancelled\n      var view = ViewFactory.createDialogByTemplate('common/dialogs/georeference/street_addresses/confirm_tos', {\n        // template data\n        costInDollars: this.model.get('estimation').costInDollars()\n      }, {\n        // dialog options\n        triggerDialogEvents: false, // to avoid closing this modal\n        enter_to_confirm: true,\n        clean_on_hide: false\n      });\n      view.ok = this._onAgreeToTOS.bind(this);\n      this.addView(view);\n      view.appendToBody();\n    }\n  },\n\n  _onAgreeToTOS: function() {\n    this.model.set('hasAgreedToTOS', true);\n    this.model.continue();\n  }\n\n});\n",
    "var RowModel = require('../row_model');\nvar StreetRowView = require('./street_row_view');\n\n/**\n * Specialization for the street row, to add an additonal row\n */\nmodule.exports = RowModel.extend({\n\n  createView: function() {\n    return new StreetRowView({\n      model: this\n    });\n  },\n\n  addRow: function() {\n    var newRowModel = new this.constructor({\n      label: 'Additional information to complete street address',\n      data: this.get('data')\n    });\n    this.collection.add(newRowModel, { at: this._indexAfterThisModel() });\n  },\n\n  _indexAfterThisModel: function() {\n    return this.collection.indexOf(this) + 1;\n  }\n\n});\n",
    "var RowView = require('../row_view');\n\n/**\n * Special view for the street addresses georeference option\n * This allows to potentially add more\n */\nmodule.exports = RowView.extend({\n\n  events: RowView.extendEvents({\n    'click .js-add-row': '_onClickAddRow'\n  }),\n\n  initialize: function() {\n    RowView.prototype.initialize.apply(this, arguments);\n    this._initStreetRowBinds();\n  },\n\n  render: function() {\n    RowView.prototype.render.call(this);\n    if (!this.model.get('disabled')) {\n      this.$el.append(\n        this.getTemplate('common/dialogs/georeference/street_addresses/row_add_row')()\n      );\n    }\n    return this;\n  },\n\n  _initStreetRowBinds: function() {\n    this.model.bind('change:canAddRow', this._onChangeCanAddRow, this);\n  },\n\n  _onClickAddRow: function(ev) {\n    this.killEvent(ev);\n    this.model.addRow();\n  },\n\n  _onChangeCanAddRow: function(m, canAddRow) {\n    this.$('.js-add-row').toggle(!!canAddRow);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View for an indvidual tab item\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: 'li',\n  className: 'Filters-typeItem Filters-typeItem--moreMargins',\n\n  events: {\n    'click .js-btn': '_onClick'\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.$el.html(\n      this.getTemplate('common/dialogs/georeference/tab_item')({\n        label: this.model.TAB_LABEL,\n        isDisabled: this.model.get('disabled')\n      })\n    );\n    this._onChangeSelected(this.model, this.model.get('selected'));\n    this._onChangeDisabled(this.model, this.model.get('disabled'));\n    this._createDisabledTooltip();\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:selected', this._onChangeSelected, this);\n    this.model.bind('change:disabled', this._onChangeDisabled, this);\n  },\n\n  _onChangeSelected: function(m, isSelected) {\n    this.$('button').toggleClass('is-selected', !!isSelected);\n  },\n\n  _onChangeDisabled: function(m, isDisabled) {\n    isDisabled ? this.undelegateEvents() : this.delegateEvents();\n  },\n\n  _createDisabledTooltip: function() {\n    var msg = this.model.get('disabled');\n    if (!_.isEmpty(msg)) {\n      this.addView(\n        new cdb.common.TipsyTooltip({\n          el: this.$('.js-btn'),\n          fallback: msg,\n          gravity: 's',\n          offset: -30\n        })\n      );\n    }\n  },\n\n  _onClick: function(ev) {\n    this.killEvent(ev);\n    this.model.set('selected', true);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * A value object to encapsulate logic related to user view model.\n *\n * Expected to be create with geocoding value from an user, e.g.:\n *   new UserGeocoding(user.get('geocoding'));\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    quota: null, // is based on monthly usage\n    block_price: null, // cost (in cents) per each 1000 credits extra\n    monthly_use: 0,\n    hard_limit: false\n  },\n\n  hasQuota: function() {\n    var quota = this.get('quota');\n    return quota !== null && quota !== undefined && quota !== '';\n  },\n\n  hasReachedMonthlyQuota: function() {\n    return this.get('hard_limit') && this._maybe(function(quota, monthlyUse) {\n      return (monthlyUse >= quota);\n    }, false);\n  },\n\n  /**\n   * Returns the quota left.\n   * @return {Number} a non-negative number (.e.g in the case of monthly usage exceeds the quota, returns 0)\n   */\n  quotaLeftThisMonth: function() {\n    return this._maybe(function(quota, monthlyUse) {\n      return Math.max(quota - monthlyUse, 0);\n    }, 0);\n  },\n\n  quotaUsedThisMonthInPct: function() {\n    return this._maybe(function(quota, monthlyUse) {\n      return (monthlyUse * 100) / quota;\n    }, 0);\n  },\n\n  blockPriceInDollars: function() {\n    return Math.ceil(this.get('block_price') / 100);\n  },\n\n  // Make sure monthly_use and quota are set\n  _maybe: function(fn, fallbackVal) {\n    var monthlyUse = this.get('monthly_use');\n    var quota = this.get('quota');\n\n    if (monthlyUse >= 0 && quota >= 0) {\n      return fn(quota, monthlyUse);\n    } else {\n      return fallbackVal;\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null)\n\n/**\n *  Limits reach content\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-toggler': '_onLumpSumClick'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new cdb.core.Model({\n      lumpSum: false\n    });\n    this.template = cdb.templates.getTemplate('common/dialogs/limits_reach/limits_reached_content');\n    this._initBinds();\n  },\n\n  render: function() {\n    var canUpgrade = cdb.config.get('upgrade_url') && !cdb.config.get('cartodb_com_hosted') && !this.user.isInsideOrg();\n    var currentPlan = this.user.get(\"account_type\");\n\n    var availablePlans = _.compact(this.collection.map(function(plan, index) {\n      var price = plan.get('price');\n      var planName = plan.get('title');\n\n      return {\n        name: planName.toLowerCase(),\n        price: Utils.formatNumber(price),\n        isUserPlan: planName.search(currentPlan) !== -1,\n        lumpSumPrice: price == \"0\" ? \"0\" : Utils.formatNumber(plan.get('lump_sum').price),\n        quota: Utils.readablizeBytes(plan.get('bytes_quota')).replace(/\\.00/g,'').replace(\" \", \"\"),\n        layers: plan.get('max_layers'),\n        privateMaps: plan.get('private_tables'),\n        removableBrand: plan.get('removable_brand')\n      }\n    }));\n\n    this.$el.html(\n      this.template({\n        lumpSum: this.model.get('lumpSum'),\n        itemHighlighted: this._getHighlighted(availablePlans, this.user.get(\"account_type\")),\n        canUpgrade: canUpgrade,\n        availablePlans: availablePlans,\n        organizationAdmin: this.user.isOrgOwner(),\n        organizationUser: (this.user.isInsideOrg() && !this.user.isOrgOwner()),\n        customHosted: cdb.config.get('cartodb_com_hosted'),\n        upgradeURL: cdb.config.get('upgrade_url'),\n        canStartTrial: this.user.canStartTrial()\n      })\n    );\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.collection.bind('reset', this.render, this);\n    this.add_related_model(this.collection);\n  },\n\n  _getHighlighted: function(plans, currentPlan) {\n    var item = 0;\n    for (var i = 0, l = plans.length; i < l; i++) {\n      if (plans[i].name.search(currentPlan) !== -1) {\n        item = i;\n      }\n    }\n    return item < 2 ? 2 : 3;\n  },\n\n  _onLumpSumClick: function() {\n    this.model.set('lumpSum', !this.model.get('lumpSum'));\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar UserPlansCollection = require('./user_plans_collection');\nvar LimitsReachedContentView = require('./limits_reached_content_view');\nvar BaseDialog = require('../../views/base_dialog/view');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar ViewFactory = require('../../view_factory');\n\n/**\n *  Show upgrade possibilities per user type\n *\n */\n\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.userPlans = new UserPlansCollection(null, { user: this.user });\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  render_content: function() {\n    var canUpgrade = cdb.config.get('upgrade_url') && !cdb.config.get('cartodb_com_hosted') && !this.user.isInsideOrg();\n    var organizationAdminEmail = this.user.isInsideOrg() && this.user.organization.get('owner').email || '';\n    var $el = $(cdb.templates.getTemplate('common/dialogs/limits_reach/limits_reached')({\n      canUpgrade: canUpgrade,\n      organizationAdminEmail: organizationAdminEmail,\n      organizationAdmin: this.user.isOrgOwner(),\n      organizationUser: (this.user.isInsideOrg() && !this.user.isOrgOwner()),\n      layersCount: this.user.getMaxLayers(),\n      customHosted: cdb.config.get('cartodb_com_hosted')\n    }));\n    this._initViews($el);\n    return $el;\n  },\n\n  _initBinds: function() {\n    this.userPlans.bind('error', function() {\n      this._panes.active('error');\n    }, this);\n    this.userPlans.bind('reset', function() {\n      this._panes.active('content');\n    }, this);\n    this.add_related_model(this.userPlans);\n  },\n\n  _initViews: function($el) {\n    this._panes = new cdb.ui.common.TabPane({\n      el: $el.find('.js-content')\n    });\n    this.addView(this._panes);\n\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Getting plans info…',\n        quote: randomQuote()\n      }).render()\n    );\n\n    this._panes.addTab('error',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Sorry, something went wrong trying to get your available plans.'\n      }).render()\n    );\n\n    this._panes.addTab('content',\n      new LimitsReachedContentView({\n        user: this.user,\n        collection: this.userPlans\n      }).render()\n    );\n\n    var canUpgrade = cdb.config.get('upgrade_url') && !cdb.config.get('cartodb_com_hosted') && !this.user.isInsideOrg();\n\n    this._panes.active(canUpgrade ? 'loading' : 'content');\n\n    if (canUpgrade) {\n      this.userPlans.fetch({\n        error: function() {\n          this.trigger('error');\n        }\n      });\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\n\n/**\n *  User plans model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    title: '',\n    desc: '',\n    price: 0,\n    tables_quota: '',\n    bytes_quota: 0,\n    support: '',\n    private_tables: false,\n    removable_brand: false,\n    max_layers: 4\n  }\n\n})",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar UserPlanModel = require('./user_plan_model');\n\n/**\n *  User plans collection\n *\n *  - It will get the available plans per user\n */\n\n\nmodule.exports = Backbone.Collection.extend({\n\n  model: UserPlanModel,\n\n  url: function() {\n    return '//' + cdb.config.get('account_host') + '/account/' + this.user.get('username') + '.json'\n  },\n\n  initialize: function(models, opts) {\n    if (!opts.user) {\n      throw new Error('user model is needed')\n    }\n    this.user = opts.user;\n  },\n\n  sync: function(method, model, options) {\n    var self = this;\n    var params = _.extend({\n      type: 'GET',\n      dataType: 'jsonp',\n      url: self.url(),\n      processData: false\n    }, options);\n\n    return $.ajax(params);\n  },\n\n  parse: function(r) {\n    return r.available_plans\n  }\n\n})",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar GuessingTogglerView = require('../../create/footer/guessing_toggler_view');\nvar PrivacyTogglerView = require('../../create/footer/privacy_toggler_view');\n\n/**\n * Footer view for the add layer modal.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-ok': '_finish'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this.user = this.options.user;\n    this.guessingModel = new cdb.core.Model({ guessing: true });\n    this.privacyModel = new cdb.core.Model({\n      privacy: this.user.canCreatePrivateDatasets() ? 'PRIVATE' : 'PUBLIC'\n    });\n    this._template = cdb.templates.getTemplate('common/dialogs/map/add_layer/footer');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    var $el = $(\n      this._template({\n        canFinish: this.model.canFinish(),\n        listing: this.model.get('listing')\n      })\n    );\n    this.$el.html($el);\n\n    this._initViews();\n\n    return this;\n  },\n\n  _initViews: function() {\n    var guessingTogglerView = new GuessingTogglerView({\n      model: this.guessingModel,\n      createModel: this.model\n    });\n    this.$('.js-footer-info').append(guessingTogglerView.render().el);\n    this.addView(guessingTogglerView);\n\n    this.privacyTogglerView = new PrivacyTogglerView({\n      model: this.privacyModel,\n      user: this.user,\n      createModel: this.model\n    });\n    this.$('.js-footerActions').prepend(this.privacyTogglerView.render().el);\n    this.addView(this.privacyTogglerView);\n  },\n\n  _initBinds: function() {\n    this.model.upload.bind('change', this.render, this);\n    this.model.selectedDatasets.bind('all', this._update, this);\n    this.model.bind('change', this._update, this);\n    this.add_related_model(this.model.upload);\n    this.add_related_model(this.model.selectedDatasets);\n  },\n\n  _update: function() {\n    var contentPane = this.model.get('contentPane');\n    var listing = this.model.get('listing');\n    if (contentPane === 'listing' && listing !== 'scratch') {\n      this.render().show();\n    } else {\n      this.hide();\n    }\n  },\n\n  _finish: function(e) {\n    this.killEvent(e);\n    if (this.model.canFinish()) {\n      // Set proper guessing values before starting the upload\n      // if dialog is in import section\n      if (this.model.get('listing') === 'import') {\n        this.model.upload.set('privacy', this.privacyModel.get('privacy'));\n        this.model.upload.setGuessing(this.guessingModel.get('guessing'));\n      }\n      this.model.finish();\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar UploadModel = require('../../background_polling/models/upload_model');\nvar VisFetchModel = require('../../visualizations_fetch_model');\n\n/**\n * Add layer model\n *\n * \"Implements\" the CreateListingModel.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    type: 'addLayer',\n    contentPane: 'listing', // [listing, loading]\n    listing: 'datasets', // [import, datasets, scratch]\n    collectionFetched: false,\n    activeImportPane: 'file'\n  },\n\n  initialize: function(attrs, opts) {\n    this.user = opts.user;\n    this.vis = opts.vis;\n    this.map = opts.map;\n\n    this.upload = new UploadModel({\n      create_vis: false\n    }, {\n      user: this.user\n    });\n\n    this.selectedDatasets = new Backbone.Collection();\n    this.collection = new cdb.admin.Visualizations();\n    this.visFetchModel = new VisFetchModel({\n      content_type: 'datasets',\n      library: this.showLibrary()\n    });\n    this._initBinds();\n    this._maybePrefetchDatasets();\n  },\n\n  // For create-listing view\n  canSelect: function(dataset) {\n    return dataset.get('selected') || this.selectedDatasets.length < 1; // for now only allow 1 item\n  },\n\n  // For create-listing view\n  showLibrary: function() {\n    return false;\n  },\n\n  // For create-listing view\n  showDatasets: function() {\n    return true;\n  },\n\n  // For create-listing-import view\n  setActiveImportPane: function(name) {\n    this.set('activeImportPane', name);\n  },\n\n  // For footer\n  canFinish: function() {\n    if (this.get('listing') === 'import') {\n      return this.upload.isValidToUpload();\n    } else if (this.get('listing') === 'datasets') {\n      return this.selectedDatasets.length > 0;\n    }\n  },\n\n  finish: function() {\n    if (this.get('listing') === 'import') {\n      cdb.god.trigger('importByUploadData', this.upload.toJSON(), this);\n    } else if (this.get('listing') === 'datasets') {\n      var mdl = this.selectedDatasets.at(0);\n      if (mdl.get('type') === 'remote') {\n        var d = {\n          create_vis: false,\n          type: 'remote',\n          value: mdl.get('name'),\n          remote_visualization_id: mdl.get('id'),\n          size: mdl.get('external_source') ? mdl.get('external_source').size : undefined\n        };\n        // See BackgroundImporter where the same event is bound to be handled..\n        cdb.god.trigger('importByUploadData', d, this);\n      } else {\n        this._addNewLayer(mdl.tableMetadata().get('name'));\n      }\n    }\n  },\n\n  // For footer (type guessing)\n  getImportState: function() {\n    return this.get('activeImportPane');\n  },\n\n  // For footer (type guessing)\n  showGuessingToggler: function() {\n    return this.get('listing') === 'import';\n  },\n\n  // For create-footer view\n  showPrivacyToggler: function() {\n    return this.get('listing') === 'import';\n  },\n\n  // For create-from-scratch view\n  createFromScratch: function() {\n    this.set('contentPane', 'creatingFromScratch');\n    var self = this;\n    var table = new cdb.admin.CartoDBTableMetadata();\n    table.save({}, {\n      success: function() {\n        self._addNewLayer(table.get('name'));\n      },\n      error: function() {\n        this.set('contentPane', 'addLayerFailed');\n      }\n    });\n  },\n\n  _initBinds: function() {\n    this.upload.bind('change', function() {\n      this.trigger('change:upload', this);\n    }, this);\n    this.visFetchModel.bind('change', this._fetchCollection, this);\n    this.bind('change:listing', this._maybePrefetchDatasets);\n\n    this.collection.bind('change:selected', function(changedModel, wasSelected) {\n      this.selectedDatasets[ wasSelected ? 'add' : 'remove' ](changedModel);\n    }, this);\n    this.collection.bind('reset', function() {\n      this.selectedDatasets.each(function(model) {\n        var sameModel = this.collection.get(model.id);\n        if (sameModel) {\n          sameModel.set('selected', true);\n        }\n      }, this);\n    }, this);\n  },\n\n  _maybePrefetchDatasets: function() {\n    if (this.get('listing') === 'datasets' && !this.get('collectionFetched') && !this.visFetchModel.isSearching()) {\n      this.set('collectionFetched', true);\n      this._fetchCollection();\n    }\n  },\n\n  _fetchCollection: function() {\n    var params = this.visFetchModel.attributes;\n    var types;\n\n    if (this.visFetchModel.isSearching()) {\n      // Supporting search in data library and user datasets at the same time\n      types = 'table,remote';\n    } else {\n      types = params.library ? 'remote' : 'table';\n    }\n\n    this.collection.options.set({\n      locked: '',\n      q: params.q,\n      page: params.page || 1,\n      tags: params.tag,\n      per_page: this.collection['_TABLES_PER_PAGE'],\n      shared: params.shared,\n      only_liked: params.liked,\n      order: 'updated_at',\n      type: '',\n      types: types,\n      exclude_raster: true\n    });\n\n    this.collection.fetch();\n  },\n\n  _onCollectionChange: function() {\n    this.selectedDatasets.reset(this.collection.where({ selected: true }));\n  },\n\n  _addNewLayer: function(tableName) {\n    this.set('contentPane', 'addingNewLayer');\n\n    var self = this;\n    this.map.addCartodbLayerFromTable(tableName, this.user.get('username'), {\n      vis: this.vis,\n      success: function() {\n        // layers need to be saved because the order may changed\n        self.map.layers.saveLayers();\n        self.trigger('addLayerDone');\n      },\n      error: function() {\n        self.set('contentPane', 'addLayerFailed');\n      }\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar CreateListing = require('../create/create_listing');\nvar FooterView = require('./add_layer/footer_view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar NavigationView = require('../create/listing/navigation_view');\n\n/**\n * Add layer dialog, typically used from editor\n */\nmodule.exports = BaseDialog.extend({\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.model) {\n      throw new TypeError('model is required');\n    }\n    if (!this.options.user) {\n      throw new TypeError('user is required');\n    }\n\n    this._template = cdb.templates.getTemplate('common/dialogs/map/add_layer_template');\n    this._initBinds();\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    this.$('.content').addClass('Dialog-content--expanded');\n    this._initViews();\n    this.$('.js-footer').append(this._footerView.render().el);\n    return this;\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render_content: function() {\n    return this._template({\n    });\n  },\n\n  _initBinds: function() {\n    this.model.bind('addLayerDone', this.close, this);\n    this.model.bind('change:contentPane', this._onChangeContentView, this);\n    cdb.god.bind('importByUploadData', this.close, this);\n    this.add_related_model(cdb.god);\n  },\n\n  _initViews: function() {\n    this._contentPane = new cdb.ui.common.TabPane({\n      el: this.$('.js-content-container')\n    });\n    this.addView(this._contentPane);\n\n    this._navigationView = new NavigationView({\n      el: this.$('.js-navigation'),\n      user: this.options.user,\n      routerModel: this.model.visFetchModel,\n      createModel: this.model,\n      collection: this.model.collection\n    });\n    this._navigationView.render();\n    this.addView(this._navigationView);\n\n    this._addTab('listing',\n      new CreateListing({\n        createModel: this.model,\n        user: this.options.user\n      })\n    );\n    this._addTab('creatingFromScratch',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Creating empty dataset…',\n        quote: randomQuote()\n      })\n    );\n    this._addTab('addingNewLayer',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Adding new layer…',\n        quote: randomQuote()\n      })\n    );\n    this._addTab('addLayerFailed',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not add layer'\n      })\n    );\n    this._contentPane.active(this.model.get('contentPane'));\n\n    this._footerView = new FooterView({\n      model: this.model,\n      user: this.options.user\n    });\n    this.addView(this._footerView);\n  },\n\n  _addTab: function(name, view) {\n    this._contentPane.addTab(name, view.render());\n    this.addView(view);\n  },\n\n  _onChangeContentView: function() {\n    var pane = this.model.get('contentPane');\n    this._contentPane.active(pane);\n    if (pane === 'loading') {\n      this._footerView.hide();\n    }\n    if (pane !== \"listing\") {\n      this._navigationView.hide();\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  Asset item previewing image\n *\n *  - It needs a model with asset url and state (is-idle, is-selected, is-destroying).\n *\n *  new AssetsItemView({\n *    model: asset_model\n *  })\n */\nmodule.exports = cdb.core.View.extend({\n\n  _SIZE: 60, // Thumbnail size (same cm for width and height)\n  _MIN_SIZE: 32, // Minimal thumbnail size (same cm for width and height)\n\n  tagName: 'li',\n\n  options: {\n    template: 'common/dialogs/map/image_picker/assets_item'\n  },\n\n  events: {\n    'click a.delete': '_openDropdown',\n    'click':          '_onClick'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate(this.options.template);\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.append(this.template(this.model.toJSON()));\n\n    this._calcBkgImg(this.model.get(\"public_url\"));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    _.bindAll(this, '_onClick', '_openDropdown');\n\n    this.model.bind('change:state', this._changeState, this);\n    this.model.bind('destroy', this.remove, this);\n  },\n\n  _calcBkgImg: function(src) {\n    var img = new Image();\n    var self = this;\n\n    img.onload = function() {\n      var w = this.width;\n      var h = this.height;\n\n      var $thumbnail = self.$(\"a.image\");\n\n      self.$el.css(\"background\",\"none\");\n\n      if(self.model.get(\"kind\") === 'marker') {\n        if(h > self._SIZE) {\n          $thumbnail.css({\n            \"background-size\":  \"cover\",\n            \"background-origin\": \"content-box\"\n          });\n        } else if ((w || h) < self._MIN_SIZE) {\n          // Scale up images smaller than considered min size (e.g. maki icons).\n          $thumbnail.css({\n            \"background-size\": self._MIN_SIZE + \"px\"\n          });\n        }\n      } else {\n        if ((w || h) > self._SIZE) {\n          $thumbnail.css({\n            \"background-size\":  \"cover\",\n            \"background-origin\": \"content-box\"\n          });\n        } else {\n          $thumbnail.css({\n            \"background-position\": \"0 0\",\n            \"background-repeat\": \"repeat\"\n          });\n        }\n      }\n    }\n\n    img.onerror = function(e){ cdb.log.info(e) };\n    img.src = src;\n  },\n\n  _onClick: function(e) {\n    this.killEvent(e);\n\n    if (this.model.get('state') !== 'selected' && this.model.get('state') != 'destroying') {\n      this.trigger('selected', this.model);\n      this.model.set('state', 'selected');\n    }\n  },\n\n  _changeState: function() {\n    this.$el\n      .removeClass('is-idle is-selected is-destroying')\n      .addClass(\"is-\" + this.model.get('state'));\n  },\n\n  _openDropdown: function(e) {\n    var self = this;\n\n    this.killEvent(e);\n    e.stopImmediatePropagation();\n\n    this.dropdown = new cdb.admin.DropdownMenu({\n      className: 'dropdown border tiny',\n      target: $(e.target),\n      width: 196,\n      speedIn: 150,\n      speedOut: 300,\n      template_base: 'common/dialogs/map/image_picker/remove_asset',\n      vertical_position: \"down\",\n      horizontal_position: \"left\",\n      horizontal_offset: 3,\n      tick: \"left\"\n    });\n\n    this.dropdown.bind(\"optionClicked\", function(ev) {\n      ev.preventDefault();\n      self._deleteAsset();\n    });\n\n    $('body').append(this.dropdown.render().el);\n    this.dropdown.open(e);\n    cdb.god.bind(\"closeDialogs\", this.dropdown.hide, this.dropdown);\n  },\n\n  _deleteAsset: function() {\n    var self = this;\n    this.model.set('state', 'destroying');\n\n    this.model.destroy({\n      success: function() {},\n      error: function() {\n        self.model.set('state', 'idle');\n      }\n    })\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar StaticAssetItemView = require('./static_assets_item_view');\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'AssetPane',\n\n  initialize: function() {\n    this.model = this.options.model;\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/assets_template');\n    this._setupAssets();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this.template());\n    this._renderAssets();\n    return this;\n  },\n\n  _setupAssets: function() {\n    var opts = {};\n\n    if (this.options.folder !== undefined)  opts.folder = this.options.folder;\n    if (this.options.size   !== undefined)  opts.size   = this.options.size;\n    if (this.options.host   !== undefined)  opts.host   = this.options.host;\n    if (this.options.ext    !== undefined)  opts.ext    = this.options.ext;\n\n    if (!_.isEmpty(opts)) {\n      this.options.icons = _.map(this.options.icons, function(a) {\n        return _.extend(a, opts);\n      });\n    }\n\n    this.collection = new cdb.admin.StaticAssets(this.options.icons);\n  },\n\n  _renderAssets: function() {\n    var self = this;\n    var items = this.collection.where({ kind: this.options.kind });\n\n    _(items).each(function(mdl) {\n      var item = new StaticAssetItemView({\n        className: 'AssetItem ' + (self.options.folder || ''),\n        template: 'common/dialogs/map/image_picker/static_assets_item',\n        model: mdl\n      });\n      item.bind('selected', self._selectItem, self);\n\n      self.$('ul').append(item.render().el);\n      self.addView(item);\n    });\n  },\n\n  _selectItem: function(m) {\n    this.model.set('value', m.get('public_url'));\n    this.trigger('fileChosen', this);\n    this._unselectItems(m);\n  },\n\n  // Unselect all images expect the selected one\n  _unselectItems: function(m) {\n    this.collection.each(function(mdl) {\n      if (mdl !== m && mdl.get('state') === 'selected') {\n        mdl.set('state', 'idle');\n      }\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar UploadModel = require('./upload_model');\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'AssetPane',\n\n  events: {\n    'click .js-fileButton': '_onBoxClick'\n  },\n\n  _UPLOADER: {\n    url:              '/api/v1/users/<%- id %>/assets',\n    uploads:          1, // Max uploads at the same time\n    maxFileSize:      1048576, // 1MB\n    acceptFileTypes:  ['png','svg','jpeg','jpg'],\n    acceptSync:       undefined,\n    resolution:       \"1024x1024\"\n  },\n\n  initialize: function() {\n    _.bindAll(this, '_onDbxChooserSuccess');\n\n    this.kind = this.options.kind;\n    this.user = this.options.user;\n    this._setupModel();\n    this.collection = this.options.collection;\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/box_template');\n\n    this.$el.html(this.template());\n\n    return this;\n  },\n\n  _setupModel: function() {\n    this.model = new UploadModel({\n      type: this.options.type,\n      kind: this.options.kind\n    }, {\n      userId: this.user.get(\"id\")\n    });\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this._onChangeState, this);\n  },\n\n  _onStateUploaded: function() {\n    this.collection.fetch();\n    this.model.setFresh({ kind: this.kind });\n  },\n\n  _onStateError: function() {\n    this._showFileError();\n    this.trigger(\"hide_loader\", this);\n    this.$(\".js-import-panel\").show();\n    this.model.setFresh({ kind: this.kind });\n  },\n\n  _showFileError: function() {\n    if (this.model.get('state') === \"error\") {\n      this.$('.js-fileError')\n        .text(this.model.get('get_error_text').what_about)\n        .show();\n      this.$('.js-fileButton').addClass('Button--negative');\n    }\n  },\n\n  _hideFileError: function() {\n    this.$('.js-fileError').hide();\n    this.$('.js-fileLabel').show();\n    this.$('.js-fileButton').removeClass('Button--negative');\n  },\n\n  _onChangeState: function() {\n    var state = this.model.get('state');\n\n    if (state === 'uploaded') {\n      this._onStateUploaded();\n    } else {\n      if (state == \"error\") {\n        this._onStateError();\n      } else if (state === 'idle' || state === \"uploading\") {\n        this.$(\".js-import-panel\").hide();\n        this.trigger(\"show_loader\", this);\n      } else {\n        this.$(\".js-import-panel\").show();\n        this.trigger(\"hide_loader\", this);\n      }\n    }\n  },\n\n\n  _onBoxClick: function(e) {\n    this.killEvent(e);\n\n    Box.choose({\n      success:      this._onDbxChooserSuccess,\n      multiselect:  false,\n      linkType:     \"direct\",\n      extensions:   _.map(this._UPLOADER.acceptFileTypes, function(ext) { return '.' + ext })\n    });\n  },\n\n  _onDbxChooserSuccess: function(files) {\n    if (files && files[0]) {\n      this.model.set({\n        type: 'url',\n        value: files[0].link,\n        state: 'uploading'\n      });\n\n      this.model.upload();\n\n      if (this.model.get('state') !== \"error\") {\n        // Remove errors\n        this._hideFileError();\n      } else {\n        this._showFileError();\n      }\n    }\n  }\n\n});\n",
    "// Maki icons from https://github.com/mapbox/maki\n// and https://github.com/mapbox/maki/blob/mb-pages/_includes/maki.json\nmodule.exports = {\n  disclaimer: '<a href=\"https://github.com/mapbox/maki\" target=\"_blank\">Maki Icons</a>, an open source project by <a href=\"http://mapbox.com\" target=\"_blank\">Mapbox</a>',\n  icons: [\n    {\n        \"name\": \"Circle stroked\",\n        \"icon\": \"circle-stroked\"\n    },\n    {\n        \"name\": \"Circle solid\",\n        \"icon\": \"circle\"\n    },\n    {\n        \"name\": \"Square stroked\",\n        \"icon\": \"square-stroked\"\n    },\n    {\n        \"name\": \"Square solid\",\n        \"icon\": \"square\"\n    },\n    {\n        \"name\": \"Triangle stroked\",\n        \"icon\": \"triangle-stroked\"\n    },\n    {\n        \"name\": \"Triangle solid\",\n        \"icon\": \"triangle\"\n    },\n    {\n        \"name\": \"Star stroked\",\n        \"icon\": \"star-stroked\"\n    },\n    {\n        \"name\": \"Star solid\",\n        \"icon\": \"star\"\n    },\n    {\n        \"name\": \"Cross\",\n        \"icon\": \"cross\"\n    },\n    {\n        \"name\": \"Marker Stroke\",\n        \"icon\": \"marker-stroked\"\n    },\n    {\n        \"name\": \"Marker Solid\",\n        \"icon\": \"marker\"\n    },\n    {\n        \"name\": \"Religious Jewish\",\n        \"icon\": \"religious-jewish\"\n    },\n    {\n        \"name\": \"Religious Christian\",\n        \"icon\": \"religious-christian\"\n    },\n    {\n        \"name\": \"Religious Muslim\",\n        \"icon\": \"religious-muslim\"\n    },\n    {\n        \"name\": \"Cemetery\",\n        \"icon\": \"cemetery\"\n    },\n    {\n        \"name\": \"Rocket\",\n        \"icon\": \"rocket\"\n    },\n    {\n        \"name\": \"Airport\",\n        \"icon\": \"airport\"\n    },\n    {\n        \"name\": \"Heliport\",\n        \"icon\": \"heliport\"\n    },\n    {\n        \"name\": \"Rail\",\n        \"icon\": \"rail\"\n    },\n    {\n        \"name\": \"Rail Metro\",\n        \"icon\": \"rail-metro\"\n    },\n    {\n        \"name\": \"Rail Light\",\n        \"icon\": \"rail-light\"\n    },\n    {\n        \"name\": \"Bus\",\n        \"icon\": \"bus\"\n    },\n    {\n        \"name\": \"Fuel\",\n        \"icon\": \"fuel\"\n    },\n    {\n        \"name\": \"Parking\",\n        \"tags\": [\n            \"parking\",\n            \"transportation\"\n        ],\n        \"icon\": \"parking\"\n    },\n    {\n        \"name\": \"Parking Garage\",\n        \"tags\": [\n            \"parking\",\n            \"transportation\",\n            \"garage\"\n        ],\n        \"icon\": \"parking-garage\"\n    },\n    {\n        \"name\": \"Airfield\",\n        \"tags\": [\n            \"airfield\",\n            \"airport\",\n            \"plane\",\n            \"landing strip\"\n        ],\n        \"icon\": \"airfield\"\n    },\n    {\n        \"name\": \"Roadblock\",\n        \"tags\": [\n            \"roadblock\",\n            \"stop\",\n            \"warning\",\n            \"dead end\"\n        ],\n        \"icon\": \"roadblock\"\n    },\n    {\n        \"name\": \"Ferry\",\n        \"tags\": [\n            \"ship\",\n            \"boat\",\n            \"water\",\n            \"ferry\",\n            \"transportation\"\n        ],\n        \"icon\": \"ferry\"\n    },\n    {\n        \"name\": \"Harbor\",\n        \"tags\": [\n            \"marine\",\n            \"dock\",\n            \"water\",\n            \"wharf\"\n        ],\n        \"icon\": \"harbor\"\n    },\n    {\n        \"name\": \"Bicycle\",\n        \"tags\": [\n            \"cycling\",\n            \"cycle\",\n            \"transportation\"\n        ],\n        \"icon\": \"bicycle\"\n    },\n    {\n        \"name\": \"Park\",\n        \"tags\": [\n            \"recreation\",\n            \"park\",\n            \"forest\",\n            \"tree\",\n            \"green\",\n            \"woods\",\n            \"nature\"\n        ],\n        \"icon\": \"park\"\n    },\n    {\n        \"name\": \"Park 2\",\n        \"tags\": [\n            \"recreation\",\n            \"park\",\n            \"forest\",\n            \"tree\",\n            \"green\",\n            \"woods\",\n            \"nature\"\n        ],\n        \"icon\": \"park2\"\n    },\n    {\n        \"name\": \"Museum\",\n        \"tags\": [\n            \"recreation\",\n            \"museum\",\n            \"tourism\"\n        ],\n        \"icon\": \"museum\"\n    },\n    {\n        \"name\": \"Lodging\",\n        \"tags\": [\n            \"lodging\",\n            \"hotel\",\n            \"recreation\",\n            \"motel\",\n            \"tourism\"\n        ],\n        \"icon\": \"lodging\"\n    },\n    {\n        \"name\": \"Monument\",\n        \"tags\": [\n            \"recreation\",\n            \"statue\",\n            \"monument\",\n            \"tourism\"\n        ],\n        \"icon\": \"monument\"\n    },\n    {\n        \"name\": \"Zoo\",\n        \"tags\": [\n            \"recreation\",\n            \"zoo\",\n            \"animal\",\n            \"giraffe\"\n        ],\n        \"icon\": \"zoo\"\n    },\n    {\n        \"name\": \"Garden\",\n        \"tags\": [\n            \"recreation\",\n            \"garden\",\n            \"park\",\n            \"flower\",\n            \"nature\"\n        ],\n        \"icon\": \"garden\"\n    },\n    {\n        \"name\": \"Campsite\",\n        \"tags\": [\n            \"recreation\",\n            \"campsite\",\n            \"camp\",\n            \"camping\",\n            \"tent\",\n            \"nature\"\n        ],\n        \"icon\": \"campsite\"\n    },\n    {\n        \"name\": \"Theatre\",\n        \"tags\": [\n            \"recreation\",\n            \"theatre\",\n            \"theater\",\n            \"entertainment\",\n            \"play\",\n            \"performance\"\n        ],\n        \"icon\": \"theatre\"\n    },\n    {\n        \"name\": \"Art gallery\",\n        \"tags\": [\n            \"art\",\n            \"center\",\n            \"museum\",\n            \"gallery\",\n            \"creative\",\n            \"recreation\",\n            \"entertainment\",\n            \"studio\"\n        ],\n        \"icon\": \"art-gallery\"\n    },\n    {\n        \"name\": \"Pitch\",\n        \"tags\": [\n            \"pitch\",\n            \"track\",\n            \"athletic\",\n            \"sports\",\n            \"field\"\n        ],\n        \"icon\": \"pitch\"\n    },\n    {\n        \"name\": \"Soccer\",\n        \"tags\": [\n            \"soccer\",\n            \"sports\"\n        ],\n        \"icon\": \"soccer\"\n    },\n    {\n        \"name\": \"American Football\",\n        \"tags\": [\n            \"football\",\n            \"sports\"\n        ],\n        \"icon\": \"america-football\"\n    },\n    {\n        \"name\": \"Tennis\",\n        \"tags\": [\n            \"tennis\",\n            \"court\",\n            \"ball\",\n            \"sports\"\n        ],\n        \"icon\": \"tennis\"\n    },\n    {\n        \"name\": \"Basketball\",\n        \"tags\": [\n            \"basketball\",\n            \"ball\",\n            \"sports\"\n        ],\n        \"icon\": \"basketball\"\n    },\n    {\n        \"name\": \"Baseball\",\n        \"tags\": [\n            \"baseball\",\n            \"softball\",\n            \"ball\",\n            \"sports\"\n        ],\n        \"icon\": \"baseball\"\n    },\n    {\n        \"name\": \"Golf\",\n        \"tags\": [\n            \"golf\",\n            \"sports\",\n            \"course\"\n        ],\n        \"icon\": \"golf\"\n    },\n    {\n        \"name\": \"Swimming\",\n        \"tags\": [\n            \"swimming\",\n            \"water\",\n            \"swim\",\n            \"sports\"\n        ],\n        \"icon\": \"swimming\"\n    },\n    {\n        \"name\": \"Cricket\",\n        \"tags\": [\n            \"cricket\",\n            \"sports\"\n        ],\n        \"icon\": \"cricket\"\n    },\n    {\n        \"name\": \"Skiing\",\n        \"tags\": [\n            \"winter\",\n            \"skiing\",\n            \"ski\",\n            \"sports\"\n        ],\n        \"icon\": \"skiing\"\n    },\n    {\n        \"name\": \"School\",\n        \"tags\": [\n            \"school\",\n            \"highschool\",\n            \"elementary\",\n            \"children\",\n            \"amenity\",\n            \"middle\"\n        ],\n        \"icon\": \"school\"\n    },\n    {\n        \"name\": \"College\",\n        \"tags\": [\n            \"college\",\n            \"school\",\n            \"amenity\",\n            \"university\"\n        ],\n        \"icon\": \"college\"\n    },\n    {\n        \"name\": \"Library\",\n        \"tags\": [\n            \"library\",\n            \"books\",\n            \"amenity\"\n        ],\n        \"icon\": \"library\"\n    },\n    {\n        \"name\": \"Post\",\n        \"tags\": [\n            \"post\",\n            \"office\",\n            \"amenity\",\n            \"mail\",\n            \"letter\"\n        ],\n        \"icon\": \"post\"\n    },\n    {\n        \"name\": \"Fire station\",\n        \"tags\": [\n            \"fire\",\n            \"station\",\n            \"amenity\"\n        ],\n        \"icon\": \"fire-station\"\n    },\n    {\n        \"name\": \"Town hall\",\n        \"tags\": [\n            \"townhall\",\n            \"mayor\",\n            \"building\",\n            \"amenity\",\n            \"government\"\n        ],\n        \"icon\": \"town-hall\"\n    },\n    {\n        \"name\": \"Police\",\n        \"tags\": [\n            \"police\",\n            \"jail\",\n            \"arrest\",\n            \"amenity\",\n            \"station\"\n        ],\n        \"icon\": \"police\"\n    },\n    {\n        \"name\": \"Prison\",\n        \"tags\": [\n            \"prison\",\n            \"jail\",\n            \"amenity\"\n        ],\n        \"icon\": \"prison\"\n    },\n    {\n        \"name\": \"Embassy\",\n        \"tags\": [\n            \"embassy\",\n            \"diplomacy\",\n            \"consulate\",\n            \"amenity\",\n            \"flag\"\n        ],\n        \"icon\": \"embassy\"\n    },\n    {\n        \"name\": \"Beer\",\n        \"tags\": [\n            \"bar\",\n            \"beer\",\n            \"drink\",\n            \"commercial\",\n            \"biergarten\",\n            \"pub\"\n        ],\n        \"icon\": \"beer\"\n    },\n    {\n        \"name\": \"Restaurant\",\n        \"tags\": [\n            \"restaurant\",\n            \"commercial\"\n        ],\n        \"icon\": \"restaurant\"\n    },\n    {\n        \"name\": \"Cafe\",\n        \"tags\": [\n            \"cafe\",\n            \"coffee\",\n            \"commercial\",\n            \"tea\"\n        ],\n        \"icon\": \"cafe\"\n    },\n    {\n        \"name\": \"Shop\",\n        \"tags\": [\n            \"shop\",\n            \"mall\",\n            \"commercial\",\n            \"store\"\n        ],\n        \"icon\": \"shop\"\n    },\n    {\n        \"name\": \"Fast Food\",\n        \"tags\": [\n            \"food\",\n            \"fast\",\n            \"commercial\",\n            \"burger\",\n            \"drive-through\"\n        ],\n        \"icon\": \"fast-food\"\n    },\n    {\n        \"name\": \"Bar\",\n        \"tags\": [\n            \"bar\",\n            \"drink\",\n            \"commercial\",\n            \"club\",\n            \"martini\",\n            \"lounge\"\n        ],\n        \"icon\": \"bar\"\n    },\n    {\n        \"name\": \"Bank\",\n        \"tags\": [\n            \"bank\",\n            \"atm\",\n            \"commercial\",\n            \"money\"\n        ],\n        \"icon\": \"bank\"\n    },\n    {\n        \"name\": \"Grocery\",\n        \"tags\": [\n            \"food\",\n            \"grocery\",\n            \"commercial\",\n            \"store\",\n            \"market\"\n        ],\n        \"icon\": \"grocery\"\n    },\n    {\n        \"name\": \"Cinema\",\n        \"tags\": [\n            \"cinema\",\n            \"theatre\",\n            \"film\",\n            \"movie\",\n            \"commercial\",\n            \"theater\",\n            \"entertainment\"\n        ],\n        \"icon\": \"cinema\"\n    },\n    {\n        \"name\": \"Pharmacy\",\n        \"tags\": [\n            \"pharmacy\",\n            \"drugs\",\n            \"medication\",\n            \"social\",\n            \"medicine\",\n            \"prescription\"\n        ],\n        \"icon\": \"pharmacy\"\n    },\n    {\n        \"name\": \"Hospital\",\n        \"tags\": [\n            \"hospital\",\n            \"health\",\n            \"medication\",\n            \"social\",\n            \"medicine\",\n            \"medical\",\n            \"clinic\"\n        ],\n        \"icon\": \"hospital\"\n    },\n    {\n        \"name\": \"Danger\",\n        \"tags\": [\n            \"minefield\",\n            \"landmine\",\n            \"disaster\",\n            \"dangerous\",\n            \"hazard\"\n        ],\n        \"icon\": \"danger\"\n    },\n    {\n        \"name\": \"Industrial\",\n        \"tags\": [\n            \"industrial\",\n            \"factory\",\n            \"property\",\n            \"building\"\n        ],\n        \"icon\": \"industrial\"\n    },\n    {\n        \"name\": \"Warehouse\",\n        \"tags\": [\n            \"warehouse\",\n            \"property\",\n            \"storage\",\n            \"building\"\n        ],\n        \"icon\": \"warehouse\"\n    },\n    {\n        \"name\": \"Commercial\",\n        \"tags\": [\n            \"commercial\",\n            \"property\",\n            \"business\",\n            \"building\"\n        ],\n        \"icon\": \"commercial\"\n    },\n    {\n        \"name\": \"Building\",\n        \"tags\": [\n            \"building\",\n            \"property\",\n            \"structure\",\n            \"business\",\n            \"building\"\n        ],\n        \"icon\": \"building\"\n    },\n    {\n        \"name\": \"Place of worship\",\n        \"tags\": [\n            \"religion\",\n            \"ceremony\",\n            \"religious\",\n            \"nondenominational\",\n            \"church\",\n            \"temple\"\n        ],\n        \"icon\": \"place-of-worship\"\n    },\n    {\n        \"name\": \"Alcohol shop\",\n        \"tags\": [\n            \"alcohol\",\n            \"liquor\",\n            \"store\",\n            \"shop\",\n            \"beer\",\n            \"wine\",\n            \"vodka\"\n        ],\n        \"icon\": \"alcohol-shop\"\n    },\n    {\n        \"name\": \"Logging\",\n        \"tags\": [\n            \"logger\",\n            \"chainsaw\",\n            \"woods\",\n            \"industry\"\n        ],\n        \"icon\": \"logging\"\n    },\n    {\n        \"name\": \"Oil well\",\n        \"tags\": [\n            \"oil\",\n            \"natural\",\n            \"environment\",\n            \"industry\",\n            \"resources\"\n        ],\n        \"icon\": \"oil-well\"\n    },\n    {\n        \"name\": \"Slaughterhouse\",\n        \"tags\": [\n            \"cows\",\n            \"cattle\",\n            \"food\",\n            \"meat\",\n            \"industry\",\n            \"resources\"\n        ],\n        \"icon\": \"slaughterhouse\"\n    },\n    {\n        \"name\": \"Dam\",\n        \"tags\": [\n            \"water\",\n            \"natural\",\n            \"hydro\",\n            \"hydroelectric\",\n            \"energy\",\n            \"environment\",\n            \"industry\",\n            \"resources\"\n        ],\n        \"icon\": \"dam\"\n    },\n    {\n    \"name\": \"Water\",\n    \"tags\": [\n        \"water\",\n        \"natural\",\n        \"hydro\",\n        \"lake\",\n        \"river\",\n        \"ocean\",\n        \"resources\"\n    ],\n    \"icon\": \"water\"\n    },\n    {\n    \"name\": \"Wetland\",\n    \"tags\": [\n        \"water\",\n        \"swamp\",\n        \"natural\"\n    ],\n    \"icon\": \"wetland\"\n    },\n    {\n    \"name\": \"Disability\",\n    \"tags\": [\n        \"handicap\",\n        \"wheelchair\",\n        \"access\"\n    ],\n    \"icon\": \"disability\"\n    },\n    {\n    \"name\": \"Telephone\",\n    \"tags\": [\n        \"payphone\",\n        \"call\"\n    ],\n    \"icon\": \"telephone\"\n    },\n    {\n    \"name\": \"Emergency Telephone\",\n    \"tags\": [\n        \"payphone\",\n        \"danger\",\n        \"safety\",\n        \"call\"\n    ],\n    \"icon\": \"emergency-telephone\"\n    },\n    {\n    \"name\": \"Toilets\",\n    \"tags\": [\n        \"bathroom\",\n        \"men\",\n        \"women\",\n        \"sink\",\n        \"washroom\",\n        \"lavatory\"\n    ],\n    \"icon\": \"toilets\"\n    },\n    {\n    \"name\": \"Waste Basket\",\n    \"tags\": [\n        \"trash\",\n        \"rubbish\",\n        \"bin\",\n        \"garbage\"\n    ],\n    \"icon\": \"waste-basket\"\n    },\n    {\n    \"name\": \"Music\",\n    \"tags\": [\n        \"stage\",\n        \"performance\",\n        \"band\",\n        \"concert\",\n        \"venue\"\n    ],\n    \"icon\": \"music\"\n    },\n    {\n    \"name\": \"Land Use\",\n    \"tags\": [\n        \"zoning\",\n        \"usage\",\n        \"area\"\n    ],\n    \"icon\": \"land-use\"\n    },\n    {\n    \"name\": \"City\",\n    \"tags\": [\n        \"area\",\n        \"point\",\n        \"place\",\n        \"urban\"\n    ],\n    \"icon\": \"city\"\n    },\n    {\n    \"name\": \"Town\",\n    \"tags\": [\n        \"area\",\n        \"point\",\n        \"place\",\n        \"small\"\n    ],\n    \"icon\": \"town\"\n    },\n    {\n    \"name\": \"Village\",\n    \"tags\": [\n        \"area\",\n        \"point\",\n        \"place\",\n        \"small\",\n        \"rural\"\n    ],\n    \"icon\": \"village\"\n    },\n    {\n    \"name\": \"Farm\",\n    \"tags\": [\n        \"building\",\n        \"farming\",\n        \"crops\",\n        \"plants\",\n        \"agriculture\",\n        \"rural\"\n    ],\n    \"icon\": \"farm\"\n    },\n    {\n    \"name\": \"Bakery\",\n    \"tags\": [\n        \"bakery\",\n        \"pastry\",\n        \"croissant\",\n        \"food\",\n        \"shop\",\n        \"bread\"\n    ],\n    \"icon\": \"bakery\"\n    },\n  {\n    \"name\": \"Dog Park\",\n    \"tags\": [\n        \"dog\",\n        \"pet\"\n    ],\n    \"icon\": \"dog-park\"\n    },\n   {\n    \"name\": \"Lighthouse\",\n    \"tags\": [\n        \"building\",\n        \"navigation\",\n        \"nautical\",\n        \"ocean\",\n        \"logistics\"\n    ],\n    \"icon\": \"lighthouse\"\n    },\n    {\n    \"name\": \"Clothing Store\",\n    \"tags\": [\n        \"clothing\",\n        \"store\",\n        \"shop\"\n    ],\n    \"icon\": \"clothing-store\"\n    },\n    {\n    \"name\": \"Polling Place\",\n    \"icon\": \"polling-place\"\n    },\n    {\n    \"name\": \"Playground\",\n    \"icon\": \"playground\"\n    },\n    {\n    \"name\": \"Entrance\",\n    \"icon\": \"entrance\"\n    },\n    {\n    \"name\": \"Heart\",\n    \"icon\": \"heart\"\n    },\n    {\n    \"name\": \"London Underground\",\n    \"icon\": \"london-underground\"\n    },\n    {\n    \"name\": \"Minefield\",\n    \"icon\": \"minefield\"\n    },\n    {\n    \"name\": \"Rail Underground\",\n    \"icon\": \"rail-underground\"\n    },\n    {\n    \"name\": \"Rail Above\",\n    \"icon\": \"rail-above\"\n    },\n    {\n     \"name\": \"Camera\",\n     \"icon\": \"camera\"\n    },\n    {\n    \"name\": \"Laundry\",\n    \"icon\": \"laundry\"\n    },\n    {\n        \"name\": \"Car\",\n        \"icon\": \"car\"\n    },\n    {\n    \"name\": \"Suitcase\",\n    \"icon\": \"suitcase\"\n    },\n    {\n    \"name\": \"Hairdresser\",\n    \"icon\": \"hairdresser\"\n    },\n    {\n    \"name\": \"Chemist\",\n    \"icon\": \"chemist\"\n    },\n    {\n    \"name\": \"Mobile phone\",\n    \"icon\": \"mobilephone\"\n    },\n    {\n    \"name\": \"Scooter\",\n    \"icon\": \"scooter\"\n    }\n  ]\n};\n",
    "module.exports = {\n  icons: [\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_1px_fast', icon: 'diagonal_1px_fast'},\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_1px_med', icon: 'diagonal_1px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_1px_slow', icon: 'diagonal_1px_slow'},\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_2px_fast', icon: 'diagonal_2px_fast', },\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_2px_med', icon: 'diagonal_2px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'diagonal_2px_slow', icon: 'diagonal_2px_slow'},\n    { kind: \"pattern\", ext: \"png\", name: 'donuts_4px_med', icon: 'donuts_4px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'donuts_6px_med', icon: 'donuts_6px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'dots_2px_fast', icon: 'dots_2px_fast', },\n    { kind: \"pattern\", ext: \"png\", name: 'dots_2px_med', icon: 'dots_2px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'dots_2px_slow', icon: 'dots_2px_slow'},\n    { kind: \"pattern\", ext: \"png\", name: 'dots_4px_fast', icon: 'dots_4px_fast'},\n    { kind: \"pattern\", ext: \"png\", name: 'dots_4px_med', icon: 'dots_4px_med', },\n    { kind: \"pattern\", ext: \"png\", name: 'dots_6px_fast', icon: 'dots_6px_fast' },\n    { kind: \"pattern\", ext: \"png\", name: 'dots_6px_med',  icon: 'dots_6px_med' }\n  ]\n};\n",
    "// Pin maps from http://www.flaticon.com/packs/pins-of-maps/\nmodule.exports = {\n  disclaimer: '<a href=\"http://www.flaticon.com/packs/pins-of-maps/\" target=\"_blank\">Pin Maps</a>, icons by <a href=\"http://freepik.com\" target=\"_blank\">freepik.com</a>',\n  icons: [\n    { name: 'air', icon: 'air' },\n    { name: 'air2', icon: 'air2' },\n    { name: 'anchor2', icon: 'anchor2' },\n    { name: 'anchor3', icon: 'anchor3' },\n    { name: 'bag1', icon: 'bag1' },\n    { name: 'bag2', icon: 'bag2' },\n    { name: 'balloon', icon: 'balloon' },\n    { name: 'black41', icon: 'black41' },\n    { name: 'boat1', icon: 'boat1' },\n    { name: 'book16', icon: 'book16' },\n    { name: 'building', icon: 'building' },\n    { name: 'burger', icon: 'burger' },\n    { name: 'bus6', icon: 'bus6' },\n    { name: 'caravan2', icon: 'caravan2' },\n    { name: 'church1', icon: 'church1' },\n    { name: 'church3', icon: 'church3' },\n    { name: 'club', icon: 'club' },\n    { name: 'cocktail3', icon: 'cocktail3' },\n    { name: 'coffee2', icon: 'coffee2' },\n    { name: 'dark11', icon: 'dark11' },\n    { name: 'disabled', icon: 'disabled' },\n    { name: 'dog2', icon: 'dog2' },\n    { name: 'favourite1', icon: 'favourite1' },\n    { name: 'flag5', icon: 'flag5' },\n    { name: 'flat', icon: 'flat' },\n    { name: 'hotel', icon: 'hotel' },\n    { name: 'information3', icon: 'information3' },\n    { name: 'location10', icon: 'location10' },\n    { name: 'location11', icon: 'location11' },\n    { name: 'location5', icon: 'location5' },\n    { name: 'location6', icon: 'location6' },\n    { name: 'location7', icon: 'location7' },\n    { name: 'location8', icon: 'location8' },\n    { name: 'location9', icon: 'location9' },\n    { name: 'marker2', icon: 'marker2' },\n    { name: 'marker3', icon: 'marker3' },\n    { name: 'marker4', icon: 'marker4' },\n    { name: 'marker5', icon: 'marker5' },\n    { name: 'marker6', icon: 'marker6' },\n    { name: 'marker7', icon: 'marker7' },\n    { name: 'monument2', icon: 'monument2' },\n    { name: 'mountains', icon: 'mountains' },\n    { name: 'p', icon: 'p' },\n    { name: 'petrol', icon: 'petrol' },\n    { name: 'petrol2', icon: 'petrol2' },\n    { name: 'pharmacy', icon: 'pharmacy' },\n    { name: 'phone13', icon: 'phone13' },\n    { name: 'pin10', icon: 'pin10' },\n    { name: 'pins', icon: 'pins' },\n    { name: 'pins1', icon: 'pins1' },\n    { name: 'pins10', icon: 'pins10' },\n    { name: 'pins11', icon: 'pins11' },\n    { name: 'pins12', icon: 'pins12' },\n    { name: 'pins13', icon: 'pins13' },\n    { name: 'pins14', icon: 'pins14' },\n    { name: 'pins15', icon: 'pins15' },\n    { name: 'pins16', icon: 'pins16' },\n    { name: 'pins17', icon: 'pins17' },\n    { name: 'pins18', icon: 'pins18' },\n    { name: 'pins19', icon: 'pins19' },\n    { name: 'pins2', icon: 'pins2' },\n    { name: 'pins20', icon: 'pins20' },\n    { name: 'pins21', icon: 'pins21' },\n    { name: 'pins22', icon: 'pins22' },\n    { name: 'pins23', icon: 'pins23' },\n    { name: 'pins24', icon: 'pins24' },\n    { name: 'pins25', icon: 'pins25' },\n    { name: 'pins26', icon: 'pins26' },\n    { name: 'pins27', icon: 'pins27' },\n    { name: 'pins28', icon: 'pins28' },\n    { name: 'pins29', icon: 'pins29' },\n    { name: 'pins3', icon: 'pins3' },\n    { name: 'pins30', icon: 'pins30' },\n    { name: 'pins31', icon: 'pins31' },\n    { name: 'pins32', icon: 'pins32' },\n    { name: 'pins33', icon: 'pins33' },\n    { name: 'pins34', icon: 'pins34' },\n    { name: 'pins35', icon: 'pins35' },\n    { name: 'pins36', icon: 'pins36' },\n    { name: 'pins37', icon: 'pins37' },\n    { name: 'pins38', icon: 'pins38' },\n    { name: 'pins39', icon: 'pins39' },\n    { name: 'pins4', icon: 'pins4' },\n    { name: 'pins40', icon: 'pins40' },\n    { name: 'pins41', icon: 'pins41' },\n    { name: 'pins42', icon: 'pins42' },\n    { name: 'pins43', icon: 'pins43' },\n    { name: 'pins44', icon: 'pins44' },\n    { name: 'pins45', icon: 'pins45' },\n    { name: 'pins46', icon: 'pins46' },\n    { name: 'pins47', icon: 'pins47' },\n    { name: 'pins48', icon: 'pins48' },\n    { name: 'pins49', icon: 'pins49' },\n    { name: 'pins5', icon: 'pins5' },\n    { name: 'pins50', icon: 'pins50' },\n    { name: 'pins51', icon: 'pins51' },\n    { name: 'pins52', icon: 'pins52' },\n    { name: 'pins53', icon: 'pins53' },\n    { name: 'pins54', icon: 'pins54' },\n    { name: 'pins55', icon: 'pins55' },\n    { name: 'pins56', icon: 'pins56' },\n    { name: 'pins57', icon: 'pins57' },\n    { name: 'pins58', icon: 'pins58' },\n    { name: 'pins59', icon: 'pins59' },\n    { name: 'pins6', icon: 'pins6' },\n    { name: 'pins60', icon: 'pins60' },\n    { name: 'pins61', icon: 'pins61' },\n    { name: 'pins62', icon: 'pins62' },\n    { name: 'pins63', icon: 'pins63' },\n    { name: 'pins64', icon: 'pins64' },\n    { name: 'pins65', icon: 'pins65' },\n    { name: 'pins66', icon: 'pins66' },\n    { name: 'pins67', icon: 'pins67' },\n    { name: 'pins68', icon: 'pins68' },\n    { name: 'pins69', icon: 'pins69' },\n    { name: 'pins7', icon: 'pins7' },\n    { name: 'pins70', icon: 'pins70' },\n    { name: 'pins71', icon: 'pins71' },\n    { name: 'pins72', icon: 'pins72' },\n    { name: 'pins73', icon: 'pins73' },\n    { name: 'pins74', icon: 'pins74' },\n    { name: 'pins75', icon: 'pins75' },\n    { name: 'pins76', icon: 'pins76' },\n    { name: 'pins77', icon: 'pins77' },\n    { name: 'pins78', icon: 'pins78' },\n    { name: 'pins79', icon: 'pins79' },\n    { name: 'pins8', icon: 'pins8' },\n    { name: 'pins80', icon: 'pins80' },\n    { name: 'pins81', icon: 'pins81' },\n    { name: 'pins82', icon: 'pins82' },\n    { name: 'pins83', icon: 'pins83' },\n    { name: 'pins84', icon: 'pins84' },\n    { name: 'pins85', icon: 'pins85' },\n    { name: 'pins86', icon: 'pins86' },\n    { name: 'pins87', icon: 'pins87' },\n    { name: 'pins88', icon: 'pins88' },\n    { name: 'pins89', icon: 'pins89' },\n    { name: 'pins9', icon: 'pins9' },\n    { name: 'pins90', icon: 'pins90' },\n    { name: 'pins91', icon: 'pins91' },\n    { name: 'position', icon: 'position' },\n    { name: 'restaurant2', icon: 'restaurant2' },\n    { name: 'right14', icon: 'right14' },\n    { name: 'road3', icon: 'road3' },\n    { name: 'shop2', icon: 'shop2' },\n    { name: 'shopping8', icon: 'shopping8' },\n    { name: 'sit', icon: 'sit' },\n    { name: 'ski1', icon: 'ski1' },\n    { name: 'soccer1', icon: 'soccer1' },\n    { name: 'suitcase1', icon: 'suitcase1' },\n    { name: 'suitcase2', icon: 'suitcase2' },\n    { name: 'telephone3', icon: 'telephone3' },\n    { name: 'tent', icon: 'tent' },\n    { name: 'tent1', icon: 'tent1' },\n    { name: 'train3', icon: 'train3' },\n    { name: 'train4', icon: 'train4' },\n    { name: 'turn7', icon: 'turn7' },\n    { name: 'walk', icon: 'walk' },\n    { name: 'wifi11', icon: 'wifi11' }\n  ]\n};\n",
    "// Simple icons from http://www.flaticon.com/packs/simpleicon-places/\nmodule.exports = {\n  disclaimer: '<a href=\"http://www.flaticon.com/packs/simpleicon-places/\" target=\"_blank\">SimpleIcons Places</a>, icons by <a href=\"http://www.simpleicon.com\" target=\"_blank\">simpleicon.com</a>',\n  icons: [\n    { name: 'beach3', icon: 'beach3' },\n    { name: 'beach4', icon: 'beach4' },\n    { name: 'boat12', icon: 'boat12' },\n    { name: 'building21', icon: 'building21' },\n    { name: 'building22', icon: 'building22' },\n    { name: 'building23', icon: 'building23' },\n    { name: 'building24', icon: 'building24' },\n    { name: 'buildings5', icon: 'buildings5' },\n    { name: 'castle7', icon: 'castle7' },\n    { name: 'church7', icon: 'church7' },\n    { name: 'coconut5', icon: 'coconut5' },\n    { name: 'compass44', icon: 'compass44' },\n    { name: 'compass45', icon: 'compass45' },\n    { name: 'compass46', icon: 'compass46' },\n    { name: 'compass47', icon: 'compass47' },\n    { name: 'compass49', icon: 'compass49' },\n    { name: 'compass50', icon: 'compass50' },\n    { name: 'factory7', icon: 'factory7' },\n    { name: 'factory8', icon: 'factory8' },\n    { name: 'flag31', icon: 'flag31' },\n    { name: 'flag32', icon: 'flag32' },\n    { name: 'heart206', icon: 'heart206' },\n    { name: 'home84', icon: 'home84' },\n    { name: 'home85', icon: 'home85' },\n    { name: 'home86', icon: 'home86' },\n    { name: 'home87', icon: 'home87' },\n    { name: 'home88', icon: 'home88' },\n    { name: 'home89', icon: 'home89' },\n    { name: 'home90', icon: 'home90' },\n    { name: 'map35', icon: 'map35' },\n    { name: 'map36', icon: 'map36' },\n    { name: 'map37', icon: 'map37' },\n    { name: 'map38', icon: 'map38' },\n    { name: 'map39', icon: 'map39' },\n    { name: 'map40', icon: 'map40' },\n    { name: 'map41', icon: 'map41' },\n    { name: 'map42', icon: 'map42' },\n    { name: 'map43', icon: 'map43' },\n    { name: 'map44', icon: 'map44' },\n    { name: 'map45', icon: 'map45' },\n    { name: 'map46', icon: 'map46' },\n    { name: 'map47', icon: 'map47' },\n    { name: 'map48', icon: 'map48' },\n    { name: 'map49', icon: 'map49' },\n    { name: 'map50', icon: 'map50' },\n    { name: 'map51', icon: 'map51' },\n    { name: 'map52', icon: 'map52' },\n    { name: 'map53', icon: 'map53' },\n    { name: 'map54', icon: 'map54' },\n    { name: 'map55', icon: 'map55' },\n    { name: 'map56', icon: 'map56' },\n    { name: 'map57', icon: 'map57' },\n    { name: 'map58', icon: 'map58' },\n    { name: 'map59', icon: 'map59' },\n    { name: 'map60', icon: 'map60' },\n    { name: 'palm9', icon: 'palm9' },\n    { name: 'placeholder4', icon: 'placeholder4' },\n    { name: 'sailboat5', icon: 'sailboat5' },\n    { name: 'sunbathing', icon: 'sunbathing' },\n    { name: 'sunbathing1', icon: 'sunbathing1' },\n    { name: 'tower15', icon: 'tower15' },\n    { name: 'town', icon: 'town' }\n  ]\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar UploadModel = require('./upload_model');\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'AssetPane',\n\n  events: {\n    'click .js-fileButton': '_onDropboxClick'\n  },\n\n  _UPLOADER: {\n    url:              '/api/v1/users/<%- id %>/assets',\n    uploads:          1, // Max uploads at the same time\n    maxFileSize:      1048576, // 1MB\n    acceptFileTypes:  ['png','svg','jpeg','jpg'],\n    acceptSync:       undefined,\n    resolution:       \"1024x1024\"\n  },\n\n  initialize: function() {\n    _.bindAll(this, '_onDbxChooserSuccess');\n\n    this.kind = this.options.kind;\n    this.user = this.options.user;\n    this._setupModel();\n    this.collection = this.options.collection;\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/dropbox_template');\n\n    this.$el.html(this.template());\n\n    return this;\n  },\n\n  _setupModel: function() {\n    this.model = new UploadModel({\n      type: this.options.type,\n      kind: this.options.kind\n    }, {\n      userId: this.user.get(\"id\")\n    });\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this._onChangeState, this);\n  },\n\n  _onStateUploaded: function() {\n    this.collection.fetch();\n    this.model.setFresh({ kind: this.kind });\n  },\n\n  _onStateError: function() {\n    this._showFileError();\n    this.trigger(\"hide_loader\", this);\n    this.$(\".js-import-panel\").show();\n    this.model.setFresh({ kind: this.kind });\n  },\n\n  _showFileError: function() {\n    if (this.model.get('state') === \"error\") {\n      this.$('.js-fileError')\n        .text(this.model.get('get_error_text').what_about)\n        .show();\n      this.$('.js-fileButton').addClass('Button--negative');\n    }\n  },\n\n  _hideFileError: function() {\n    this.$('.js-fileError').hide();\n    this.$('.js-fileLabel').show();\n    this.$('.js-fileButton').removeClass('Button--negative');\n  },\n\n  _onChangeState: function() {\n    var state = this.model.get('state');\n\n    if (state === 'uploaded') {\n      this._onStateUploaded();\n    } else {\n      if (state == \"error\") {\n        this._onStateError();\n      } else if (state === 'idle' || state === \"uploading\") {\n        this.$(\".js-import-panel\").hide();\n        this.trigger(\"show_loader\", this);\n      } else {\n        this.$(\".js-import-panel\").show();\n        this.trigger(\"hide_loader\", this);\n      }\n    }\n  },\n\n\n  _onDropboxClick: function(e) {\n    this.killEvent(e);\n\n    Dropbox.choose({\n      success:      this._onDbxChooserSuccess,\n      multiselect:  false,\n      linkType:     \"direct\",\n      extensions:   _.map(this._UPLOADER.acceptFileTypes, function(ext) { return '.' + ext })\n    });\n  },\n\n  _onDbxChooserSuccess: function(files) {\n    if (files && files[0]) {\n      this.model.set({\n        type: 'url',\n        value: files[0].link,\n        state: 'uploading'\n      });\n\n      this.model.upload();\n\n      if (this.model.get('state') !== \"error\") {\n        // Remove errors\n        this._hideFileError();\n      } else {\n        this._showFileError();\n      }\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar UploadModel = require('./upload_model');\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'AssetPane',\n\n  options: {\n    type: 'url',\n    acceptSync: false,\n    fileEnabled: true,\n    formTemplate: '',\n    headerTemplate: '',\n    fileAttrs: {}\n  },\n\n  events: {\n    'keyup .js-textInput': '_onTextChanged',\n    'submit .js-form': '_onSubmitForm'\n  },\n\n  initialize: function() {\n\n    this.user = this.options.user;\n    this.kind = this.options.kind;\n\n    this.collection = this.options.collection;\n\n    this._setupModel();\n\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/file_upload_template');\n\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template(_.extend(this.options, this.model.attributes))\n    );\n\n    this._initViews();\n    return this;\n  },\n\n  _setupModel: function() {\n    this.model = new UploadModel({\n      type: this.options.type,\n      kind: this.options.kind\n    }, {\n      userId: this.user.get(\"id\")\n    });\n    this._initBinds();\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this._onChangeState, this);\n  },\n\n  _initViews: function() {\n    if (this.options.fileEnabled) {\n      var self = this;\n      this.$('.js-fileInput').bind('change', function(e) {\n        if (this.files && this.files.length > 0) {\n          self._onFileChanged(this.files);\n        }\n      });\n\n      this._initDropzone();\n    }\n  },\n\n  _onTextChanged: function() {\n    var value = this.$('.js-textInput').val();\n    if (!value) {\n      this._hideTextError();\n    }\n  },\n\n  _onSubmitForm: function(e) {\n    if (e) this.killEvent(e);\n\n    // URL submit\n    var value = this.$('.js-textInput').val();\n\n    if (!value) {\n      this._hideTextError();\n      return;\n    }\n\n    // Change file attributes :S\n    this.trigger('urlSelected', this);\n\n    // Change model\n    this.model.set({\n      type: 'url',\n      value: value,\n      state: 'idle'\n    });\n\n    this.model.upload();\n\n    if (this.model.get('state') !== \"error\") {\n      // Remove errors\n      this._hideFileError();\n      this._hideTextError();\n    } else {\n      this._showTextError();\n    }\n  },\n\n\n  _initDropzone: function() {\n    var el = $('html')[0]; // :(\n    var self = this;\n\n    this.dragster = new Dragster(el);\n\n    $(el).bind(\"dragster:enter\", function (e) {\n      self._showDropzone();\n    });\n\n    $(el).bind(\"dragster:leave\", function (e) {\n      self._hideDropzone();\n    });\n\n    if (el.dropzone) { // avoid loading the dropzone twice\n      return;\n    }\n\n    this.dropzone = new Dropzone(el, {\n      url: ':)',\n      autoProcessQueue: false,\n      previewsContainer: false\n    });\n\n    this.dropzone.on('dragover', function() {\n      self._showDropzone();\n    });\n\n    this.dropzone.on(\"drop\", function (ev) {\n      var files = ev.dataTransfer.files;\n      self._onFileChanged(files);\n      self._hideDropzone();\n    });\n  },\n\n  _destroyDropzone: function() {\n    var el = $('html')[0]; // :(\n\n    if (this.dragster) {\n      this.dragster.removeListeners();\n      this.dragster.reset();\n      $(el).unbind('dragster:enter dragster:leave');\n    }\n\n    if (this.dropzone) {\n      this.dropzone.destroy();\n    }\n  },\n\n  _setValidFileExtensions: function(list) {\n    return RegExp(\"(\\.|\\/)(\" + list.join('|') + \")$\", \"i\");\n  },\n\n  _onFileChanged: function(files) {\n\n    if (files && files.length === 1) {\n      files = files[0];\n    }\n\n    this.model.set({\n      type: 'file',\n      value: files\n    });\n\n    if (this.model.get('state') !== \"error\") {\n      this._hideFileError();\n      this.model.set('state', 'selected');\n      this.model.upload();\n    } else {\n      this._showFileError();\n    }\n  },\n\n  _showTextError: function() {\n    this.$('.Form-inputError').addClass('is-visible');\n  },\n\n  _hideTextError: function() {\n    this.$('.Form-inputError').removeClass('is-visible');\n  },\n\n  _showDropzone: function() {\n    this.$('.Form-upload').addClass('is-dropping');\n    this._hideFileError();\n  },\n\n  _hideDropzone: function() {\n    this.$('.Form-upload').removeClass('is-dropping');\n  },\n\n  _showFileError: function() {\n    if (this.model.get('state') === \"error\") {\n      this.$('.js-fileError')\n        .text(this.model.get('get_error_text').what_about)\n        .show();\n      this.$('.js-fileLabel').hide();\n      this.$('.js-fileButton').addClass('Button--negative');\n    }\n  },\n\n  _hideFileError: function() {\n    this.$('.js-fileError').hide();\n    this.$('.js-fileLabel').show();\n    this.$('.js-fileButton').removeClass('Button--negative');\n  },\n\n  _onStateUploaded: function() {\n    this.collection.fetch();\n    this.model.setFresh({ kind: this.kind });\n    this.$(\".js-textInput\").val(\"\");\n  },\n\n  _onStateError: function() {\n    this._showFileError();\n    this.$(\".js-form\").show();\n    this.trigger(\"hide_loader\", this);\n    this.model.setFresh({ kind: this.kind });\n  },\n\n  _onChangeState: function() {\n    var state = this.model.get('state');\n\n    if (state === 'uploaded') {\n      this._onStateUploaded();\n    } else {\n      if (state === \"error\") {\n        this._onStateError();\n      } else if (state === 'idle' || state === \"uploading\" || state === \"selected\") {\n        this.$(\".js-form\").hide();\n        this.trigger(\"show_loader\", this);\n      } else {\n        this.$(\".js-form\").show();\n        this.trigger(\"hide_loader\", this);\n      }\n    }\n  },\n\n  clean: function() {\n    this._destroyDropzone();\n    this.$('.js-fileInput').unbind('change');\n    this.elder('clean');\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\nmodule.exports = cdb.core.View.extend({\n\n  _TEXTS: {\n    ok:           {\n      simple_icons: _t('Set image'),\n      pin_icons:    _t('Set image'),\n      maki_icons:   _t('Set image'),\n      your_icons:   _t('Set image'),\n      upload_file:  _t('Upload image'),\n      dropbox:      _t('Upload image'),\n      box:      _t('Upload image')\n    }\n  },\n\n  events: {\n    'click .js-ok': '_finish'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._template = cdb.templates.getTemplate('common/dialogs/map/image_picker/footer_template');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    var action = this._TEXTS.ok[this.model.get('pane')] || \"Set image\";\n    var options = _.extend(this.model.attributes, { action:  action });\n    var $el = $(this._template(options));\n\n    this.$el.html($el);\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n    this.model.bind('change:disclaimer', this._updateFooterInfo, this);\n  },\n\n  _updateFooterInfo: function() {\n    this.$el.find(\".js-footer-info\").html(this.model.get(\"disclaimer\"));\n  },\n\n  _finish: function(e) {\n    this.killEvent(e);\n\n    if (this.model.get(\"submit_enabled\")) {\n      this.trigger(\"finish\", this);\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-item':       '_onItemClick',\n    'click .js-your-icons': '_onYourIconsClick'\n  },\n\n  initialize: function() {\n    this.model = this.options.model;\n    this.kind  = this.options.kind;\n    this.collection = this.options.collection;\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/navigation_template');\n\n    this._preRender();\n    this._initBinds();\n  },\n\n  // It is necessary to add two static elements because\n  // they can't be removed/replaced using render method\n  // each time a change (in a model or a collection) happens.\n  // This is due to the behaviour of the CSS animations.\n  _preRender: function() {\n    var $uInner = $('<div>').addClass('u-inner');\n    var $filtersInner = $('<div>').addClass('Filters-inner');\n    this.$el.append($uInner.append($filtersInner));\n  },\n\n  render: function(m, c) {\n    this.clearSubViews();\n\n    this.$('.Filters-inner').html(\n      this.template({\n      dropbox_enabled: this.model.get(\"dropbox_enabled\"),\n      box_enabled: this.model.get(\"box_enabled\"),\n      pane: this.model.get('pane'),\n      kind: this.kind\n    }));\n\n    if (this.collection.where({ kind: this.kind }).length > 0) {\n      var type = \"your_icons\";\n      this.$el.find('[data-type=\"' + type + '\"]').removeClass(\"is-disabled\");\n    }\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:pane', this.render, this);\n    this.model.bind('change:pane', this._enableFilter, this);\n    this.add_related_model(this.model);\n  },\n\n  _onYourIconsClick: function(e) {\n    if (this.collection.where({ kind: this.kind }).length > 0) {\n      var type = $(e.target).data(\"type\")\n      this.model.set('pane', type);\n    }\n  },\n\n  _onItemClick: function(e) {\n    var type = $(e.target).data(\"type\")\n    this.model.set('pane', type);\n  },\n\n  _enableFilter: function(e) {\n    var type = this.model.get('pane');\n    var $el = this.$el.find('[data-type=\"' + type + '\"]');\n    $el.removeClass(\"is-disabled\");\n  }\n});\n\n\n\n",
    "var AssetsItemView = require('./assets_item_view');\n\nmodule.exports = AssetsItemView.extend({\n\n  events: {\n    'click': '_onClick'\n  },\n\n  _deleteAsset: function() {},\n  _openDropdown: function() {}\n\n});\n",
    "var Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * Model that let user upload files to our endpoints.\n *\n * NOTE: this model extends Backbone.Model instead of cdb.core.Model, because it's required for the\n * vendor/backbone-model-file-upload.\n */\nmodule.exports = Backbone.Model.extend({\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('asset', method);\n    return '/api/' + version + '/users/' + this.userId + '/assets'\n  },\n\n  fileAttribute: 'filename',\n\n  defaults: {\n    type: '',\n    value: '',\n    interval: 0,\n    progress: 0,\n    state: 'idle',\n    option: ''\n  },\n\n  initialize: function(val, opts) {\n    this.user = opts && opts.user;\n\n    if (!opts.userId) {\n      throw new Error('userId is required');\n    }\n\n    this.userId = opts.userId;\n\n    this._initBinds();\n    this._validate(this.attributes, { validate: true });\n  },\n\n  isValidToUpload: function() {\n    return this.get('value') && this.get('state') !== 'error';\n  },\n\n  setFresh: function(attributes) {\n    this.clear();\n    this.set(attributes);\n  },\n\n  _initBinds: function() {\n    this.bind('progress', function(progress) {\n      this.set({\n        progress: progress*100,\n        state: 'uploading'\n      });\n    }, this);\n\n    this.bind('change:value', function() {\n      if (this.get('state') === \"error\") {\n        this.set({ state: 'idle' })\n        this.unset('get_error_text', { silent: true });\n      }\n    }, this);\n\n    this.bind('error invalid', function(m, d) {\n      this.set({\n        state: 'error',\n        error_code: (d && d.error_code) || '',\n        get_error_text: {\n          title: 'Invalid import',\n          what_about: (d && d.msg) || ''\n        }\n      }, { silent: true });\n      // We need this, if not validate will run again and again and again... :(\n      this.trigger('change');\n    }, this);\n  },\n\n  validate: function(attrs) {\n    if (!attrs) return;\n\n    if (attrs.type === \"file\") {\n      // Number of files\n      if (attrs.value && attrs.value.length) {\n        return {\n          msg: \"Unfortunately only one file is allowed per upload\"\n        }\n      }\n      // File extension\n      var name = attrs.value.name;\n      var ext = name.substr(name.lastIndexOf('.') + 1);\n      if (ext) {\n        ext = ext.toLowerCase();\n      }\n      if (!_.contains([\"jpg\", \"png\", \"gif\", \"svg\"], ext)) {\n        return {\n          msg: \"Unfortunately this file extension is not allowed\"\n        }\n      }\n    }\n\n    if (attrs.type === \"url\") {\n      // Valid URL?\n      if (!Utils.isURL(attrs.value)) {\n        return {\n          msg: \"Unfortunately the URL provided is not valid\"\n        }\n      }\n    }\n\n  },\n\n  isValid: function() {\n    return this.get('value') && this.get('state') !== \"error\"\n  },\n\n  upload: function() {\n    var self = this;\n\n    var options = {\n      kind: this.get('kind')\n    };\n\n    if (this.get('type') === \"file\") {\n      options.filename = this.get('value');\n    } else if (this.get('type') === \"url\") {\n      options.url = this.get('value');\n    }\n\n    this.xhr = this.save(options, {\n      success: function(m) {\n        m.set('state', 'uploaded');\n      },\n      error: function(m, msg) {\n\n        var message = 'Unfortunately there was a connection error';\n\n        if (msg && msg.status === 429) {\n          var response = JSON.parse(msg.responseText);\n          message = response.error;\n        } else if (msg && msg.status === 400) {\n          var response = JSON.parse(msg.responseText);\n          message = response.error;\n        }\n\n        self.set({\n          state: 'error',\n          get_error_text: { title: 'There was an error', what_about: message }\n        });\n\n      },\n      complete: function() {\n        delete self.xhr;\n      }\n    });\n  },\n\n  stopUpload: function() {\n    if (this.xhr) this.xhr.abort();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar AssetsView = require('./assets_view');\nvar AssetsItemView = require('./assets_item_view');\n\nmodule.exports = AssetsView.extend({\n\n  className: 'AssetPane AssetPane-userIcons',\n\n  initialize: function() {\n    this.model = this.options.model;\n    this.template = cdb.templates.getTemplate('common/dialogs/map/image_picker/assets_template');\n\n    this.collection.bind('add remove reset', this.render, this);\n  },\n\n  _renderAssets: function() {\n\n    var self = this;\n    var items = this.collection.where({ kind: this.options.kind });\n\n    _(items).each(function(mdl) {\n      var item = new AssetsItemView({\n        className: 'AssetItem AssetItem-User',\n        model: mdl\n      });\n      item.bind('selected', self._selectItem, self);\n\n      self.$('ul').append(item.render().el);\n      self.addView(item);\n    });\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ImagePickerNavigationView = require('./image_picker/navigation_view');\nvar FooterView = require('./image_picker/footer_view');\nvar AssetsView = require('./image_picker/assets_view');\nvar UserIconsView = require('./image_picker/user_icons_view');\nvar UploadView = require('./image_picker/file_upload_view');\nvar DropboxView = require('./image_picker/dropbox_view');\nvar BoxView = require('./image_picker/box_view');\nvar makiIcons = require('./image_picker/data/maki_icons');\nvar patterns = require('./image_picker/data/patterns');\nvar pinMaps = require('./image_picker/data/pin_maps');\nvar simpleicon = require('./image_picker/data/simpleicon');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\nmodule.exports = BaseDialog.extend({\n\n  className: \"Dialog ImagePicker\",\n\n  initialize: function() {\n    this.elder('initialize');\n\n    this._validate();\n\n    this.kind = this.options.kind;\n    this.model = new cdb.core.Model({\n      disclaimer: \"\",\n      dropbox_enabled: cdb.config.get('dropbox_api_key') ? true : false,\n      box_enabled: cdb.config.get('box_api_key') ? true : false,\n      submit_enabled: false\n    });\n\n    this.collection = new cdb.admin.Assets([], {\n      user: this.options.user\n    });\n\n    this._template = cdb.templates.getTemplate('common/dialogs/map/image_picker_template');\n    this._initBinds();\n    this._onChangePane();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    this.$('.content').addClass('Dialog-content--expanded');\n    this._initViews();\n    this._initAssets();\n    return this;\n  },\n\n  _initAssets: function() {\n    this.collection.bind('add remove reset',  this._onAssetsFetched,  this);\n    this.collection.fetch();\n  },\n\n  _showLoader: function() {\n    var loader = this._contentPane.getPane(\"loader\");\n    if (loader) {\n      loader.show();\n    }\n  },\n\n  _hideLoader: function() {\n    var loader = this._contentPane.getPane(\"loader\");\n    if (loader) {\n      loader.hide();\n    }\n  },\n\n  _showUploadLoader: function() {\n    var loader = this._contentPane.getPane(\"upload_loader\");\n\n    if (loader) {\n      loader.show();\n    }\n  },\n\n  _hideUploadLoader: function() {\n    var loader = this._contentPane.getPane(\"upload_loader\");\n    if (loader) {\n      loader.hide();\n    }\n  },\n\n  _onAssetsFetched: function() {\n    this._hideLoader();\n\n    var items = this.collection.where({ kind: this.kind });\n\n    if (items.length === 0) {\n      if (this.kind === 'marker') {\n        this.model.set(\"pane\", \"simple_icons\");\n      } else {\n        this.model.set(\"pane\", \"patterns\");\n      }\n    } else {\n      this.model.set(\"pane\", \"your_icons\");\n    }\n\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render_content: function() {\n    return this._template({ kind: this.kind });\n  },\n\n  _initViews: function() {\n    this._renderContentPane();\n    this._renderNavigation();\n    this._renderTabPane();\n\n    this._renderLoader();\n    this._renderUploadLoader();\n\n    if (this.kind === \"marker\") {\n      this._renderSimpleiconPane();\n      this._renderPinIconsPane();\n      this._renderMakisPane();\n    } else if (this.kind === \"pattern\") {\n      this._renderPatternPane();\n    }\n\n    this._renderUserIconsPane();\n    this._renderFilePane();\n    this._renderDropboxPane();\n    this._renderBoxPane();\n\n    this._renderFooter();\n    this._contentPane.active('loader');\n  },\n\n  _renderFooter: function() {\n    this._footerView = new FooterView({\n      model: this.model\n    });\n\n    this._footerView.bind(\"finish\", this._ok, this);\n    this.$('.js-footer').append(this._footerView.render().el);\n\n    this.addView(this._footerView);\n  },\n\n  _renderTabPane: function() {\n    this.tabPane = new cdb.ui.common.TabPane({\n      el: this.$(\".AssetsContent\")\n    });\n\n    this.addView(this.tabPane);\n  },\n\n  _renderContentPane: function() {\n    this._contentPane = new cdb.ui.common.TabPane({\n      el: this.$('.js-content-container')\n    });\n\n    this.addView(this._contentPane);\n    this._contentPane.active(this.model.get('contentPane'));\n  },\n\n  _renderNavigation: function() {\n    var navigationView = new ImagePickerNavigationView({\n      el: this.$('.js-navigation'),\n      kind: this.kind,\n      collection: this.collection,\n      user: this.options.user,\n      model: this.model\n    });\n\n    navigationView.render();\n\n    this.addView(navigationView);\n  },\n\n  _renderPane: function(name, pane) {\n    pane.bind('fileChosen', this._onFileChosen, this);\n    pane.render();\n    this._addPane(name, pane);\n  },\n\n  _renderUploadLoader: function() {\n    this._addTab('upload_loader',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Uploading asset…',\n        quote: randomQuote()\n      })\n    );\n  },\n\n  _renderLoader: function() {\n    this._addTab('loader',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Loading assets…',\n        quote: randomQuote()\n      })\n    );\n  },\n\n  _renderPatternPane: function() {\n    var pane = new AssetsView({\n      model:      this.model,\n      collection: this.collection,\n      kind:       this.kind,\n      icons:      patterns.icons,\n      folder:     'patterns',\n      size:       ''\n    });\n\n    this._renderPane('patterns', pane);\n  },\n\n  _renderSimpleiconPane: function() {\n    var pane = new AssetsView({\n      model:      this.model,\n      collection: this.collection,\n      kind:       this.kind,\n      icons:      simpleicon.icons,\n      disclaimer: simpleicon.disclaimer,\n      folder:     'simpleicon',\n      size:       ''\n    });\n    this._renderPane('simple_icons', pane);\n  },\n\n  _renderMakisPane: function() {\n    var pane = new AssetsView({\n      model:      this.model,\n      collection: this.collection,\n      kind:       this.kind,\n      icons:      makiIcons.icons,\n      disclaimer: makiIcons.disclaimer,\n      folder:     'maki-icons',\n      size:       '18'\n    });\n\n    this._renderPane('maki_icons', pane);\n  },\n\n  _renderUserIconsPane: function() {\n    var pane = new UserIconsView({\n      model:      this.model,\n      collection: this.collection,\n      kind:       this.kind,\n      folder:     'your-icons'\n    });\n\n    this._renderPane('your_icons', pane);\n  },\n\n  _renderPinIconsPane: function() {\n    var pane = new AssetsView({\n      model:      this.model,\n      collection: this.collection,\n      kind:       this.kind,\n      icons:      pinMaps.icons,\n      disclaimer: pinMaps.disclaimer,\n      folder:     'pin-maps',\n      size:       ''\n    });\n\n    this._renderPane('pin_icons', pane);\n  },\n\n  _renderFilePane: function() {\n\n    var pane = new UploadView({\n      collection: this.collection,\n      kind:       this.kind,\n      user:       this.options.user\n    });\n\n    pane.bind('valueChange', this._onFileChosen, this);\n    pane.bind('show_loader', this._showUploadLoader, this);\n    pane.bind('hide_loader', this._hideUploadLoader, this);\n    this._renderPane('upload_file', pane);\n  },\n\n  _renderDropboxPane: function() {\n    if (this.model.get(\"dropbox_enabled\")) {\n\n      var pane = new DropboxView({\n        model:      this.model,\n        collection: this.collection,\n        kind:       this.kind,\n        user:       this.options.user\n      });\n\n      pane.bind('valueChange', this._onFileChosen, this);\n      pane.bind('show_loader', this._showUploadLoader, this);\n      pane.bind('hide_loader', this._hideUploadLoader, this);\n      this._renderPane('dropbox', pane);\n    }\n  },\n\n  _renderBoxPane: function() {\n    if (this.model.get(\"box_enabled\")) {\n\n      var pane = new BoxView({\n        model:      this.model,\n        collection: this.collection,\n        kind:       this.kind,\n        user:       this.options.user\n      });\n\n      pane.bind('valueChange', this._onFileChosen, this);\n      pane.bind('show_loader', this._showUploadLoader, this);\n      pane.bind('hide_loader', this._hideUploadLoader, this);\n      this._renderPane('box', pane);\n    }\n  },\n\n  _addPane: function(name, view) {\n    this.tabPane.addTab(name, view, {\n      active: this.model.get('pane') === name\n    });\n  },\n\n  _addTab: function(name, view) {\n    this._contentPane.addTab(name, view.render());\n    this.addView(view);\n  },\n\n  _validate: function() {\n    if (!this.options.user) {\n      throw new TypeError('user is required');\n    }\n\n    if (!this.options.kind) {\n      throw new Error('kind should be passed');\n    }\n  },\n\n  _initBinds: function() {\n    // Bug with binding... do not work with the usual one for some reason :(\n    this.model.bind('change:pane', this._onChangePane.bind(this));\n  },\n\n  _onChangePane: function() {\n    if (this.tabPane) {\n      this.tabPane.active(this.model.get('pane'));\n\n      this.model.set(\"submit_enabled\", false);\n      var activePane = this.tabPane.getActivePane();\n\n      if (activePane) {\n        this.model.set(\"disclaimer\", activePane.options.disclaimer);\n      }\n    }\n  },\n\n  _ok: function() {\n    this.trigger(\"fileChosen\", this.model.get(\"value\"));\n    this.close();\n  },\n\n  _onFileChosen: function() {\n    this.model.set(\"submit_enabled\", true);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\n\n/**\n * Scratch modal\n */\nmodule.exports = BaseDialog.extend({\n\n  events: cdb.core.View.extendEvents({\n    \"click .js-option\" : \"_onOptionClick\",\n    \"click .js-skip\"   : \"_onSkipClick\"\n  }),\n\n  options: {\n    skipDisabled: false\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.table) {\n      throw new TypeError('table is required');\n    }\n\n    this.table = this.options.table;\n    this._template = cdb.templates.getTemplate('common/dialogs/map/scratch_view_template');\n\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    return this;\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render_content: function() {\n    return this._template({\n      name: this.table.get(\"name\"),\n      skipDisabled: this.options.skipDisabled \n    });\n  },\n\n  _onSkipClick: function(e) {\n    this.killEvent(e);\n    this.close();\n    this.trigger(\"skip\", this);\n  },\n\n  _onOptionClick: function(e) {\n    this.killEvent(e);\n    this.close();\n    this.trigger(\"newGeometry\", $(e.target).closest('.js-option').data(\"type\"));\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ChooseKeyColumnsView = require('./choose_key_columns_view');\nvar SelectColumns = require('./select_columns_model');\n\nmodule.exports = cdb.core.Model.extend({\n\n  INSTRUCTIONS_SAFE_HTML: 'Select the dataset on the right that you want to merge the left with. ' +\n    'You can only merge datasets by joining by columns of the same type (e.g. number to a number).',\n\n  defaults: {\n    user: undefined,\n    isReadyForNextStep: false,\n    excludeColumns: [],\n    leftTable: undefined,\n    leftColumns: undefined,\n    rightTableData: undefined,\n    rightColumns: undefined\n  },\n\n  initialize: function() {\n    this._initColumns();\n  },\n\n  createView: function() {\n    // Reset state\n    this.set('gotoNextStep', false);\n    var leftColumns = this.get('leftColumns');\n    leftColumns.each(function(m) {\n      m.unset('selected');\n    });\n    this.get('rightColumns').reset(); // columns are fetched by view\n    this._resetSorting(leftColumns);\n    this._resetSorting(this.get('rightColumns'));\n\n    return new ChooseKeyColumnsView({\n      model: this\n    });\n  },\n\n  changeRightTable: function(tableData) {\n    this.get('rightColumns').reset();\n    this.set('rightTableData', tableData);\n\n    // TODO: extracted from old code, cdb.admin.TableColumnSelector._getColumns,\n    //   isnt there some better way to get the schema/columns?\n    $.ajax({\n      url: cdb.config.prefixUrl() + '/api/v1/tables/' + tableData.id,\n      dataType: 'jsonp',\n      success: this._onFetchedColumns.bind(this)\n    });\n  },\n\n  _onFetchedColumns: function(results) {\n    var filteredColumns = this._filterColumns(results.schema);\n    this.get('rightColumns').reset(filteredColumns);\n    var selectedLeftColumn = this.selectedItemFor('leftColumns');\n    if (selectedLeftColumn) {\n      this.disableRightColumnsNotMatchingType(selectedLeftColumn.get('type'));\n    }\n  },\n\n  disableRightColumnsNotMatchingType: function(leftKeyColumnType) {\n    this.get('rightColumns').each(function(column) {\n      var shouldDisable = column.get('type') !== leftKeyColumnType;\n      if (shouldDisable && column.get('selected')) {\n        // Don't leave the column selected if should be disabled\n        column.set('selected', false);\n      }\n      column.set('disabled', shouldDisable);\n    });\n  },\n\n  assertIfReadyForNextStep: function() {\n    var isReady = !!(this.selectedItemFor('leftColumns') &&\n                  this.selectedItemFor('rightColumns') &&\n                  this.get('rightTableData'));\n    this.set('isReadyForNextStep', isReady);\n  },\n\n  nextStep: function() {\n    return new this.constructor.nextStep({\n      user: this.get('user'),\n      leftTable: this.get('leftTable'),\n      leftColumns: this.get('leftColumns'),\n      leftKeyColumn: this.selectedItemFor('leftColumns').clone(),\n      rightKeyColumn: this.selectedItemFor('rightColumns').clone(),\n      rightColumns: this.get('rightColumns'),\n      rightTableData: this.get('rightTableData')\n    });\n  },\n\n  selectedItemFor: function(collectionName) {\n    return this.get(collectionName).find(function(column) {\n      return column.get('selected');\n    });\n  },\n\n  _initColumns: function() {\n    var filteredLeftColumns = this._filterColumns(this.get('leftTable').get('schema'));\n    this.set('leftColumns', new Backbone.Collection(filteredLeftColumns));\n    this.set('rightColumns', new Backbone.Collection([]));\n  },\n\n  _filterColumns: function(tableSchema) {\n    var excludeColumns = this.get('excludeColumns');\n\n    return _.chain(tableSchema)\n      .map(function(columnData) {\n        return {\n          // TODO: why don't we use a proper model for schema, to provide convenient method to get columns as a collection already?\n          name: columnData[0],\n          type: columnData[1]\n        };\n      })\n      .reject(function(column) {\n        return _.contains(excludeColumns, column.name);\n      })\n      .value();\n  },\n\n  _resetSorting: function(columns) {\n    // May been set on next step, so reset sorters if going back:\n    columns.comparator = function(column) {\n      return column.get('name');\n    };\n    columns.sort();\n  }\n\n}, {\n  header: {\n    icon: 'CDB-IconFont-play',\n    title: 'Choose merge column'\n  },\n  nextStep: SelectColumns\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ColumnsSelectorView = require('../columns_selector_view');\nvar TablesSelectorView = require('../tables_selector_view');\nvar FooterView = require('../footer_view');\nvar FooterInfoView = require('./footer_info_view');\n\n/**\n * View to choose the key columns (and implicitly the right table).\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initViews();\n    this._initBinds();\n  },\n\n  render: function() {\n    var $el = $(\n      this.getTemplate('common/dialogs/merge_datasets/column_merge/choose_key_columns')({\n        leftTableName: this.model.get('leftTable').get('name')\n      })\n    );\n    $el.find('.js-left-table').append(this._leftTableComboView.render().$el);\n    $el.find('.js-left-columns').append(this._leftColumnsView.render().$el);\n    $el.find('.js-right-tables').append(this._rightTableSelectorView.render().$el);\n    $el.find('.js-right-columns').append(this._rightColumnsView.render().$el);\n    $el.append(this._footerView.render().$el);\n    this.$el.html($el);\n\n    return this;\n  },\n\n  _initViews: function() {\n    var leftTableName = this.model.get('leftTable').get('name');\n\n    this._leftTableComboView = new cdb.forms.Combo({\n      className: 'Select',\n      width: '100%',\n      disabled: true,\n      extra: [leftTableName]\n    });\n    this.addView(this._leftTableComboView);\n\n    this._leftColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('leftColumns'),\n      excludeFilter: this._columnsExcludeFilter,\n      selectorType: 'radio'\n    });\n    this.addView(this._leftColumnsView);\n\n    this._rightTableSelectorView = new TablesSelectorView({\n      excludeFilter: function(vis) {\n        return vis.get('name') === leftTableName;\n      }\n    });\n    this.addView(this._rightTableSelectorView);\n\n    this._rightColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('rightColumns'),\n      excludeFilter: this._columnsExcludeFilter,\n      selectorType: 'radio',\n      loading: 'datasets'\n    });\n    this.addView(this._rightColumnsView);\n\n    this._footerView = new FooterView({\n      model: this.model,\n      infoView: new FooterInfoView({\n        model: this.model\n      })\n    });\n    this.addView(this._footerView);\n  },\n\n  _columnsExcludeFilter: function(column) {\n    return column.get('name') === 'the_geom';\n  },\n\n  _initBinds: function() {\n    var leftColumns = this.model.get('leftColumns');\n    leftColumns.bind('change:selected', this._onChangeSelectedLeftColumn, this);\n    this.add_related_model(leftColumns);\n\n    var rightColumns = this.model.get('rightColumns');\n    rightColumns.bind('change:selected', this._onChangeSelectedRightColumn, this);\n    rightColumns.bind('reset', this._assertIfReadyForNextStep, this);\n    this.add_related_model(rightColumns);\n\n    var rightTablesModel = this._rightTableSelectorView.model;\n    rightTablesModel.bind('change:tableData', this._onChangeRightTableData, this);\n    this.add_related_model(rightTablesModel);\n  },\n\n  _onChangeSelectedLeftColumn: function(m, isSelected) {\n    if (isSelected) {\n      this.model.disableRightColumnsNotMatchingType(m.get('type'));\n    }\n    this._assertIfReadyForNextStep();\n  },\n\n  _onChangeSelectedRightColumn: function() {\n    this._assertIfReadyForNextStep();\n  },\n\n  _assertIfReadyForNextStep: function() {\n    this.model.assertIfReadyForNextStep();\n  },\n\n  _onChangeRightTableData: function(model, tableData) {\n    this._rightColumnsView.model.set('loading', 'columns');\n    this.model.changeRightTable(tableData);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ChooseKeyColumnsModel = require('./choose_key_columns_model');\n\n/**\n * Entry point model that represents the merge flavor of doing a column merge.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  ILLUSTRATION_ICON_TYPE: 'IllustrationIcon--alert',\n  ICON: 'CDB-IconFont-mergeColumns',\n  TITLE: 'Column join',\n  DESC: 'Merge two datasets based on a shared value (ex. ISO codes in both datasets)',\n\n  defaults: {\n    user: undefined,\n    table: undefined,\n    excludeColumns: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.table) throw new Error('table is required');\n    if (!attrs.excludeColumns || _.isEmpty(attrs.excludeColumns)) cdb.log.error('excludeColumns was empty');\n  },\n\n  isAvailable: function() {\n    // Need at least one more column than the_geom to do a column merge\n    return _.chain(this.get('table').get('schema'))\n      .map(this._columnDataName)\n      .difference(this.get('excludeColumns'))\n      .any(this._isntTheGeomName)\n      .value();\n  },\n\n  _columnDataName: function(columnData) {\n    return columnData[0]; //name\n  },\n\n  _isntTheGeomName: function(columnName) {\n    return columnName !== 'the_geom';\n  },\n\n  firstStep: function() {\n    return new ChooseKeyColumnsModel({\n      user: this.get('user'),\n      leftTable: this.get('table'),\n      excludeColumns: this.get('excludeColumns')\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to indicate the selected key columns relationship.\n * Shared for both step 1 and 2\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    var leftKeyColumn = this.model.get('leftKeyColumn');\n    var rightKeyColumn = this.model.get('rightKeyColumn');\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/column_merge/footer_info')({\n        leftKeyColumnName: leftKeyColumn ? leftKeyColumn.get('name') : '',\n        rightKeyColumnName: rightKeyColumn ? rightKeyColumn.get('name') : ''\n      })\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    if (this.model.selectedItemFor) {\n      var leftColumns = this.model.get('leftColumns');\n      leftColumns.bind('change:selected', this._onChangeLeftColumn, this);\n      this.add_related_model(leftColumns);\n\n      var rightColumns = this.model.get('rightColumns');\n      rightColumns.bind('change:selected', this._onChangeRightColumn, this);\n      this.add_related_model(rightColumns);\n    }\n  },\n\n  _onChangeLeftColumn: function() {\n    var m = this.model.selectedItemFor('leftColumns');\n    this.$('.js-left-key-column').text(m ? m.get('name') : '');\n  },\n\n  _onChangeRightColumn: function() {\n    var m = this.model.selectedItemFor('rightColumns');\n    this.$('.js-right-key-column')\n      .text(m ? m.get('name') : '')\n      .toggleClass('is-placeholder', !m);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n// Used for both left and right table\nvar selectColumn = function(tableName, otherTableName, columnName) {\n  if (columnName === 'the_geom') {\n    return [\n      'CASE WHEN ' + tableName + '.' + columnName + ' IS NULL THEN',\n      otherTableName + '.' + columnName,\n      'ELSE',\n      tableName + '.' + columnName,\n      'END AS',\n        columnName\n    ];\n  } else {\n    return [ tableName + '.' + columnName ];\n  }\n};\n\n// SQL query as taken from old code, cdb.admin.MergeTablesDialog\n// Cleaned up to remove noise and avoid string concatenation to be more legible.\nmodule.exports = function(d) {\n  var leftTableName = d.leftTableName;\n  var leftColumnsNames = d.leftColumnsNames;\n  var leftKeyColumnName = d.leftKeyColumnName;\n  var leftKeyColumnType = d.leftKeyColumnType;\n\n  var rightTableName = d.rightTableName;\n  var rightColumnsNames = d.rightColumnsNames;\n  var rightKeyColumnName = d.rightKeyColumnName;\n  var rightKeyColumnType = d.rightKeyColumnType;\n\n  // Add left table columns\n  var sql = ['SELECT'];\n  var selects = _.map(leftColumnsNames, function(columnName) {\n    return selectColumn(leftTableName, rightTableName, columnName).join(' ');\n  });\n\n  // Add right table columns\n  selects.push.apply(selects,\n    _.map(rightColumnsNames, function(columnName) {\n      var colSQL = selectColumn(rightTableName, leftTableName, columnName);\n\n      var isColumnPresentInLeftTable = _.any(leftColumnsNames, function(leftColumnName) {\n        return columnName === leftColumnName;\n      });\n      if (isColumnPresentInLeftTable) {\n        colSQL = colSQL.concat('AS ' + rightTableName + '_' + columnName);\n      }\n\n      return colSQL.join(' ');\n    })\n  );\n\n  // Make sure all select fields are comma separated\n  sql.push(_.flatten(selects).join(', '));\n\n  // LEFT JOIN\n  sql.push('FROM ' + leftTableName + ' FULL OUTER JOIN ' + rightTableName + ' ON');\n\n  // JOIN FIELD\n  if (leftKeyColumnType === 'string' && rightKeyColumnType === 'string') {\n    sql.push(\n      'LOWER(TRIM(' + leftTableName + '.' + leftKeyColumnName + '))',\n      '=',\n      'LOWER(TRIM(' + rightTableName + '.' + rightKeyColumnName + '))'\n    );\n  } else {\n    sql.push(\n      leftTableName + '.' + leftKeyColumnName,\n      '=',\n      rightTableName + '.' + rightKeyColumnName\n    );\n  }\n\n  return sql.join(' ');\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar SelectColumnsView = require('./select_columns_view');\nvar generateColumnMergeSQL = require('./generate_column_merge_sql');\nvar MergeModel = require('../merge_step_model');\n\n/**\n * View for 2nd step of a column merge, where the user should select the column fields to merge\n */\nmodule.exports = cdb.core.Model.extend({\n\n  INSTRUCTIONS_SAFE_HTML: 'Choose other columns you want in your dataset.',\n\n  defaults: {\n    user: undefined,\n    isReadyForNextStep: true,\n    leftTable: undefined,\n    leftKeyColumn: undefined,\n    leftColumns: undefined,\n    rightTableData: undefined,\n    rightColumns: undefined,\n    rightKeyColumn: undefined\n  },\n\n  createView: function() {\n    // Reset state\n    this.set('gotoNextStep', false);\n    this._resetColumns(this.get('leftColumns'), function(column) {\n      column.set('selected', true);\n    });\n    this._resetColumns(this.get('rightColumns'), function(column) {\n      if (column.get('name') !== 'the_geom') {\n        column.set('selected', true);\n      }\n      column.set('disabled', false);\n    });\n\n    return new SelectColumnsView({\n      model: this\n    });\n  },\n\n  onlyAllowOneSelectedTheGeomColumn: function(column, isSelected) {\n    if (column.get('name') !== 'the_geom') return;\n\n    var leftColumn = this._theGeomColumnFor('leftColumns');\n    var rightColumn = this._theGeomColumnFor('rightColumns');\n\n    if (column === leftColumn) {\n      leftColumn.set('selected', isSelected);\n      rightColumn.set('selected', !isSelected);\n    } else if (column === rightColumn) {\n      leftColumn.set('selected', !isSelected);\n      rightColumn.set('selected', isSelected);\n    }\n  },\n\n  nextStep: function() {\n    var leftKeyColumn = this.get('leftKeyColumn');\n    var rightKeyColumn = this.get('rightKeyColumn');\n\n    var sql = generateColumnMergeSQL({\n      leftTableName: this.get('leftTable').get('name'),\n      leftKeyColumnName: leftKeyColumn.get('name'),\n      leftKeyColumnType: leftKeyColumn.get('type'),\n      leftColumnsNames: this._selectedColumnsNamesFor('leftColumns'),\n      rightTableName: this.get('rightTableData').name,\n      rightKeyColumnName: rightKeyColumn.get('name'),\n      rightKeyColumnType: rightKeyColumn.get('type'),\n      rightColumnsNames: this._selectedColumnsNamesFor('rightColumns')\n    });\n\n    return new this.constructor.nextStep({\n      user: this.get('user'),\n      tableName: this.get('leftTable').get('name'),\n      sql: sql\n    });\n  },\n\n  _selectedColumnsNamesFor: function(collectionName) {\n    return this.get(collectionName)\n      .chain()\n      .filter(function(column) {\n        return column.get('selected');\n      }).\n      map(function(column) {\n        return column.get('name');\n      })\n      .value();\n  },\n\n  _theGeomColumnFor: function(which) {\n    return this.get(which).find(function(column) {\n      return column.get('name') === 'the_geom';\n    });\n  },\n\n  _resetColumns: function(columns, eachReset) {\n    columns.comparator = function(column) {\n      var columnName = column.get('name');\n      return columnName === 'the_geom' ? '00000' : columnName;\n    };\n    columns.each(eachReset, this);\n    columns.sort();\n  }\n\n}, {\n  header: {\n    icon: 'CDB-IconFont-wizard',\n    title: 'Choose the rest to add'\n  },\n  nextStep: MergeModel\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ColumnsSelectorView = require('../columns_selector_view');\nvar StickyHeaderView = require('../sticky_header_view');\nvar FooterView = require('../footer_view');\nvar FooterInfoView = require('./footer_info_view');\n\n/**\n * View to select the columns to merge.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initViews();\n    this._initBinds();\n  },\n\n  render: function() {\n    var $el = $(\n      this.getTemplate('common/dialogs/merge_datasets/column_merge/select_columns')({\n        leftKeyColumn: this.model.get('leftKeyColumn'),\n        rightKeyColumn: this.model.get('rightKeyColumn')\n      })\n    );\n    $el.find('.js-sticky-header').append(this._stickyHeaderView.render().$el);\n    $el.find('.js-left-table').append(this._leftTableComboView.render().$el);\n    $el.find('.js-left-columns').append(this._leftColumnsView.render().$el);\n    $el.find('.js-right-table').append(this._rightTableComboView.render().$el);\n    $el.find('.js-right-columns').append(this._rightColumnsView.render().$el);\n    $el.append(this._footerView.render().$el);\n    this.$el.html($el);\n\n    return this;\n  },\n\n  onChangeKeyColumnsVisiblity: function() {\n    this._stickyHeaderView.$el.slideToggle(200);\n  },\n\n  _initViews: function() {\n    this._stickyHeaderView = new StickyHeaderView({\n      leftKeyColumn: this.model.get('leftKeyColumn'),\n      rightKeyColumn: this.model.get('rightKeyColumn')\n    });\n    this.addView(this._stickyHeaderView);\n\n    this._leftTableComboView = new cdb.forms.Combo({\n      className: 'Select',\n      width: '100%',\n      disabled: true,\n      extra: [this.model.get('leftTable').get('name')]\n    });\n    this.addView(this._leftTableComboView);\n\n    this._leftColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('leftColumns'),\n      selectorType: 'switch'\n    });\n    this.addView(this._leftColumnsView);\n\n    this._rightTableComboView = new cdb.forms.Combo({\n      className: 'Select',\n      width: '100%',\n      disabled: true,\n      extra: [this.model.get('rightTableData').name]\n    });\n    this.addView(this._rightTableComboView);\n\n    this._rightColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('rightColumns'),\n      selectorType: 'switch'\n    });\n    this.addView(this._rightColumnsView);\n\n    this._footerView = new FooterView({\n      model: this.model,\n      nextLabel: 'Merge datasets',\n      infoView: new FooterInfoView({\n        model: this.model\n      })\n    });\n    this.addView(this._footerView);\n  },\n\n  _initBinds: function() {\n    this.model.get('leftColumns').bind('change:selected', this._onChangeSelectedColumn, this);\n    this.add_related_model(this.model.get('leftColumns'));\n\n    this.model.get('rightColumns').bind('change:selected', this._onChangeSelectedColumn, this);\n    this.add_related_model(this.model.get('rightColumns'));\n  },\n\n  _onChangeSelectedColumn: function(column, isSelected) {\n    this.model.onlyAllowOneSelectedTheGeomColumn(column, isSelected);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to select one or multiple columns.\n *  - For only allowing selecting one set selectorType to 'radio'\n *  - For allowing multiple selections set selectorType to 'switch'\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'List-row',\n\n  events: {\n    'click': '_onClick',\n    'mouseenter': '_onMouseEnter',\n    'mouseleave': '_onMouseLeave'\n  },\n\n  initialize: function() {\n    if (!this.options.selectorType) throw new Error('selectorType is required');\n\n    this.model = new cdb.core.Model({\n      type: this.options.selectorType\n    });\n\n    this.column = this.options.column;\n\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/column_selector')({\n        selectorType: this.model.get('type'),\n        columnName: this.column.get('name'),\n        columnType: this.column.get('type')\n      })\n    );\n\n    if (!this._tooltip) {\n      this._tooltip = new cdb.common.TipsyTooltip({\n        el: this.el,\n        offset: -20,\n        trigger: 'manual',\n        fallback: 'Your column type is not compatible with the column you have selected in the left column'\n      });\n      this.addView(this._tooltip);\n    }\n\n    this._onChangeSelected(this.column, this.column.get('selected'));\n    this._onChangeDisabled(this.column, this.column.get('disabled'));\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.column.bind('change:selected', this._onChangeSelected, this);\n    this.column.bind('change:disabled', this._onChangeDisabled, this);\n    this.add_related_model(this.column);\n  },\n\n  _onChangeSelected: function(column, isSelected) {\n    if (this.model.get('type') === 'radio') {\n      this.$el.toggleClass('is-selected', !!isSelected);\n    }\n    this.$('.js-radio').toggleClass('is-checked', !!isSelected);\n    this.$('.js-switch').prop('checked', !!isSelected);\n  },\n\n  _onChangeDisabled: function(column, isDisabled) {\n    isDisabled = !!isDisabled;\n    this.$el.toggleClass('is-disabled', isDisabled);\n  },\n\n  _onClick: function(ev) {\n    this.killEvent(ev);\n    if (!this._isDisabled()) {\n      var inverseSelectedVal = !this.column.get('selected');\n\n      // radio buttons can only be selected, unselection of other items should be handled by collection/parent\n      if (inverseSelectedVal || this.model.get('type') !== 'radio') {\n        this.column.set('selected', inverseSelectedVal);\n      }\n    }\n  },\n\n  _onMouseEnter: function() {\n    if (this._isDisabled()) {\n      this._tooltip.showTipsy();\n    }\n  },\n\n  _onMouseLeave: function() {\n    this._tooltip.hideTipsy();\n  },\n\n  _isDisabled: function() {\n    return this.column.get('disabled');\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ColumnSelectorView = require('./column_selector_view');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * View to select an individual column.\n * The selector type is passed to the child view of class ColumnSelectorView.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'List',\n\n  events: {\n    'click .js-select-all': '_onClickSelectAll',\n    'click': 'killEvent'\n  },\n\n  initialize: function() {\n    this.model = new cdb.core.Model({\n      showSelectAllToggle: this.options.selectorType === 'switch' || false,\n      enforceSingleSelected: this.options.selectorType === 'radio' || false,\n      loading: this.options.loading\n    });\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html('');\n\n    if (this.collection.length > 0) {\n      var chain = this.collection.chain();\n      if (this.options.excludeFilter) {\n        chain = chain.reject(this.options.excludeFilter);\n      }\n      chain.each(this._addColumnSelectorView, this);\n\n      this._renderSelectAllToggle();\n    } else if (this.model.get('loading')) {\n      this._renderLoading();\n    }\n\n    return this;\n  },\n\n  _renderLoading: function() {\n    this.$el.html(\n      this.getTemplate('common/templates/loading')({\n        title: 'Fetching ' + this.model.get('loading'),\n        quote: randomQuote()\n      })\n    );\n  },\n\n  _addColumnSelectorView: function(model) {\n    var view = new ColumnSelectorView(\n      _.chain({\n        column: model\n      })\n      .extend(this.options)\n      .omit(['el', 'collection'])\n      .value()\n    );\n    this.addView(view);\n    this.$el.append(view.render().$el);\n  },\n\n  _renderSelectAllToggle: function() {\n    if (this.model.get('showSelectAllToggle')) {\n      this.$el.append(\n        this.getTemplate('common/dialogs/merge_datasets/columns_selector_toggle_all')({\n          areAllSelected: this._areAllSelected()\n        })\n      );\n    }\n  },\n\n  _initBinds: function() {\n    this.collection.bind('reset', this.render, this);\n    this.collection.bind('change:selected', this._onChangeSelected, this);\n    this.add_related_model(this.collection);\n\n    this.model.bind('change:loading', this.render, this);\n  },\n\n  _onChangeSelected: function(model, isSelected) {\n    if (isSelected && this.model.get('enforceSingleSelected')) {\n      this._unselectAllExcept(model);\n      this.collection.sort();\n      this.render(); // to re-render with new sort order\n    }\n    this.$('.js-select-all input').prop('checked', this._areAllSelected());\n  },\n\n  _unselectAllExcept: function(exceptionModel) {\n    this.collection.each(function(m) {\n      if (m !== exceptionModel) {\n        m.set('selected', false);\n      }\n    });\n  },\n\n  _onClickSelectAll: function() {\n    var invertedAllSelected = !this._areAllSelected();\n    this.collection.chain()\n    .reject(function(m) {\n      return m.get('disabled');\n    })\n    .each(function(m) {\n      m.set('selected', invertedAllSelected);\n    });\n  },\n\n  _areAllSelected: function() {\n    return this.collection.all(function(m) {\n      return m.get('selected');\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View that represents the footer.\n * May contain an additional info view with more state details depending on context.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-next': '_onClickNext'\n  },\n\n  initialize: function() {\n    if (this.options.infoView) {\n      this.addView(this.options.infoView);\n    }\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/footer')({\n        nextLabel: this.options.nextLabel || 'next step'\n      })\n    );\n    this._onChangeIsReadyForNextStep(this.model, this.model.get('isReadyForNextStep'));\n    this._maybeRenderInfoView();\n    return this;\n  },\n\n  _maybeRenderInfoView: function() {\n    if (this.options.infoView) {\n      this.$('.js-info').append(this.options.infoView.render().$el);\n    }\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:isReadyForNextStep', this._onChangeIsReadyForNextStep, this);\n  },\n\n  _onChangeIsReadyForNextStep: function(model, isReady) {\n    this.$('.js-next').toggleClass('is-disabled', !isReady);\n  },\n\n  _onClickNext: function() {\n    if (this.model.get('isReadyForNextStep')) {\n      this.model.set('gotoNextStep', true);\n    }\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ColumnMergeModel = require('./column_merge/column_merge_model');\nvar SpatialMergeModel = require('./spatial_merge/spatial_merge_model');\n\n/**\n * View model for merge datasets view.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  excludeColumns: [\n    'cartodb_id',\n    'created_at',\n    'updated_at',\n    'the_geom_webmercator',\n    'cartodb_georef_status'\n  ],\n\n  defaults: {\n    mergeFlavors: undefined, // Collection, created with model\n    prevSteps: [],\n    currentStep: undefined,\n    table: undefined,\n    user: undefined\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.table) throw new Error('table is required');\n    if (!attrs.user) throw new Error('user is required');\n\n    var data = {\n      user: this.get('user'),\n      table: this.get('table'),\n      excludeColumns: this.excludeColumns\n    };\n    this.set('mergeFlavors', new Backbone.Collection([\n      new ColumnMergeModel(data),\n      new SpatialMergeModel(data)\n    ]));\n  },\n\n  headerSteps: function() {\n    var steps = [];\n\n    var currentStep = this.get('currentStep');\n    var firstStep = this.get('prevSteps')[0] || currentStep;\n    var isFinished = true;\n    if (firstStep) {\n      var Model = firstStep.constructor;\n      while (Model) {\n        if (Model.header) {\n          var isCurrent = Model === currentStep.constructor;\n          if (isCurrent) {\n            isFinished = false;\n          }\n          steps.push(\n            _.extend({\n              isFinished: isFinished,\n              isCurrent: isCurrent\n            }, Model.header)\n          );\n        }\n\n        Model = Model === Model.nextStep ? undefined : Model.nextStep;\n      }\n    }\n\n    return steps;\n  },\n\n  gotoNextStep: function() {\n    var currentStep = this.get('currentStep');\n    var nextStep = currentStep.nextStep();\n    this.set({\n      prevSteps: this.get('prevSteps').concat(currentStep),\n      currentStep: nextStep\n    });\n  },\n\n  gotoPrevStep: function() {\n    this.set('currentStep', this.get('prevSteps').pop());\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar BaseDialog = require('../../views/base_dialog/view.js');\nvar MergeDatasetsModel = require('./merge_datasets_model.js');\nvar MergeFlavorView = require('./merge_flavor_view');\n\n/**\n* Shows a dialog to start merging two tables\n*  new MergeDatasetsDialog({\n*    model: table\n*  })\n* Migrated from old code.\n*/\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-back': '_onBackClick'\n  }),\n\n  initialize: function() {\n    this.options.clean_on_hide = true;\n    this.options.enter_to_confirm = false;\n    this.elder('initialize');\n\n    this.model = new MergeDatasetsModel({\n      table: this.options.table,\n      user: this.options.user\n    });\n\n    this._initBinds();\n  },\n\n  /**\n   * @override BaseDialog.prototype.render\n   */\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('Dialog-contentWrapper');\n\n    // Let the current step view know when the scroll has crossed the expected threshold for the key columns to be visible\n    this.$('.js-scroll').off('scroll');\n    if (this._stepView && this._stepView.onChangeKeyColumnsVisiblity) {\n      this._areKeyColumnsVisible = true;\n      var self = this;\n      this.$('.js-scroll').on('scroll', function(ev) {\n        var areKeyColumnsVisible = ev.target.scrollTop <= 175;\n        if (areKeyColumnsVisible !== self._areKeyColumnsVisible) {\n          self._areKeyColumnsVisible = areKeyColumnsVisible;\n          self._stepView.onChangeKeyColumnsVisiblity(areKeyColumnsVisible);\n        }\n      });\n    }\n\n    return this;\n  },\n\n  render_content: function() {\n    this.clearSubViews();\n    var $el;\n    var defaultTemplate = this.getTemplate('common/dialogs/merge_datasets/merge_datasets_content');\n\n    var currentStep = this.model.get('currentStep');\n    if (currentStep) {\n      var $step = this._$renderedStep(currentStep);\n      if (currentStep.get('skipDefaultTemplate')) {\n        // Render the view as content w/o wrapping it in the default template\n        return $step;\n      }\n\n      $el = $(defaultTemplate({\n        currentStep: currentStep,\n        headerSteps: this.model.headerSteps()\n      }));\n      $el.find('.js-details').append($step);\n    } else {\n      $el = $(defaultTemplate({\n        currentStep: undefined\n      }));\n      var $mergeFlavorsList = $el.find('.js-flavors');\n      $mergeFlavorsList.append.apply($mergeFlavorsList, this._$renderedMergeFlavors());\n    }\n\n    return $el;\n  },\n\n  _$renderedMergeFlavors: function() {\n    return this.model.get('mergeFlavors')\n      .map(function(model) {\n        var view = new MergeFlavorView({\n          model: model\n        });\n        this.addView(view);\n        return view.render().$el;\n      }, this);\n  },\n\n  _onChangeSelectedMergeFlavor: function(model, wasSelected) {\n    // Only change to next step if there's one selected\n    if (wasSelected) {\n      // reset selected state, so if/when user goes back to start view can select again\n      model.unset('selected');\n\n      // Set new current step\n      var firstStep = model.firstStep();\n      this.model.set('currentStep', firstStep);\n\n      // Event tracking \"Use visual merge\"\n      cdb.god.trigger('metrics', 'visual_merge', {\n        email: window.user_data.email\n      });\n    }\n  },\n\n  _initBinds: function() {\n    var mergeFlavors = this.model.get('mergeFlavors');\n    mergeFlavors.bind('change:selected', this._onChangeSelectedMergeFlavor, this);\n    this.add_related_model(mergeFlavors);\n\n    this.model.bind('change:currentStep', this.render, this);\n  },\n\n  _onChangeGotoNextStep: function(model, isTrue) {\n    if (isTrue) {\n      this.model.gotoNextStep();\n    }\n  },\n\n  _$renderedStep: function(step) {\n    // Clean up prev step, if there is any\n    if (this._stepView) {\n      this._stepView.clean();\n      this.removeView(this._stepView);\n\n      this._stepModel.unbind('change:gotoNextStep');\n      this._models = _.without(this._models, this._stepModel); // TODO: why no this.remove_related_model?\n    }\n\n    this._stepModel = step;\n    this._stepModel.bind('change:gotoNextStep', this._onChangeGotoNextStep, this);\n    this.add_related_model(this._stepModel);\n\n    this._stepView = step.createView();\n    this._stepView.bind('clickedNext', this._onClickNext, this);\n    this.addView(this._stepView);\n    return this._stepView.render().$el;\n  },\n\n  _onClickNext: function(e) {\n    this.killEvent(e);\n    this.model.gotoNextStep();\n  },\n\n  _onBackClick: function(e) {\n    this.killEvent(e);\n    this.model.gotoPrevStep();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'OptionCard OptionCard--blocky',\n\n  events: {\n    'click': '_onClick'\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/merge_flavor')({\n        illustrationIconType: this.model.ILLUSTRATION_ICON_TYPE,\n        icon: this.model.ICON,\n        title: this.model.TITLE,\n        desc: this.model.DESC\n      })\n    );\n\n    if (!this.model.isAvailable()) {\n      this.$el.addClass('is-disabled');\n    }\n\n    return this;\n  },\n\n  _onClick: function(ev) {\n    this.killEvent(ev);\n    if (this.model.isAvailable()) {\n      this.model.set('selected', true);\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar MergeStepView = require('./merge_step_view');\n\n/**\n * Last step in the merge flows, managed the actual merge flow\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    skipDefaultTemplate: true,\n    user: undefined,\n    tableName: '',\n    sql: undefined\n  },\n\n  createView: function() {\n    return new MergeStepView({\n      model: this\n    });\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar randomQuote = require('../../view_helpers/random_quote.js');\nvar ErrorDetailsView = require('../../views/error_details_view');\n\n/**\n * View for the last step of all merge kinds, creates the actual merged table.\n * TODO: taken from old code, cdb.admin.MergeTableDialog.merge, could this be done in a better way?\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    _.bindAll(this, '_onMergeSuccess', '_onMergeError');\n    this._startMerge();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.getTemplate('common/templates/loading')({\n        title: 'Merging datasets and generating the new one…',\n        quote: randomQuote()\n      })\n    );\n    return this;\n  },\n\n  _startMerge: function() {\n    // TODO: taken from old code, cdb.admin.MergeTableDialog.merge\n    //   could this be done in a better way?\n    $.ajax({\n      type: 'POST',\n      url: cdb.config.prefixUrl() + '/api/v1/imports',\n      data: {\n        table_name: this.model.get('tableName') + '_merge',\n        sql: this.model.get('sql')\n      },\n      success: this._onMergeSuccess,\n      error: this._onMergeError\n    });\n  },\n\n  _onMergeSuccess: function(r) {\n    var imp = this.importation = new cdb.admin.Import({\n      item_queue_id: r.item_queue_id\n    });\n    this.add_related_model(imp);\n\n    // Bind complete event\n    imp.bind('importComplete', function() {\n      imp.unbind();\n      window.location.href = cdb.config.prefixUrl() + \"/tables/\" + (imp.get(\"table_name\") || imp.get(\"table_id\")) + \"/\";\n    }, this);\n\n    var self = this;\n    imp.bind('importError', function(e) {\n      self._showError(\n        e.attributes.error_code,\n        e.attributes.get_error_text.title,\n        e.attributes.get_error_text.what_about,\n        e.attributes.item_queue_id\n      );\n    }, this);\n    imp.pollCheck();\n  },\n\n  _onMergeError: function(e) {\n    try {\n      this._showError(\n        e.attributes.error_code,\n        e.attributes.get_error_text.title,\n        e.attributes.get_error_text.what_about,\n        e.attributes.item_queue_id\n      );\n    } catch(err) {\n      this._showError('99999', 'Unknown', '');\n    }\n  },\n\n  //Show the error when duplication fails\n  _showError: function(number, title, what_about, item_queue_id) {\n    var view = new ErrorDetailsView({\n      err: {\n        error_code: number,\n        title: title,\n        what_about: what_about,\n        item_queue_id: item_queue_id\n      },\n      user: this.model.get('user')\n    });\n    this.addView(view);\n    this.$el.html(view.render().el);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar SpatialMergeView = require('./spatial_merge_view');\nvar MergeModel = require('../merge_step_model');\nvar generateSpatialMergeSQL = require('./generate_spatial_merge_sql');\n\n/**\n * Step 2 for a spatial merge, select merge method and right column.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  INSTRUCTIONS_SAFE_HTML: 'Calculate the intersecting geospatial records between two datasets (ex. points in polygons).<br/>' +\n    \"You'll need to decide the operation to perform here.\",\n\n  defaults: {\n    isReadyForNextStep: false,\n    user: undefined,\n    mergeMethods: undefined,\n    leftTable: undefined,\n    leftKeyColumn: undefined,\n    leftColumns: undefined,\n    rightTableData: undefined,\n    rightKeyColumn: undefined,\n    rightColumns: undefined\n  },\n\n  createView: function() {\n    // Reset state\n    this.set('gotoNextStep', false);\n    this.get('mergeMethods').each(function(m) {\n      m.set('disabled', !this.isCountMergeMethod(m));\n    }, this);\n    this.get('rightColumns').comparator = function(column) {\n      return column.get('name'); // sort alphabetically\n    };\n\n    return new SpatialMergeView({\n      model: this\n    });\n  },\n\n  selectedMergeMethod: function() {\n    return this.get('mergeMethods').find(this._isSelectedColumn);\n  },\n\n  selectedRightMergeColumn: function() {\n    return this.get('rightColumns').find(this._isSelectedColumn);\n  },\n\n  changedRightMergeColumn: function(newColumn) {\n    this._updateMergeMethods(newColumn);\n    this._assertIfReadyForNextStep();\n  },\n\n  changedSelectedMergeMethod: function(newMergeMethod) {\n    var c = this.get('mergeMethods').chain().without(newMergeMethod);\n    c.each(this._deselect); //all but the new selected merge method\n\n    if (this.isCountMergeMethod(newMergeMethod)) {\n      c.each(this._enable); //enable all, so the user can \"go back\" to see available columns for AVG/SUM merge methods\n      this.get('rightColumns').each(this._deselect); // reset prev selection if any\n    } else {\n      // If not a count mege method update state based on current selection of merge column.\n      this._updateMergeMethods(this.selectedRightMergeColumn());\n    }\n\n    this._assertIfReadyForNextStep();\n  },\n\n  _updateMergeMethods: function(newColumn) {\n    // Each merge method should know how it should render based on selected merge column\n    this.get('mergeMethods').each(function(m) {\n      m.changedMergeColumn(newColumn);\n    });\n  },\n\n  isCountMergeMethod: function(m) {\n    return m && m.NAME === 'count';\n  },\n\n  nextStep: function() {\n    return new this.constructor.nextStep({\n      user: this.get('user'),\n      tableName: this.get('leftTable').get('name'),\n      sql: this._sqlForMergeMethod()\n    });\n  },\n\n  _deselect: function(m) {\n    m.set('selected', false);\n  },\n\n  _disable: function(m) {\n    m.set('disabled', true);\n  },\n\n  _enable: function(m) {\n    m.set('disabled', false);\n  },\n\n  _assertIfReadyForNextStep: function() {\n    var mergeMethod = this.selectedMergeMethod();\n    var isReady = mergeMethod && (\n        this.isCountMergeMethod(mergeMethod) ||\n        (!mergeMethod.get('disabled') && this.selectedRightMergeColumn())\n      );\n    this.set('isReadyForNextStep', isReady);\n  },\n\n  _sqlForMergeMethod: function() {\n    var rightTableName = this.get('rightTableData').name;\n    var mergeMethod = this.selectedMergeMethod();\n    var selectedMergeColumn = this.selectedRightMergeColumn();\n    var selectClause = mergeMethod.sqlSelectClause(rightTableName, selectedMergeColumn ? selectedMergeColumn.get('name') : '');\n\n    return generateSpatialMergeSQL({\n      leftTableName: this.get('leftTable').get('name'),\n      leftColumnsNames: this._selectedLeftColumnsNames(),\n      rightTableName: rightTableName,\n      selectClause: selectClause,\n      intersectType: mergeMethod.NAME\n    });\n  },\n\n  _selectedLeftColumnsNames: function() {\n    return this.get('leftColumns')\n    .filter(this._isSelectedColumn)\n    .map(function(m) {\n      return m.get('name');\n    });\n  },\n\n  _isSelectedColumn: function(m) {\n    return m.get('selected');\n  }\n\n}, {\n  header: {\n    icon: 'CDB-IconFont-wizard',\n    title: 'Choose merge columns'\n  },\n  nextStep: MergeModel\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar SumMergeMethod = require('./merge_methods/sum_merge_method');\nvar AVGMergeMethod = require('./merge_methods/avg_merge_method');\nvar CountMergeMethod = require('./merge_methods/count_merge_method');\nvar SpatialMergeView = require('./spatial_merge_view');\nvar ChooseMergeMethod = require('./choose_merge_method_model');\n\n/**\n * First step for a spatial merge - select a dataset table.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  INSTRUCTIONS_SAFE_HTML: 'Calculate the intersecting geospatial records between two datasets (ex. points in polygons).<br/>' +\n    \"You'll need to decide the operation to perform here.\",\n\n  defaults: {\n    user: undefined,\n    leftTable: undefined,\n    excludeColumns: undefined,\n    leftKeyColumn: undefined,\n    leftColumns: undefined,\n    mergeMethods: undefined,\n\n    rightTableData: undefined,\n    rightColumns: undefined\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.leftTable) throw new Error('leftTable is required');\n    if (!attrs.excludeColumns || _.isEmpty(attrs.excludeColumns)) cdb.log.error('excludeColumns was empty');\n    this._initColumns();\n    this._initLeftKeyColumn();\n    this._initMergeMethods();\n  },\n\n  createView: function() {\n    // Reset state\n    this.set({\n      gotoNextStep: false,\n      rightTableData: undefined\n    });\n    this.get('mergeMethods').each(function(m) {\n      m.set({\n        selected: false,\n        disabled: true\n      });\n    });\n    this.get('rightColumns').reset();\n\n    return new SpatialMergeView({\n      model: this\n    });\n  },\n\n  assertIfReadyForNextStep: function() {\n    // Always return false, goes to next step implicitly on selecting table\n    return false;\n  },\n\n  fetchRightColumns: function(tableData) {\n    this.set('rightTableData', tableData);\n    // TODO: extracted from old code, cdb.admin.TableColumnSelector._getColumns,\n    //   isnt there some better way to get the schema/columns?\n    $.ajax({\n      url: cdb.config.prefixUrl() + '/api/v1/tables/' + tableData.id,\n      dataType: 'jsonp',\n      success: this._onFetchedRightColumns.bind(this)\n    });\n  },\n\n  nextStep: function() {\n    return new this.constructor.nextStep({\n      user: this.get('user'),\n      mergeMethods: this.get('mergeMethods'),\n      leftTable: this.get('leftTable'),\n      leftKeyColumn: this.get('leftKeyColumn'),\n      leftColumns: this.get('leftColumns'),\n      rightTableData: this.get('rightTableData'),\n      rightKeyColumn: this._rightKeyColumn(),\n      rightColumns: this.get('rightColumns')\n    });\n  },\n\n  _initColumns: function() {\n    var filteredLeftColumns = this._filterColumns(this.get('leftTable').get('schema'));\n    this.set('leftColumns', new Backbone.Collection(filteredLeftColumns));\n    this.set('rightColumns', new Backbone.Collection());\n  },\n\n  _initMergeMethods: function() {\n    var mergeMethods = new Backbone.Collection([\n      new SumMergeMethod(),\n      new CountMergeMethod(),\n      new AVGMergeMethod()\n    ]);\n    this.set('mergeMethods', mergeMethods);\n  },\n\n  _filterColumns: function(tableSchema) {\n    var excludeColumns = this.get('excludeColumns');\n\n    return _.chain(tableSchema)\n      .map(this._columnDataToColumn)\n      .reject(function(column) {\n        return _.contains(excludeColumns, column.name);\n      })\n      .value();\n  },\n\n  _columnDataToColumn: function(columnData) {\n    return {\n      // TODO: why don't we use a proper model for schema, to provide convenient method to get columns as a collection already?\n      name: columnData[0],\n      type: columnData[1]\n    };\n  },\n\n  _initLeftKeyColumn: function() {\n    var theGeomColumn = this.get('leftColumns').find(this._isColumnTheGeom);\n    this.set('leftKeyColumn', theGeomColumn.clone());\n  },\n\n  _onFetchedRightColumns: function(results) {\n    var filteredColumns = this._filterColumns(results.schema);\n    this.get('rightColumns').reset(filteredColumns, { silent: true }); // handled in next step\n    this.set('gotoNextStep', true);\n  },\n\n  _rightKeyColumn: function() {\n    return this.get('rightColumns')\n      .find(this._isColumnTheGeom)\n      .clone();\n  },\n\n  _isColumnTheGeom: function(column) {\n    return column.get('name') === 'the_geom';\n  }\n\n}, {\n  header: {\n    icon: 'CDB-IconFont-play',\n    title: 'Choose dataset to merge'\n  },\n  nextStep: ChooseMergeMethod\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to indicate the selected key columns relationship and merge method relationship.\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    var rightColumns = this.model.get('rightColumns');\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/spatial_merge/footer_info')({\n        leftTableName: this.model.get('leftTable').get('name'),\n        rightColumnName: rightColumns ? rightColumns.get('name') : ''\n      })\n    );\n    return this;\n  },\n\n  _initBinds: function() {\n    var rightColumns = this.model.get('rightColumns');\n    rightColumns.bind('change:selected', this._updatePieces, this);\n    this.add_related_model(rightColumns);\n\n    var mergeMethods = this.model.get('mergeMethods');\n    mergeMethods.bind('change:selected', this._updatePieces, this);\n    this.add_related_model(mergeMethods);\n  },\n\n  _updatePieces: function() {\n    var selectedMergMethod = this.model.selectedMergeMethod();\n    this.$('.js-merge-method-name').text(selectedMergMethod ? selectedMergMethod.NAME : '');\n\n    if (this.model.isCountMergeMethod(selectedMergMethod)) {\n      this._changeRightPiece(this.model.get('rightTableData').name);\n    } else {\n      var m = this.model.selectedRightMergeColumn();\n      this._changeRightPiece(m ? m.get('name') : '');\n    }\n  },\n\n  _changeRightPiece: function(text) {\n    this.$('.js-right')\n      .text(text || '')\n      .toggleClass('is-placeholder', !text);\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n// SQL query as taken from old code, cdb.admin.MergeTablesDialog\n// Cleaned up to remove noise and avoid string concatenation to be more legible.\nmodule.exports = function(d) {\n  var leftTableName = d.leftTableName;\n  var leftColumnsNames = d.leftColumnsNames;\n  var rightTableName = d.rightTableName;\n  var selectClause = d.selectClause;\n  var intersectType = d.intersectType;\n\n  var sql = ['SELECT',\n    leftTableName + '.cartodb_id,',\n    leftTableName + '.the_geom_webmercator,',\n    leftTableName + '.the_geom,'\n  ];\n\n  _.each(leftColumnsNames, function(columnName) {\n    if (columnName !== 'the_geom') {\n      sql.push(leftTableName + '.' + columnName + ',');\n    }\n  });\n\n  sql.push(\n    '(SELECT ' + selectClause + ' FROM ' + rightTableName,\n      'WHERE ST_Intersects(' + leftTableName + '.the_geom, ' + rightTableName + '.the_geom)',\n    ') AS intersect_' + intersectType,\n    'FROM ' + leftTableName\n  );\n\n  return sql.join(' ');\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to render a individual merge method.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'TabLink TabLink--positive TabLink--textCenterUpcase',\n\n  events: {\n    'hover': '_onHover',\n    'mouseout': '_onMouseOut',\n    'click': '_onClick'\n  },\n\n  initialize: function() {\n    this._initBinds();\n  },\n\n  render: function() {\n    var isDisabled = this.model.get('disabled');\n\n    this.$el\n      .text(this.model.NAME)\n      .toggleClass('disabled', isDisabled)\n      .toggleClass('selected', this.model.get('selected') && !isDisabled);\n\n    if (isDisabled) {\n      this._tooltipView().show();\n    }\n\n    return this;\n  },\n\n  _tooltipView: function() {\n    if (!this._tooltip) {\n      this._tooltip = new cdb.common.TipsyTooltip({\n        el: this.$el,\n        trigger: 'manual',\n        title: function() {\n          // For now there's only one reason why a merge method would be disabled, so inline it here.\n          // If there are more methods set the reason as an attr on the model instead, and update that attr based on state\n          return 'Select a column of type number to use this merge method';\n        }\n      });\n      this.addView(this._tooltip);\n    }\n    return this._tooltip;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:selected', this.render, this);\n    this.model.bind('change:disabled', this.render, this);\n  },\n\n  _onHover: function(ev) {\n    this.killEvent(ev);\n    if (this.model.get('disabled')) {\n      this._tooltip.showTipsy();\n    }\n  },\n\n  _onMouseOut: function(ev) {\n    this.killEvent(ev);\n    if (this._tooltip) {\n      this._tooltip.hideTipsy();\n    }\n  },\n\n  _onClick: function(ev) {\n    this.killEvent(ev);\n    if (!this.model.get('disabled')) {\n      this.model.set('selected', true);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Merge method to create SQL query for doing a spatial AVG.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  NAME: 'avg',\n\n  defaults: {\n    disabled: false,\n    selected: false\n  },\n\n  changedMergeColumn: function(newMergeColumn) {\n    var shouldDisable = !newMergeColumn || newMergeColumn.get('type') !== 'number';\n    this.set({\n      disabled: shouldDisable,\n      selected: this.get('selected') && !shouldDisable\n    });\n  },\n\n  sqlSelectClause: function(tableName, columnName) {\n    return 'AVG(' + tableName + '.' + columnName + ')';\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Merge method to create SQL query for doing a spatial count.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  NAME: 'count',\n\n  defaults: {\n    disabled: false,\n    selected: false\n  },\n\n  changedMergeColumn: function(newMergeColumn) {\n  },\n\n  sqlSelectClause: function() {\n    return 'COUNT(*)';\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Merge method to create SQL query for doing a spatial sum.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  NAME: 'sum',\n\n  defaults: {\n    disabled: false,\n    selected: false\n  },\n\n  changedMergeColumn: function(newMergeColumn) {\n    var shouldDisable = !newMergeColumn || newMergeColumn.get('type') !== 'number';\n    this.set({\n      disabled: shouldDisable,\n      selected: this.get('selected') && !shouldDisable\n    });\n  },\n\n  sqlSelectClause: function(tableName, columnName) {\n    return 'SUM(' + tableName + '.' + columnName + ')';\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar ChooseRightDatasetModel = require('./choose_right_dataset_model');\n\n/**\n * Entry point model that represents the merge flavor of doing a spatial merge.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  ILLUSTRATION_ICON_TYPE: 'IllustrationIcon--royal',\n  ICON: 'CDB-IconFont-mergeSpatial',\n  TITLE: 'Spatial join',\n  DESC: 'Measure the number of intesecting records between two datasets (ex. count point inside polygons)',\n\n  defaults: {\n    user: undefined,\n    table: undefined,\n    excludeColumns: []\n  },\n\n  initialize: function(attrs) {\n    if (!attrs.user) throw new Error('user is required');\n    if (!attrs.table) throw new Error('table is required');\n    if (!attrs.excludeColumns || _.isEmpty(attrs.excludeColumns)) cdb.log.error('excludeColumns was empty');\n  },\n\n  isAvailable: function() {\n    return true;\n  },\n\n  firstStep: function() {\n    return new ChooseRightDatasetModel({\n      user: this.get('user'),\n      leftTable: this.get('table'),\n      excludeColumns: this.get('excludeColumns')\n    });\n  }\n\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ColumnsSelectorView = require('../columns_selector_view');\nvar TablesSelectorView = require('../tables_selector_view');\nvar MergeMethodView = require('./merge_method_view');\nvar StickyHeaderView = require('../sticky_header_view');\nvar FooterView = require('../footer_view');\nvar FooterInfoView = require('./footer_info_view');\n\n/**\n * Shared view for both steps of doing a spatial merge, since they are essentially the same\n */\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this._initViews();\n    this._initBinds();\n  },\n\n  render: function() {\n    var hasSelectedRightTable = this._hasSelectedRightTable();\n\n    var $el = $(\n      this.getTemplate('common/dialogs/merge_datasets/spatial_merge/spatial_merge')({\n        leftKeyColumn: this.model.get('leftKeyColumn'),\n        hasSelectedRightTable: hasSelectedRightTable,\n        rightKeyColumn: this.model.get('rightKeyColumn'),\n        rightColumns: this.model.get('rightColumns')\n      })\n    );\n\n    $el.find('.js-left-table').append(this._leftTableComboView.render().$el);\n    $el.find('.js-left-columns').append(this._leftColumnsView.render().$el);\n    $el.find('.js-right-columns').append(this._rightColumnsView.render().$el);\n    $el.append(this._footerView.render().$el);\n\n    if (hasSelectedRightTable) {\n      $el.find('.js-sticky-header').append(this._stickyHeaderView.render().$el);\n      $el.find('.js-right-table').append(this._rightTableComboView.render().$el);\n      this._renderMergeMethods($el.find('.js-merge-methods'));\n    } else {\n      $el.find('.js-right-tables').append(this._rightTablesSelectorView.render().$el);\n    }\n\n    this.$el.html($el);\n\n    return this;\n  },\n\n  onChangeKeyColumnsVisiblity: function() {\n    if (this._hasSelectedRightTable()) {\n      this._stickyHeaderView.$el.slideToggle(200);\n    }\n  },\n\n  _hasSelectedRightTable: function() {\n    return _.isObject(this.model.get('rightTableData'));\n  },\n\n  _initViews: function() {\n    this._leftTableComboView = new cdb.forms.Combo({\n      className: 'Select',\n      width: '100%',\n      disabled: true,\n      extra: [this.model.get('leftTable').get('name')]\n    });\n    this.addView(this._leftTableComboView);\n\n    this._leftColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('leftColumns'),\n      excludeFilter: this._columnsExcludeFilter,\n      selectorType: 'switch'\n    });\n    this.addView(this._leftColumnsView);\n\n    var footerInfoView; // only set for 2nd step\n    var rightTableData = this.model.get('rightTableData');\n    if (rightTableData) {\n      this._stickyHeaderView = new StickyHeaderView({\n        leftKeyColumn: this.model.get('leftKeyColumn'),\n        rightKeyColumn: this.model.get('rightKeyColumn'),\n        addRadioPlaceholder: true\n      });\n      this.addView(this._stickyHeaderView);\n\n      this._rightTableComboView = new cdb.forms.Combo({\n        className: 'Select',\n        width: '100%',\n        disabled: true,\n        extra: [this.model.get('rightTableData').name]\n      });\n      this.addView(this._rightTableComboView);\n      footerInfoView = new FooterInfoView({\n        model: this.model\n      })\n    } else {\n      this._rightTablesSelectorView = new TablesSelectorView({\n        excludeFilter: this._rightTablesExcludeFilter.bind(this),\n        initialOption: {\n          label: rightTableData ? rightTableData.name : 'Select dataset'\n        }\n      });\n      this.addView(this._rightTablesSelectorView);\n    }\n\n    this._rightColumnsView = new ColumnsSelectorView({\n      collection: this.model.get('rightColumns'),\n      excludeFilter: this._columnsExcludeFilter,\n      selectorType: 'radio'\n    });\n    this.addView(this._rightColumnsView);\n\n    this._mergeMethodViews = this.model.get('mergeMethods').map(this._createMergeMethodView, this);\n\n    this._footerView = new FooterView({\n      model: this.model,\n      nextLabel: rightTableData ? 'Merge datasets' : undefined,\n      infoView: footerInfoView\n    });\n    this.addView(this._footerView);\n  },\n\n  _createMergeMethodView: function(m) {\n    var view = new MergeMethodView({ model: m });\n    this.addView(view);\n    return view;\n  },\n\n  _initBinds: function() {\n    var rightColumns = this.model.get('rightColumns');\n    rightColumns.bind('change:selected', this._onChangeSelectedRightColumn, this);\n    this.add_related_model(rightColumns);\n\n    var mergeMethods = this.model.get('mergeMethods');\n    if (mergeMethods) {\n      mergeMethods.bind('change:selected', this._onChangeSelectedMergeMethod, this);\n      this.add_related_model(mergeMethods);\n    }\n\n    if (this._rightTablesSelectorView) {\n      this._rightTablesSelectorView.model.bind('change:tableData', this._onChangeRightTableData, this);\n      this.add_related_model(this._rightTablesSelectorView.model);\n    }\n  },\n\n  _onChangeRightTableData: function(m, tableData) {\n    this._rightColumnsView.model.set('loading', 'columns');\n    this.model.fetchRightColumns(tableData);\n  },\n\n  _onChangeSelectedRightColumn: function(m, isSelected) {\n    if (isSelected) {\n      this.model.changedRightMergeColumn(m);\n    }\n  },\n\n  _onChangeSelectedMergeMethod: function(m, isSelected) {\n    if (!isSelected) return;\n\n    this.model.changedSelectedMergeMethod(m);\n\n    var isCountMergeMethod = this.model.isCountMergeMethod(m);\n    this.$('.js-count-merge-method-info').toggle(isCountMergeMethod);\n    this.$('.js-right-columns').toggle(!isCountMergeMethod);\n  },\n\n  _renderMergeMethods: function($target) {\n    $target.append.apply($target, this._$renderedMergeMethodViews());\n  },\n\n  _$renderedMergeMethodViews: function() {\n    return _.map(this._mergeMethodViews, function(view) {\n      return view.render().$el;\n    });\n  },\n\n  _columnsExcludeFilter: function(column) {\n    return column.get('name') === 'the_geom';\n  },\n\n  _rightTablesExcludeFilter: function(vis) {\n    return vis.get('name') === this.model.get('leftTable').get('name');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Sticky header, should be displayed when the key columns goes out of view\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'MergeDatasets-stickyHeader',\n  attributes: {\n    style: 'display: none'\n  },\n\n  render: function() {\n    var leftKeyColumn = this.options.leftKeyColumn;\n    var rightKeyColumn = this.options.rightKeyColumn;\n\n    this.$el.html(\n      this.getTemplate('common/dialogs/merge_datasets/sticky_header')({\n        leftColumnName: leftKeyColumn.get('name'),\n        leftColumnType: leftKeyColumn.get('type'),\n        rightColumnName: rightKeyColumn.get('name'),\n        rightColumnType: rightKeyColumn.get('type'),\n        addRadioPlaceholder: this.options.addRadioPlaceholder\n      })\n    );\n    return this;\n  }\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to select a table. extends the cdb.admin.Combo to handle the tables fetch and similar.\n */\nmodule.exports = cdb.forms.Combo.extend({\n\n  className: 'Select',\n\n  initialize: function() {\n    this.options.width = '100%';\n    this.options.disabled = true;\n    this.options.extra = [this._initialOptionDataItem() || 'Loading tables…'];\n    this.options.excludeFilter = this.options.excludeFilter || function() {};\n\n    this.elder('initialize');\n    this.model = this.model || new cdb.core.Model();\n\n    this._initVisualizations();\n    this._initBinds();\n    this._fetchTables();\n  },\n\n  _formatResult: function(state) {\n    return JSON.stringify(state);\n  },\n\n  _initVisualizations: function() {\n    // Taken from old code, cdb.admin.TableColumnSelector._getTables\n    var visualizations = new cdb.admin.Visualizations();\n    visualizations.options.set({\n      type: 'table',\n      per_page: 100000,\n      table_data: false\n    });\n    this.model.set('visualizations', visualizations);\n  },\n\n  _initBinds: function() {\n    this.bind('change', this._onChangeOption, this);\n\n    var visualizations = this.model.get('visualizations');\n    visualizations.bind('reset', this._onResetTables, this);\n    this.add_related_model(visualizations);\n  },\n\n  _fetchTables: function() {\n    // Taken from old code, cdb.admin.TableColumnSelector._getTables\n    this.model.get('visualizations').fetch({\n      data: {\n        o: {\n          updated_at: 'desc'\n        },\n        exclude_raster: true\n      }\n    });\n  },\n\n  _onResetTables: function() {\n    this.options.disabled = false;\n\n    var filteredVisualizations = this.model.get('visualizations').reject(this.options.excludeFilter);\n    var newData = _.map(filteredVisualizations, this._visToComboDataItem, this);\n\n    // Prepend initial item to new data, if there's one\n    var initialItem = this._initialOptionDataItem();\n    if (initialItem) {\n      newData.unshift(initialItem);\n    }\n    this.updateData(newData);\n\n    // pre-select 1st item, unless there's an initialOption\n    var firstFilteredVis = filteredVisualizations[0];\n    if (!initialItem && firstFilteredVis) {\n      this._onChangeOption(firstFilteredVis.id);\n    }\n  },\n\n  _visToComboDataItem: function(vis) {\n    // required data format for an option for the cdb.admin.combo…\n    return this._comboDataItem(vis.get('name'), vis.id);\n  },\n\n  _initialOptionDataItem: function() {\n    if (_.isObject(this.options.initialOption)) {\n      var obj = this.options.initialOption;\n      // required data format for an option for the cdb.admin.combo…\n      return this._comboDataItem(obj.label, obj.value);\n    }\n  },\n\n  _comboDataItem: function(label, value) {\n    return [label, value];\n  },\n\n  _onChangeOption: function(visId) {\n    var vis = this.model.get('visualizations').get(visId);\n    this.model.set('tableData', vis ? vis.get('table') : undefined);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar Pecan = require('cartodb-pecan');\n\nmodule.exports = cdb.core.View.extend({\n\n  _CARD_WIDTH: 288,\n  _CARD_HEIGHT: 170,\n  _TABS_PER_ROW: 3,\n  _GET_BBOX_FROM_THE_GEOM: true,\n\n  tagName: \"li\",\n  className: \"GalleryList-item MapsList-item js-card\",\n\n  events: {\n    \"click \": \"_onClick\"\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/dialogs/pecan/card');\n  },\n\n  render: function() {\n    var src = this.options.url + \"?api_key=\" + this.options.api_key;\n\n    var wizardName = this.model.get(\"visualizationType\").charAt(0).toUpperCase() + this.model.get(\"visualizationType\").slice(1);\n\n    var null_count = +(this.model.get(\"null_ratio\") * this.model.get(\"count\")).toFixed(2);\n    var prettyNullCount = Utils.formatNumber(null_count);\n\n    this.$el.html(\n      this.template({\n      column: this.model.get(\"column\"),\n      wizard: wizardName,\n      metadata: this.model.get(\"metadata\"),\n      null_count: prettyNullCount,\n      weight: this.model.get(\"weight\")\n    }));\n\n    if (this.model.get(\"visualizationType\") === \"choropleth\") {\n      this._addHistogram();\n    }\n\n    var self = this;\n    var img = new Image();\n    img.onerror = function() {\n      cdb.log.info(\"error loading the image for \" + self.model.get(\"column\"));\n    };\n    img.onload = function() {\n      self.$(\".js-loader\").hide();\n      self.$(\".js-header\").append('<img class=\"MapCard-preview\" src=\"' + src + '\" />');\n      self.$(\"img\").show();\n    };\n\n    img.src = src;\n\n    return this;\n  },\n\n  _onClick: function(e) {\n    this.killEvent(e);\n    this.trigger(\"click\", this.model, this);\n  },\n\n  _addHistogram: function() {\n    var data = this.model.get(\"cat_hist\").slice(0, 7);\n    data = _.sortBy(data, function(d){ return d[0]; });\n    var rampName = Pecan.getMethodProperties(this.model.attributes).name;\n\n    var width = 37;\n    var height = 11;\n    var minHeight = 2;\n\n    var x = d3.scale.ordinal()\n        .rangeRoundBands([0, width], .1);\n\n    var y = d3.scale.linear()\n        .range([height, 0]);\n\n    var xAxis = d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\");\n\n    var svg = d3.select(this.$(\".js-graph\")[0]).append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n      .append(\"g\");\n\n    x.domain(data.map(function(d) { return d[0]; }));\n    y.domain([0, d3.max(data, function(d) { return d[1]; })]);\n\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis);\n\n    svg.selectAll(\".bar\")\n        .data(data)\n      .enter().append(\"rect\")\n        .attr(\"fill\", function(d, i) {\n          return cdb.admin.color_ramps[rampName][7][i];\n        })\n        .attr(\"class\", \"HistogramGraph-bar\")\n        .attr('data-title', function(d) {\n          return Utils.formatNumber(d[1])\n        })\n        .attr(\"x\", function(d) { return x(d[0]); })\n        .attr(\"width\", 4)\n        .attr(\"y\", function(d) {\n          var value = height - y(d[1]);\n          var yPos = y(d[1]);\n          return value < minHeight ? (height - minHeight) : yPos;\n        })\n        .attr(\"height\", function(d) {\n          var value = height - y(d[1]);\n          return value < minHeight ? minHeight : value;\n        })\n\n    return this;\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar Pecan = require('cartodb-pecan');\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar PecanCard = require('./pecan_card');\n\nmodule.exports = BaseDialog.extend({\n\n  _CARD_MARGIN: 20,\n  _CARD_WIDTH: 288,\n  _CARD_HEIGHT: 170,\n  _STROKE_PX_LIMIT: 0.04,\n  _TABS_PER_ROW: 3,\n  _GET_BBOX_FROM_THE_GEOM: true,\n  _DEFAULT_BASEMAP_TEMPLATE: \"http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\",\n  _SUPPORTED_BASEMAPS: [\"light_all\", \"dark_all\", \"light_nolabels\", \"dark_nolabels\", \"base-antique\", \"base-flatblue\", \"toner\", \"watercolor\"],\n\n  events: BaseDialog.extendEvents({\n    \"click .js-goPrev\": \"_prevPage\",\n    \"click .js-goNext\": \"_nextPage\",\n    \"click .js-skip\"  : \"cancel\"\n  }),\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.vis) {\n      throw new Error('vis is required');\n    }\n\n    if (!this.options.user) {\n      throw new Error('user is required');\n    }\n\n    this.columns = this.options.collection;\n    this.add_related_model(this.collection);\n\n    this._initModels();\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    return this;\n  },\n\n  _initModels: function() {\n    this.model = new cdb.core.Model({ page: 1, maxPages: 0 });\n  },\n\n  _initViews: function() {\n\n    _.bindAll(this, \"_addCard\", \"_generateThumbnail\", \"_refreshMapList\", \"_setWizardProperties\");\n\n    this.vis   = this.options.vis;\n    this.map   = this.vis.map;\n    this.user  = this.options.user;\n\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n\n    this.addView(this._panes);\n\n    this._panes.addTab('vis',\n      ViewFactory.createByTemplate('common/dialogs/pecan/template', {\n      })\n    );\n\n    this._panes.addTab('applying',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Applying style…',\n        quote: randomQuote()\n      })\n    );\n\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Loading previews…',\n        quote: randomQuote()\n      })\n    );\n\n    this._getBBox();\n    this._sendOpenStats();\n    this._loadCards();\n\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:page', this._moveTabsNavigation, this);\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  _getBBox: function() {\n    this.columns.each(function(column) {\n      if (column.get(\"column\") === \"the_geom\") {\n        this.bbox = column.get(\"bbox\");\n      }\n    }, this);\n  },\n\n  _loadCards: function() {\n    this.columns.each(this._loadCard, this);\n  },\n\n  _loadCard: function(column) {\n    var self = this;\n\n    if (column.get(\"success\")) {\n      this._generateThumbnail(column, function(error, url) {\n        if (!error) {\n          self._addCard(url, column);\n        } else {\n          cdb.log.error(error);\n        }\n      });\n    }\n  },\n\n  _sendAppliedStats: function() {\n    cdb.god.trigger('metrics', 'applied_pecan', {\n      email: window.user_data.email\n    });\n  },\n\n  _sendOpenStats: function() {\n    cdb.god.trigger('metrics', 'open_pecan_list', {\n      email: window.user_data.email\n    });\n  },\n\n  _skip: function() {\n    var layerID = this.vis.get(\"active_layer_id\");\n    var name;\n    var activeLayer  = this.vis.map.layers.where({ id: layerID });\n\n    if (activeLayer) {\n      name = activeLayer[0].table.get(\"name\");\n    }\n\n    var skipPencanDialog = 'pecan_' + this.options.user.get(\"username\") + \"_\" + name;\n    localStorage[skipPencanDialog] = true;\n  },\n\n  _nextPage: function() {\n    var page = this.model.get('page');\n    var maxPages = this.model.get('maxPages');\n\n    if (page < maxPages) {\n      this.model.set('page', page + 1);\n    }\n  },\n\n  _prevPage: function() {\n    var page = this.model.get('page');\n    if (page > 1) {\n      this.model.set('page', page - 1);\n    }\n  },\n\n  _moveTabsNavigation: function() {\n    var page = this.model.get('page');\n    var rowWidth = 960;\n\n    var p = rowWidth * (page - 1);\n    this.$('.js-map-list').css('margin-left', '-' + p + 'px');\n    this._refreshNavigation();\n  },\n\n  _refreshNavigation: function() {\n    var page = this.model.get('page');\n    var maxPages = this.model.get('maxPages');\n\n    this.$('.js-goPrev')[ page > 1 ? 'removeClass' : 'addClass' ]('is-disabled');\n    this.$('.js-goNext')[ page < maxPages ? 'removeClass' : 'addClass' ]('is-disabled');\n  },\n\n  _hideNavigation: function() {\n    this.$('.js-navigation').addClass(\"is-hidden\");\n  },\n\n  _setupCSS: function(css, geometryType) {\n    var row_count = this.options.vis.tableMetadata().get(\"row_count\");\n    var removeStrokeIndex = row_count / (this._CARD_WIDTH * this._CARD_HEIGHT);\n    var removeStroke = (removeStrokeIndex > this._STROKE_PX_LIMIT);\n\n    if (geometryType !== \"line\" && removeStroke) {\n      css = css.replace(\"marker-line-width: 1;\", \"marker-line-width: 0.7;\");\n      css = css.replace(\"marker-width: 10;\", \"marker-width: 7;\");\n    }\n\n    return css;\n  },\n\n  _setupTemplate: function() {\n    var template = this.map.getLayerAt(0).get(\"urlTemplate\");\n\n    if (template) {\n      var supportedBasemap = _.find(this._SUPPORTED_BASEMAPS, function(basemap) {\n        return template.indexOf(basemap) !== -1\n      });\n    }\n\n    if (!template || !supportedBasemap) {\n      template = this._DEFAULT_BASEMAP_TEMPLATE;\n    }\n\n    return template;\n  },\n\n  _generateLayerDefinition: function(column) {\n\n    var type = column.get(\"visualizationType\");\n    var sql = column.get(\"sql\");\n    var css = this._setupCSS(column.get(\"css\"), column.get(\"geometryType\"));\n\n    var api_key  = this.user.get(\"api_key\");\n    var maps_api_template = cdb.config.get('maps_api_template');\n\n    var template = this._setupTemplate();\n\n    var layerDefinition = {\n      user_name: user_data.username,\n      maps_api_template: maps_api_template,\n      api_key: api_key,\n      layers: [{\n        type: \"http\",\n        options: {\n          urlTemplate: template,\n          subdomains: [ \"a\", \"b\", \"c\" ]\n        }\n      }, {\n        type: \"cartodb\",\n        options: {\n          sql: sql,\n          cartocss: css,\n          cartocss_version: \"2.1.1\"\n        }\n      }]\n    };\n\n    if (type === \"torque\" || type === \"heatmap\"){\n      layerDefinition.layers[1] = {\n        type: \"torque\",\n        options: {\n          sql: sql,\n          cartocss: css,\n          cartocss_version: \"2.1.1\"\n        }\n      }\n    }\n\n    return layerDefinition;\n  },\n\n  _generateThumbnail: function(column, callback) {\n\n    var layerDefinition = this._generateLayerDefinition(column);\n\n    var onImageReady = function(error, url) {\n      callback && callback(error, url);\n    };\n\n    var the_geom = this.columns.find(function(column) {\n      return column.get(\"column\") === 'the_geom'\n    });\n\n    if (this.bbox && this._GET_BBOX_FROM_THE_GEOM) {\n      cdb.Image(layerDefinition).size(this._CARD_WIDTH, this._CARD_HEIGHT).bbox(this.bbox).getUrl(onImageReady);\n    } else {\n      cdb.Image(layerDefinition).size(this._CARD_WIDTH, this._CARD_HEIGHT).zoom(this.map.get(\"zoom\")).center(this.map.get(\"center\")).getUrl(onImageReady);\n    }\n\n  },\n\n  _addCard: function(url, column) {\n\n    var card = new PecanCard({\n      url: url,\n      urlTemplate: this.map.getLayerAt(0).get(\"urlTemplate\"),\n      api_key: this.user.get(\"api_key\"),\n      model: column\n    });\n\n    card.bind(\"click\", this._onCardClick, this);\n    card.render();\n\n    this._panes.active('vis');\n\n    if (this._getSuccessColumns().length < 3) {\n      this.$(\".js-map-list\").addClass(\"is--centered\");\n    }\n\n    if (column.get(\"visualizationType\") === 'heatmap' || column.get(\"visualizationType\") === 'torque') {\n      this.$(\".js-map-list\").prepend(card.$el);\n    } else {\n      this.$(\".js-map-list\").append(card.$el);\n    }\n\n    this._refreshMapList(card.$el);\n    this._refreshNavigation();\n  },\n\n  _refreshMapList: function($el) {\n    var w = $el.width();\n    var l = this.$(\".js-card\").length;\n    this.$(\".js-map-list\").width(w * l + (l - 1) * this._CARD_MARGIN);\n    this.model.set('maxPages', Math.ceil(this.$('.js-card').size() / this._TABS_PER_ROW));\n  },\n\n  _getSuccessColumns: function() {\n    return this.columns.filter(function(c) { return c.get(\"success\")});\n  },\n\n  _bindDataLayer: function() {\n    this.layer.wizard_properties.unbind(\"load\", this._setWizardProperties, this);\n    this.layer.wizard_properties.bind(\"load\", this._setWizardProperties, this);\n  },\n\n  _getProperties: function(column) {\n\n    var property = column.get(\"column\");\n    var wizard = this._getWizardName(column.get(\"visualizationType\"));\n\n    var properties = { property: property };\n\n    if (wizard === \"category\") {\n      return this._getCategoriesProperties(properties);\n    } else if (wizard === 'choropleth') {\n      return this._getChoroplethProperties(properties);\n    } else if(wizard === \"heatmap\") {\n      return this._getHeatmapProperties(properties);\n    }\n\n  },\n\n  _onCardClick: function(column) {\n    this._panes.active('applying');\n    this.model.set(\"column\", column);\n\n    this._skip();\n\n    this.layer = this._getDataLayer();\n\n    this._sendAppliedStats();\n\n    var wizard = this._getWizardName(column.get(\"visualizationType\"));\n    var properties = this._getProperties(column);\n\n    this._bindDataLayer();\n    this.layer.wizard_properties.active(wizard, properties);\n  },\n\n  _getWizardName: function(name){\n    var mappings = {\"heatmap\": \"torque_heat\"};\n    return mappings[name] || name;\n  },\n\n  _getDataLayer: function() {\n    return this.map.layers.getDataLayers()[0];\n  },\n\n  _setWizardProperties: function() { // TODO: hack, we should find a way to remove this\n    var properties = this._getProperties(this.model.get(\"column\"));\n    this.layer.wizard_properties.unbind(\"load\", this._setWizardProperties, this);\n    if (properties) {\n      this.layer.wizard_properties.set(properties);\n    }\n    this.close();\n  },\n\n  _getChoroplethProperties: function(properties) {\n    var column = this.model.get(\"column\");\n\n    var property = column.get(\"column\");\n    var type     = column.get(\"type\");\n    var dist     = column.get(\"dist_type\");\n    var stats    = column.get(\"stats\");\n\n    properties.qfunction  = this._getQFunction(dist);\n    properties.color_ramp = Pecan.getMethodProperties(stats).name;\n\n    return properties;\n  },\n\n  _getCategoriesProperties: function(properties) {\n    var column = this.model.get(\"column\");\n    properties.metadata   = column.get(\"metadata\");\n    properties.categories = column.get(\"metadata\");\n    return properties;\n  },\n\n  _getHeatmapProperties: function(properties){\n    properties.property = \"cartodb_id\";\n    properties[\"torque-resolution\"] = 2;\n    return properties;\n  },\n\n  _getQFunction: function(dist) {\n    var qfunction = \"Jenks\";\n\n    if (dist === 'L' || dist == 'J') {\n      qfunction = \"Heads/Tails\";\n    } else if (dist === 'A' || dist == 'U') {\n      qfunction = \"Jenks\";\n    } else if (dist === 'F') {\n      qfunction = \"Quantile\"; // we could use 'Equal Interval' too\n    }\n    return qfunction;\n  },\n\n  _keydown: function(e) {\n    if (e.keyCode === $.ui.keyCode.LEFT) {\n      this._prevPage();\n    } else if (e.keyCode === $.ui.keyCode.RIGHT) {\n      this._nextPage();\n    }\n    BaseDialog.prototype._keydown.call(this, e);\n  },\n\n  clean: function() {\n    if (this.layer) {\n      this.layer.wizard_properties.unbind(\"load\", this._setWizardProperties, this);\n    }\n\n    BaseDialog.prototype.clean.call(this);\n  },\n\n  cancel: function(e) {\n    this.killEvent(e);\n    this.model.set('disabled', true);\n    this._skip();\n    this.elder('cancel');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\n\nmodule.exports = cdb.core.View.extend({\n\n  _MAX_ROWS: 100000,\n  _MAX_COLS: 60,\n  _EXCLUDED_COLUMNS: [\n    'cartodb_id', 'lat', 'lon', 'lng', 'long', 'latitude', 'longitude', 'longitudenumber','latitudenumber', \n    'minlat', 'maxlat', 'minlon', 'maxlon', 'minlng', 'maxlng', 'center_lat', 'centerlat', 'center_lon', 'centerlon',\n    'latdd', 'longdd', 'shape_length', 'shape_area', 'objectid', 'id', 'created_at', 'updated_at',\n    'iso2', 'iso3', 'x', 'y', 'x_coord', 'y_coord', 'xcoord', 'ycoord', 'coord_x', 'coord_y', 'coordx', 'coordy', \n    'cartodb_georef_status','scalerank', 'strokweig', 'country', 'state', 'area_sqkm', 'region', 'subregion', 'funcstat',\n    'classfp', 'county_fip', 'county', 'aland10'\n  ],\n\n  initialize: function() {\n    this.elder('initialize');\n\n    if (!this.options.table) {\n      throw new Error('table is required');\n    }\n\n    this._initModels();\n    this._initViews();\n  },\n\n  _check: function() {\n\n    var isGeoreferenced = this.options.table.isGeoreferenced();\n\n    var tableData     = this.options.table.data();\n    var geometryTypes = tableData.table && tableData.table.get(\"geometry_types\");\n    var hasGeometries = geometryTypes && geometryTypes.length > 0 ? true : false;\n\n    var row_count     = tableData.table.get(\"rows_counted\");\n    var hasRows       = row_count > 0 && row_count < this._MAX_ROWS;\n\n    var col_count = _(this.query_schema).size();\n    var hasColumns = col_count > 0 && col_count < this._MAX_COLS;\n\n    return isGeoreferenced && hasGeometries && hasRows && hasColumns;\n  },\n\n  _initModels: function() {\n    this.columns = new Backbone.Collection();\n    this.model = new cdb.core.Model({ page: 1, maxPages: 0 });\n  },\n\n  _initViews: function() {\n\n    this.table = this.options.table;\n    this.query_schema = this.table.data().query_schema;\n    this.backgroundPollingModel = this.options.backgroundPollingModel;\n\n    if (this._check() && this.backgroundPollingModel.canAddAnalysis()) {\n      this._setupColumns();\n      this._start();\n    }\n  },\n\n  _getSimplifiedGeometryType: function(g) {\n    return {\n      st_multipolygon: 'polygon',\n      st_polygon: 'polygon',\n      st_multilinestring: 'line',\n      st_linestring: 'line',\n      st_multipoint: 'point',\n      st_point: 'point'\n    }[g.toLowerCase()];\n  },\n\n  _getGeometryType: function() {\n    var geometryTypes = this.table.data().table.get(\"geometry_types\");\n    return this._getSimplifiedGeometryType(geometryTypes[0]);\n  },\n\n  _start: function() {\n    var columns = this.columns.map(function(column) {\n      return { table_id: this.table.id, column: column.get(\"name\"), geometry_type: column.get(\"geometry_type\") };\n    }, this);\n\n    this.backgroundPollingModel.addAnalysis(columns);\n  },\n\n  _setupColumns: function() {\n    _(this.query_schema).each(function(type, name) {\n      if (!_.include(this._EXCLUDED_COLUMNS, name)) {\n        this.columns.add({ name: name.concat(\"\"), geometry_type: this._getGeometryType() });\n      }\n    }, this);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View model for an option that may be disabled due to Vis' privacy being set to private.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  isDisabled: function() {\n    return this.get('isPrivacyPrivate');\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * View to handle the visual representation of a publish option.\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'OptionCard OptionCard--static',\n\n  events: {\n    'click input': '_onClickInput'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._template = cdb.templates.getTemplate(this.model.get('template'));\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this.$el.html(\n      this._template({\n        model: this.model\n      })\n    );\n    this.$el.toggleClass('is-disabled', !!this.model.isDisabled());\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n  },\n\n  _onClickInput: function(ev) {\n    this.killEvent(ev);\n    this.$('input').select();\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar OptionView = require('./publish_option_view');\nvar ViewModel = require('./options/view_model');\n\n/**\n * Delete items dialog\n */\nmodule.exports = BaseDialog.extend({\n\n  events: function() {\n    return _.extend({}, BaseDialog.prototype.events, {\n      'click .js-change-privacy': '_openPrivacyDialog'\n    });\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    if (!this.model) throw new Error('model (vis) is required');\n    if (!this.options.user) throw new Error('user is required');\n    this._initOptions();\n    this._initBinds();\n  },\n\n  /**\n   * @implements cdb.ui.common.Dialog.prototype.render_content\n   */\n  render_content: function() {\n    this.clearSubViews();\n\n    var $el = $(\n      cdb.templates.getTemplate('common/dialogs/publish/publish')({\n      })\n    );\n\n    this._options.each(function(model) {\n      var view = new OptionView({\n        model: model\n      });\n      this.addView(view);\n      $el.find('.js-publish-options').append(view.render().el);\n    }, this);\n\n    // Event tracking \"Published visualization\"\n    cdb.god.trigger('metrics', 'published_visualization', {\n      email: window.user_data.email\n    });\n\n    return $el;\n  },\n\n  _initOptions: function() {\n    // Public URL option\n    this._options = new Backbone.Collection();\n    this._publicUrlOption = new ViewModel({\n      template: 'common/dialogs/publish/options/public_url'\n    });\n    this._options.add(this._publicUrlOption);\n\n    // Embed option\n    this._embedOption = new ViewModel({\n      template: 'common/dialogs/publish/options/embed',\n      embedURL: this.model.embedURL()\n    });\n    this._options.add(this._embedOption);\n\n    // CartoDB.js option\n    this._options.add(\n      new ViewModel({\n        template: 'common/dialogs/publish/options/cdb',\n        vizjsonURL: this.model.vizjsonURL()\n      })\n    );\n\n    this._updateOptionsWithNewPrivacy();\n  },\n\n  _updateOptionsWithNewPrivacy: function() {\n    var isPrivate = this.model.get('privacy') === 'PRIVATE';\n\n    this._publicUrlOption.set('isPrivacyPrivate', isPrivate);\n    this._embedOption.set('isPrivacyPrivate', isPrivate);\n\n    if (!isPrivate) {\n      var publicURL = this.model.publicURL();\n      this._publicUrlOption.set({\n        url: publicURL\n      });\n    }\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:privacy', this._updateOptionsWithNewPrivacy, this);\n  },\n\n  _openPrivacyDialog: function(e) {\n    this.killEvent(e);\n\n    var privacyModal = new cdb.editor.ChangePrivacyView({\n      vis: this.model, //vis\n      user: this.options.user,\n      clean_on_hide: true,\n      enter_to_confirm: true\n    });\n\n    // Do not remove this dialog but keep it until returning\n    var originalCleanOnHideValue = this.options.clean_on_hide;\n    this.options.clean_on_hide = false;\n    this.close();\n    privacyModal.appendToBody();\n\n    // Return to this view when done\n    var self = this;\n    var onClose = function() {\n      privacyModal.unbind('hide', onClose);\n      self.options.clean_on_hide = originalCleanOnHideValue;\n      self.show();\n      privacyModal.close();\n    };\n    privacyModal.bind('hide', onClose);\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\nmodule.exports = BaseDialog.extend({\n\n  _FORMAT: 'png',\n\n  events: BaseDialog.extendEvents({\n    'click .js-format': '_onClickFormat',\n    'keyup .js-textInput': '_onKeyUp',\n    'focus .js-textInput': '_onFocus',\n    'blur .js-textInput': '_onBlur'\n  }),\n\n  initialize: function() {\n    this.elder('initialize');\n\n    this.options = _.defaults(this.options, { format: this._FORMAT });\n    this.model = new cdb.core.Model(this.options);\n    this.mapView = this.options.mapView;\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this.getTemplate('common/dialogs/static_image/advanced_export_view')(this.model.attributes);\n  },\n\n  _initBinds: function() {\n    this.model.on('change:format', this._onChangeFormat, this);\n  },\n\n  _onKeyUp: function(e) {\n    var value = +$(e.target).val();\n    $(e.target).parent().toggleClass('has-error', !(_.isNumber(value) && value > 10));\n  },\n\n  _onFocus: function(e) {\n    $(e.target).parent().addClass('is-focused');\n  },\n\n  _onBlur: function(e) {\n    $(e.target).parent().removeClass('is-focused');\n  },\n\n  _onChangeFormat: function() {\n    this.$('.js-radioButton').removeClass('is-checked');\n    this.$('.js-' + this.model.get('format')).addClass('is-checked');\n  },\n\n  _onClickFormat: function(e) {\n    this.killEvent(e);\n    var $el = $(e.target).closest('.js-format');\n    this.model.set('format', $el.data('format'));\n  },\n\n  _getBounds: function() {\n    var nw = this.mapView.pixelToLatLon([this.options.x + this.options.width, this.options.y]);\n    var sw = this.mapView.pixelToLatLon([this.options.x, this.options.y + this.options.height]);\n    return [[sw.lat, sw.lng], [nw.lat, nw.lng]];\n  },\n\n  _ok: function() {\n    var width = +this.$('.js-width').val();\n    var height = +this.$('.js-height').val();\n    var format = this.model.get('format');\n    var bounds = this._getBounds();\n\n    this.trigger('generate_image', { width: width, height: height, bounds: bounds, format: format });\n    this.close();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar ViewFactory = require('../../view_factory');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\nmodule.exports = BaseDialog.extend({\n\n  events: BaseDialog.extendEvents({\n    'click .js-input': '_onInputClick',\n    'click .js-open-image': 'close'\n  }),\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initViews();\n    this._initBinds();\n  },\n\n  render_content: function() {\n    return this._panes.getActivePane().render().el;\n  },\n\n  _initViews: function() {\n    this.vis = this.options.vis;\n    this.user = this.options.user;\n    this.column = this.options.column;\n\n    this._panes = new cdb.ui.common.TabPane({\n      el: this.el\n    });\n\n    this.addView(this._panes);\n\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Generating image',\n        quote: randomQuote()\n      })\n    );\n    this._panes.addTab('fail',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: 'Could not generate image'\n      })\n    );\n\n    this._panes.active('loading');\n  },\n\n  loadURL: function(url) {\n    this._showResult({ displayedLink: url, filename: url, content: url, type: 'url' });\n  },\n\n  _generateImageFilename: function() {\n    var filename = (this.vis.get('name') + ' by ' + this.user.nameOrUsername() + ' ' + moment(new Date()).format('MM DD YYYY hh mm ss'));\n    return filename.replace(/ /g, '_').toLowerCase();\n  },\n\n  generateImage: function(url) {\n    var callback = function(url) {\n      var filename = this._generateImageFilename();\n      this._showResult({\n        content: url,\n        type: 'url',\n        displayedLink: filename + '.' + this.options.format,\n        filename: filename\n      });\n    };\n\n    if (cdb.config.get('static_image_upload_endpoint')) {\n      callback = this._exportImage;\n    }\n\n    this._loadMapImage(url, callback.bind(this));\n  },\n\n  _showResult: function(options) {\n    this._panes.addTab('result',\n      ViewFactory.createByTemplate('common/dialogs/static_image/export_image_result_view', {\n        column: this.column,\n        response: options\n      })\n    );\n    this._panes.active('result');\n    this.trigger('finish', this);\n  },\n\n  _initBinds: function() {\n    this._panes.bind('tabEnabled', this.render, this);\n  },\n\n  /* Load first the map image and then merge with the overlays rendered frontend side */\n  _loadMapImage: function(url, callback) {\n    var self = this;\n    var mapImage = new Image();\n    mapImage.crossOrigin = 'Anonymous';\n    mapImage.onload = function() {\n      self._mergeAnnotations(mapImage, callback);\n    };\n    mapImage.src = url;\n  },\n\n  _exportImage: function(base64Image) {\n    var self = this;\n    var vis = this.options.vis;\n    // in case a image uploading endpoint is set post the image url there\n    // and show the html payload to the user\n    $.ajax({\n      type: 'POST',\n      url: cdb.config.get('static_image_upload_endpoint'),\n      data: {\n        base64image: base64Image,\n        name: vis.get('name'),\n        visualization_uuid: vis.get('id'),\n        description: vis.get('description')\n      },\n      success: function(content) {\n        self._showResult({ content: content, type: 'html' });\n      },\n      error: function(error) {\n        cdb.editor.ViewFactory.createDialogByTemplate('common/templates/fail', { msg: error.errors })\n        .render().appendToBody();\n      }\n    });\n  },\n\n  _mergeAnnotations: function(mapImage, callback) {\n    var x = this.options.x;\n    var y = this.options.y;\n    var width = this.options.width;\n    var height = this.options.height;\n    var format = this.options.format;\n\n    if (format === 'jpg') {\n      format = 'jpeg';\n    }\n\n    var imageProxyURL = cdb.config.get('url_prefix') + '/api/v1/image_proxy';\n\n    html2canvas($('.cartodb-map')[0], {\n      allowTaint: false, // don't allow non cors images taint the canvas\n      taintTest: true,\n      // useCORS: true,\n      proxy: {\n        url: imageProxyURL,\n        api_key: this.options.user.get('api_key')\n      },\n      background: undefined, // for transparent\n      // this function is called from html2canvas before the screenshot is taken\n      // first parameter is a clone of the current DOM\n      onclone: function(clonedDom) {\n        var doc = $(clonedDom);\n        // remove all the elements but annontations, text and image\n        // if other elements are present it's likely you get a tainted canvas because\n        // images not loaded with cors enabled\n        doc.find('.cartodb-map > div:not(.annotation, .text, .image, .ExportImageView)').remove();\n        doc.find('.ExportImageView').addClass('is-exportable');\n        // default background color for leaflet is gray, set to transparent so the image\n        // can be rendered on top of map image\n        doc.find('.cartodb-map').css('background-color', 'transparent');\n        return true;\n      },\n      onrendered: function(overlaysCanvas) {\n        var finalCanvas = document.createElement('canvas');\n        finalCanvas.width = width;\n        finalCanvas.height = height;\n        var ctx = finalCanvas.getContext('2d');\n        // map image alread has the final image size so render from the top,left\n        ctx.drawImage(mapImage, 0, 0);\n        // overlay canvas renders the full map size so crop it\n        ctx.drawImage(overlaysCanvas, x, y, width, height, 0, 0, width, height);\n        callback(finalCanvas.toDataURL('image/' + format));\n      }\n    });\n  },\n\n  ok: function() {\n    this.close();\n  },\n\n  _onInputClick: function(e) {\n    $(e.target).focus().select();\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Sync interval\n */\nmodule.exports = cdb.core.View.extend({\n\n  tagName: \"li\",\n\n  className: \"DatasetSelected-syncOptionsItem\",\n\n  events: {\n    \"click\": \"_onClick\"\n  },\n\n  initialize: function() {\n    this._setupModel();\n    this._template = cdb.templates.getTemplate('common/dialogs/sync_dataset/interval_template');\n    this._initBinds();\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this.$el.html(this._template(this.model.attributes));\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:checked', this._onToggleChecked, this);\n  },\n\n  _setupModel: function() {\n    this.model = this.options.model;\n  },\n\n  _onClick: function(e) {\n    this.killEvent(e);\n\n    if (!this.model.get(\"disabled\")) {\n      this.model.set(\"checked\", true);\n      this.trigger(\"checked\", this.model, this);\n    }\n  },\n\n  _onToggleChecked: function() {\n    if (this.model.get(\"checked\")) {\n      this.$(\".js-interval\").addClass(\"is-checked\");\n      this.$(\".js-input\").addClass(\"is-checked\");\n    } else {\n      this.$(\".js-interval\").removeClass(\"is-checked\");\n      this.$(\".js-input\").removeClass(\"is-checked\");\n    }\n  }\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar Backbone = (typeof window !== \"undefined\" ? window['Backbone'] : typeof global !== \"undefined\" ? global['Backbone'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('../../views/base_dialog/view');\nvar IntervalView = require('./interval_view');\nvar randomQuote = require('../../view_helpers/random_quote');\n\n/**\n * Sync modal\n */\nmodule.exports = BaseDialog.extend({\n\n  _INTERVALS: [\n    { name: 'Every hour', time: 60 * 60, type: 'hourly', if_external_source: false },\n    { name: 'Every day', time: 60 * 60 * 24, type: 'daily', if_external_source: false },\n    { name: 'Every week', time: 60 * 60 * 24 * 7, type: 'weekly', if_external_source: false },\n    { name: 'Every month', time: 60 * 60 * 24 * 30, type: 'monthly', if_external_source: true },\n    { name: 'Never', time: 0, type: 'never', if_external_source: true }\n  ],\n\n  initialize: function() {\n    if (!this.options.table) {\n      throw new TypeError('table is required');\n    }\n    this.elder('initialize');\n\n    this.model = new cdb.core.Model({\n      option: 'interval',\n      state: 'prefetching',\n      wait: true // await ack before changing model\n    });\n    this.table = this.options.table;\n\n    this._initBinds();\n\n    // Prefetch\n    this.table.fetch({\n      success: this._onFetchedTable.bind(this),\n      error: this._setterForDefaultErrorState()\n    });\n  },\n\n  _initBinds: function() {\n    this.model.bind('change:state', this.render, this);\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render: function() {\n    this.clearSubViews();\n    BaseDialog.prototype.render.call(this);\n    this._initIntervals();\n    return this;\n  },\n\n  // implements cdb.ui.common.Dialog.prototype.render\n  render_content: function() {\n    switch (this.model.get('state')) {\n      case 'prefetching':\n        return this._renderLoading('Checking synchronization');\n      case 'error':\n        return this.getTemplate('common/templates/fail')({ msg: '' });\n      case 'saving':\n        return this._renderLoading('Saving…');\n      default:\n        return this.getTemplate('common/dialogs/sync_dataset/sync_dataset')({\n          service: this._serviceName(),\n          url: this._serviceURL()\n        });\n    }\n  },\n\n  _onFetchedTable: function() {\n    this.model.set({\n      state: 'idle',\n      interval: this.table.synchronization.get('interval')\n    });\n  },\n\n  _renderLoading: function(title) {\n    return this.getTemplate('common/templates/loading')({\n      title: title,\n      quote: randomQuote()\n    });\n  },\n\n  _serviceURL: function() {\n    // Does it come from a datasource service (Dropbox, GDrive, ...)?\n    if (this.table.synchronization.get('service_name') || this.table.synchronization.get('service_item_id')) {\n      return this.table.synchronization.get('service_item_id');\n    }\n    return this.table.synchronization.get('url');\n  },\n\n  _serviceName: function() {\n    var name = this.table.synchronization.get('service_name');\n    if (name && _.isString(name)) {\n      return cdb.Utils.capitalize(name);\n    }\n  },\n\n  _initIntervals: function() {\n    this._intervals = new Backbone.Collection();\n\n    var fromExternalSource = this.table.synchronization.from_external_source;\n\n    _.each(this._INTERVALS, function(interval) {\n      var disabled = fromExternalSource && !interval.if_external_source;\n\n      this._intervals.add({\n        name: interval.name,\n        interval: interval.time,\n        checked: this.table.synchronization.get(\"interval\") === interval.time,\n        disabled: disabled\n      });\n    }, this);\n\n    this._intervals.each(function(interval) {\n      var view = new IntervalView({ model: interval });\n      view.bind(\"checked\", this._onIntervalChecked, this);\n      this.$(\".js-intervals\").append(view.render().$el);\n      this.addView(view);\n    }, this);\n  },\n\n  _onIntervalChecked: function(interval) {\n    this._intervals.each(function(i) {\n      if (interval.get(\"interval\") !== i.get(\"interval\")) {\n        i.set(\"checked\", false);\n      }\n    }, this);\n  },\n\n  _getSelectedInterval: function() {\n    return this._intervals.find(function(interval) {\n      return interval.get(\"checked\")\n    });\n  },\n\n  _addTab: function(name, view) {\n    this._contentPane.addTab(name, view.render());\n    this.addView(view);\n  },\n\n  ok: function() {\n    var selectedInterval = this._getSelectedInterval();\n\n    if (selectedInterval) {\n      this.model.set('state', 'saving');\n      var callbacks = {\n        success: this.close.bind(this),\n        error: this._setterForDefaultErrorState()\n      };\n\n      var interval = selectedInterval.get('interval');\n      if (interval) {\n        this.table.synchronization.save({\n          interval: interval\n        }, callbacks);\n      } else {\n        this.table.synchronization.destroy(callbacks);\n      }\n    } else {\n      this.close();\n    }\n  },\n\n  _setterForDefaultErrorState: function() {\n    return this.model.set.bind(this.model, 'state', 'error');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar EditFieldView = require('../edit_field_view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  Boolean field\n *  \n *  Choosing between true, false or null\n *\n *  new BooleanFieldView({\n *    model: new EditFieldModel({ attribute: 'column', value: 'paco' }),\n *    option: false\n *  })\n */\n\nmodule.exports = EditFieldView.extend({\n\n  options: {\n    template: 'common/edit_fields/boolean_field/boolean_field'\n  },\n\n  events: {\n    'click .js-true': '_onTrueClick',\n    'click .js-false': '_onFalseClick',\n    'click .js-null': '_onNullClick'\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n  },\n\n  _onTrueClick: function() {\n    this.model.set('value', true);\n  },\n\n  _onFalseClick: function() {\n    this.model.set('value', false);\n  },\n\n  _onNullClick: function() {\n    this.model.set('value', null);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar EditFieldView = require('../edit_field_view');\nvar DatePickerView = require('./date_picker/date_picker_view');\nvar TimeInputView = require('./time_input/time_input_view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  Date field\n *  \n *  Place to change a date value\n *\n *  new DateFieldView({\n *    model: new EditFieldModel({ type: 'date', attribute: 'column', value: 'paco' }),\n *    option: false\n *  })\n */\n\nmodule.exports = EditFieldView.extend({\n\n  className: 'EditField EditField--withBorder EditField--withSeparator',\n\n  options: {\n    showTime: true,\n    showGMT: false,\n    timezone: 'Z' // In PostgreSQL 'Z' is the same as +00:00\n  },\n\n  render: function() {\n    this.clearSubViews();\n    this._initViews();\n    return this;\n  },\n\n  _initViews: function() {\n    // Date picker\n    this.datePicker = new DatePickerView({\n      model: this.model\n    });\n\n    this.datePicker.bind('onDateChange', this._setDate, this);\n    this.$el.append(this.datePicker.render().el);\n    this.addView(this.datePicker);\n     \n    // Time input\n    if (this.options.showTime) {\n      this.timeInput = new TimeInputView({\n        model: this.model\n      });\n\n      this.$el.append(this.timeInput.render().el);\n      this.timeInput.bind('onTimeChange', this._setTime, this);\n      this.timeInput.bind('onSubmit', function() {\n        this.trigger('onSubmit', this.model, this);\n      }, this);\n      this.addView(this.timeInput);\n    }\n  },\n\n  _setTime: function(time) {\n    var oldDate = moment(this.model.get('value'));\n    var newDate = moment(new Date());\n    var date;\n\n    if (oldDate.isValid()) {\n      oldDate\n        .hour(newDate.hour())\n        .minutes(newDate.minutes())\n        .seconds(newDate.seconds());\n      date = oldDate.format('YYYY-MM-DDT');\n    } else {\n      date = newDate.format('YYYY-MM-DDT');\n    }\n\n    this.model.set('value', date + time + this.options.timezone);\n  },\n\n  _setDate: function(date) {\n    var oldDate = moment(this.model.get('value'));\n    var newDate = moment(date);\n    var dateStr;\n\n    if (oldDate.isValid()) {\n      oldDate\n        .month(newDate.month())\n        .date(newDate.date())\n        .year(newDate.year());\n      dateStr = oldDate.format('YYYY-MM-DDTHH:mm:ss');\n    } else {\n      dateStr = newDate.format('YYYY-MM-DDTHH:mm:ss');\n    }\n\n    this.model.set('value', dateStr + this.options.timezone);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\n/**\n * Dropdown for a calendar selector.\n * Uses the DatePicker plugin internally to render the calendar and view behaviour.\n */\n\nmodule.exports = cdb.admin.DropdownMenu.extend({\n\n  className: 'Dropdown',\n\n  // defaults, used for\n  options: {\n    flat: true,\n    date: '2008-07-01',\n    current: '2008-07-31',\n    calendars: 1,\n    starts: 1\n  },\n\n  initialize: function() {\n    if (!this.model) throw new Error('model is required');\n    this.elder('initialize');\n    this.template = cdb.templates.getTemplate('common/edit_fields/date_field/date_picker/calendar_dropdown');\n    this._initDefaults();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        initialDateStr: moment(this.model.get('value')).format('YYYY-MM-DD')\n      })\n    );\n\n    cdb.god.bind('closeDialogs', this.hide, this);\n    $('body').append(this.el);\n    this._initCalendar(); // must be called after element is added to body!\n\n    return this;\n  },\n\n  clean: function() {\n    this._$calendar().DatePickerHide();\n    cdb.admin.DropdownMenu.prototype.clean.call(this);\n  },\n\n  _initDefaults: function() {\n    var utc = new Date().getTimezoneOffset();\n    var today = moment(new Date()).utcOffset(utc).format('YYYY-MM-DD');\n    this.options.date = this.model.get('value') && moment(this.model.get('value')).format('YYYY-MM-DD') || today;\n    this.options.current = this.options.date;\n  },\n\n  // should not be called until element is located in document\n  _initCalendar: function() {\n    var self = this;\n    this._$calendar().DatePicker(\n      _.extend(this.options, this.model.attributes, {\n        onChange: function(formatted, date) {\n          self.trigger('onDateSelected', date, this);\n          self.hide();\n        }\n      })\n    );\n  },\n\n  _$calendar: function() {\n    return this.$('.js-calendar');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar CalendarDropdown = require('./calendar_dropdown_view.js');\n\n/**\n * Date picker for a single date.\n */\nmodule.exports = cdb.admin.DropdownMenu.extend({\n\n  className: 'DatePicker',\n\n  events: {\n    'click .js-date-picker': '_onClickDateBtn'\n  },\n\n  options: {\n    vertical_position: 'down',\n    tick: 'center',\n    dateFormat: 'YYYY-MM-DD'\n  },\n\n  initialize: function() {\n    this.elder('initialize');\n    this._initBinds();\n  },\n\n  render: function() {\n    var date = this.model.get('value') || new Date();\n\n    this.$el.html(\n      cdb.templates.getTemplate('common/edit_fields/date_field/date_picker/date_picker')({\n        readOnly: this.model.get('readOnly'),\n        date: moment(date).format(this.options.dateFormat)\n      })\n    );\n\n    if (this.model.get('readOnly')) {\n      this.undelegateEvents();\n    }\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('change', this.render, this);\n  },\n\n  _onClickDateBtn: function(ev) {\n    this.killEvent(ev);\n\n    // Behave like a toggle\n    if (this._calendar) {\n      this._destroyCalendarDropdown();\n    } else {\n      this._calendar = new CalendarDropdown(\n        _.extend(this.options, {\n          target: $(ev.target).closest('button'),\n          model: this.model\n        })\n      );\n      this.addView(this._calendar);\n      this._calendar.render();\n      this._calendar.on('onDropdownHidden', this._destroyCalendarDropdown, this);\n      this._calendar.on('onDateSelected', function(date) {\n        this.trigger('onDateChange', date, this);\n      }, this);\n      this._calendar.open();\n    }\n  },\n\n  _destroyCalendarDropdown: function() {\n    this._calendar.options.target.unbind('click', this._calendar._handleClick);\n    this._calendar.clean();\n    this._calendar = null;\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n\n/**\n *  Time input for date field\n *  \n *  Place to change hours, minutes and seconds\n *  for the date field.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'TimeInput',\n\n  events: {\n    'keydown .js-input': '_onKeyDown',\n    'keyup .js-input': '_onKeyUp'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/edit_fields/date_field/time_input/time_input');\n  },\n\n  render: function() {\n    var date = this.model.get('value') || new Date();\n    this.$el.html(\n      this.template({\n        readOnly: this.model.get('readOnly'),\n        time: moment(date).format('HH:mm:ss')\n      })\n    )\n\n    if (this.model.get('readOnly')) {\n      this.undelegateEvents();\n    }\n\n    return this;\n  },\n\n  _onKeyDown: function(ev) {\n    if (ev.keyCode === 13) {\n      ev.preventDefault();\n      this.trigger('onSubmit', this);\n      return false;\n    }\n  },\n\n  _onKeyUp: function(ev) {\n    var value = $(ev.target).val();\n    this.trigger('onTimeChange', value, this);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\n\n/**\n *  Default model for each field model\n *\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    attribute: '',\n    value: '',\n    type: 'string',\n    readOnly: false\n  },\n\n  initialize: function() {\n    // Validation control variable\n    this.validationError = '';\n    this.bind('valid', function() {\n      this.validationError = '';\n    }, this);\n    this.bind('error', function(m, error) {\n      this.validationError = error;\n    });\n  },\n\n  _validate: function(attrs, options) {\n    var valid = cdb.core.Model.prototype._validate.apply(this, arguments);\n    if (valid) {\n      this.trigger('valid')\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  validate: function(attrs) {\n    if (!attrs) return;\n\n    var val = attrs.value;\n    var type = attrs.type;\n\n    if (attrs.type === \"number\") {\n      var pattern = /^(\\+|-)?(?:[0-9]+|[0-9]*\\.[0-9]+)$/;\n      if (val && !pattern.test(val)) {\n        return \"Invalid number\"\n      }  \n    }\n\n    if (type === \"boolean\") {\n      if (val !== null && val !== true && val !== false) {\n        return \"Invalid boolean\"\n      }\n    }\n\n    if (type === \"date\") {\n      if (val && !moment(val).isValid()) {\n        return \"Invalid date\"\n      }\n    }\n  },\n\n  getError: function() {\n    return this.validationError;\n  },\n\n  isValid: function() {\n    if (!this.validate) {\n      return true;\n    }\n    return !this.validate(this.attributes) && this.validationError === \"\";\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Common edit field view\n *  \n */\n\n\nmodule.exports = cdb.core.View.extend({\n\n  className: 'EditField',\n\n  options: {\n    template: 'common/edit_fields/edit_field',\n  },\n\n  initialize: function() {\n    if (!this.model) {\n      this.model = new cdb.core.Model({ value: '' });\n    }\n    if (this.options.template) {\n      this.template = cdb.templates.getTemplate(this.options.template);  \n    }\n    this._initBinds();\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template(\n        _.extend(\n          this.options,\n          {\n            type: this.model.get('type'),\n            value: this.model.get('value'),\n            attribute: this.model.get('attribute'),\n            readOnly: this.model.get('readOnly')    \n          }\n        )\n      )\n    );\n\n    if (this.model.get('readOnly')) {\n      this.undelegateEvents();\n    }\n\n    return this;\n  },\n\n  _initBinds: function() {\n    this.model.bind('error valid', this._setFieldStyle, this);\n    this.model.bind('change:readOnly', this.render, this);\n  },\n\n  _setFieldStyle: function() {\n    this.$el[ this.model.getError() ? 'addClass' : 'removeClass']('is-invalid');\n  },\n\n  _hasSubmit: function(ev) {\n    if (!ev) {\n      throw new Error('event needed to check if user has submitted from the input');\n    }\n\n    var ua = navigator.userAgent.toLowerCase();\n    var isMac = /mac os/.test(ua);\n\n    return ( (isMac && ev.metaKey) || (!isMac && ev.ctrlKey) ) && ev.keyCode === 13;\n  },\n\n  isValid: function() {\n    return this.model.isValid();\n  }\n\n});",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar EditFieldView = require('../edit_field_view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  Number field\n *  \n *  Place to add/edit number editions\n *  - It accepts a number model with {attribute: 'colum', value: 'hello'}.\n *\n *  new NumberFieldView({\n *    model: new NumberFieldModel({ attribute: 'column', value: 'paco' }),\n *    option: false\n *  })\n */\n\nmodule.exports = EditFieldView.extend({\n\n  options: {\n    template: 'common/edit_fields/number_field/number_field'\n  },\n\n  events: {\n    'keydown .js-input': '_onKeyDown',\n    'keyup .js-input': '_onKeyUp'\n  },\n\n  _hasSubmit: function(ev) {\n    if (!ev) {\n      throw new Error('event needed to check if user has submitted from the input');\n    }\n    return ev.keyCode === 13\n  },\n\n  _onKeyDown: function(ev) {\n    if (this._hasSubmit(ev) && this.model.isValid()) {\n      ev.preventDefault();\n      this.trigger('onSubmit', this.model, this);\n      return false;\n    }\n  },\n\n  _onKeyUp: function(ev) {\n    if (this._hasSubmit(ev) && this.model.isValid()) {\n      ev.preventDefault();\n      return false;\n    }\n\n    var value = $(ev.target).val();\n    // Null values are valid for number type\n    if (value === \"\") {\n      value = null;\n    }\n    this.model.set('value', value);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar EditFieldView = require('../edit_field_view');\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n *  String field\n *  \n *  Place to edit and capture string editions\n *  - It accepts a default model with {attribute: 'colum', value: 'hello'}.\n *\n *  new StringFieldView({\n *    model: new EditFieldModel({ attribute: 'column', value: 'paco' }),\n *    option: false\n *  })\n */\n\nmodule.exports = EditFieldView.extend({\n\n  options: {\n    template: 'common/edit_fields/string_field/string_field',\n    autoResize: true\n  },\n\n  events: {\n    'keydown .js-textarea': '_onKeyDown',\n    'keyup .js-textarea':  '_onKeyUp'\n  },\n\n  render: function() {\n    this.elder('render');\n\n    // Hack to resize correctly the textarea\n    if (this.options.autoResize) {\n      this._resize();\n    }\n\n    return this;\n  },\n\n  _onKeyDown: function(ev) {\n    if (this._hasSubmit(ev)) {\n      ev.preventDefault();\n      this.trigger('onSubmit', this.model, this);\n      return false;\n    }\n  },\n\n  _onKeyUp: function(ev) {\n    ev.preventDefault();\n    var value = $(ev.target).val();\n    this.model.set('value', value);\n\n    if (this.options.autoResize) {\n      this._resize();\n    }\n  },\n\n  // Hack function to resize automatially textarea\n  _resize: function() {\n    var $textarea = this.$(\".js-textarea\");\n\n    // Hello hacky boy\n    if ($textarea) {\n      setTimeout(function() {\n        $textarea.height(20);\n        $textarea.height($textarea[0].scrollHeight - 22);\n      });\n    }\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/** \n *  Old form spinner\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n  className: 'form-view form_spinner',\n\n  defaults: {\n    max: 999999999999,\n    min: -999999999999,\n    inc: 1,\n    width: 25,\n    pattern: /^-?[0-9]+\\.?[0-9]*$/,\n    debounce_time: 200\n  },\n\n  events: {\n    'click .plus': '_plus',\n    'click .minus': '_minus',\n    'keypress input.value': '_checkInputPress',\n    'keydown input.value': '_checkInputPress',\n    'keyup input.value': '_checkInputUp',\n    'change .value': '_checkValueChange'\n  },\n\n  initialize: function() {\n    _.bindAll(this, '_fireChange', '_checkNumber');\n    this.property = this.options.property;\n    this.model.bind('change', this.render, this);\n\n    // Check pattern, if it is empty or not valid,\n    // delete the option before extending defaults\n    if (!this.options.pattern ||\n        typeof this.options.pattern !== \"object\" ||\n        (typeof this.options.pattern === \"object\" && !this.options.pattern.test)\n      )\n    {\n      delete this.options.pattern;\n    }\n\n    _.defaults(this.options, this.defaults);\n\n    if(this.options.debounce_time > 0) {\n      this._fireChange = _.debounce(this._fireChange, this.options.debounce_time);\n    }\n  },\n\n  render: function(prop) {\n    var value = this.options.initValue || this.model.get(this.property);\n\n    if (prop && _.isNumber(prop)) {\n      value = prop;\n    }\n\n    this.$el.html('<input class=\"value\" ' + (this.options.disabled ? 'readonly' : '') + ' value=\"\" style=\"width:' + (this.options.width) + 'px!important\"/><a href=\"#\" class=\"plus\">+</a><a href=\"#\" class=\"minus\">-</a>');\n    this.$('.value').val(value);\n\n    if (this.options.disabled) {\n      this.undelegateEvents();\n      this.$el\n      .addClass('disabled')\n      .find('a').bind('click', this.killEvent);\n    }\n\n    return this;\n  },\n\n  _fireChange: function() {\n    this.model.change();\n  },\n\n  _changeValue: function(a) {\n    this.model.set(a, { silent: true });\n    this._fireChange();\n  },\n\n  inc: function(c) {\n    var a = {};\n    var v = a[this.property] = this.model.get(this.property) + c;\n    v = a[this.property] = Math.min(this.options.max, v.toFixed? v.toFixed(1): 1*v);\n    a[this.property] = Math.max(this.options.min, v);\n    this._changeValue(a);\n    // don't wait to be notified by model, render as fast as the user changes the value\n    this.render(a[this.property]);\n  },\n\n  _plus: function(e) {\n    e && e.preventDefault();\n    this.inc(this.options.inc);\n    return false;\n  },\n\n  _minus: function(e) {\n    e && e.preventDefault();\n    this.inc(-this.options.inc);\n    return false;\n  },\n\n  _checkNumber: function(number) {\n    return this.options.pattern.test(number);\n  },\n\n  _checkInputPress: function(ev) {\n    var newChar = String.fromCharCode(ev.charCode);\n\n    if(newChar == '-' || newChar == '.' || 1*newChar !== NaN) {\n      return true;\n    } else {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return false;\n    }\n  },\n\n  _checkInputUp: function(ev) {\n    this.value? null : this.value = this.model.get(this.property);\n    var number = $(ev.target).val();\n\n    // If it is an ENTER -> saves!\n    if (ev.keyCode === 13) {\n      this._saveValue(ev);\n      return false;\n    }\n\n    // If not, check the key\n    if (!this._checkNumber(number) && number != '-' && number != '') {\n      this.$el.find(\"input.value\").val(this.value);\n      // ev.stopPropagation();\n      // ev.preventDefault();\n    } else {\n      if(number != '-' && number != '') {\n        this.value = $(ev.target).val();\n      }\n    }\n    return true;\n  },\n\n  _checkValueChange: function(ev) {\n    var number = $(ev.target).val();\n    number = (number == '' || number == '-')? 0 : 1*number\n    if (!this._checkNumber(number)) {\n      this.$el.find(\"input.value\").val(this.value);\n    } else {\n      this._saveValue(ev);\n      this.value = $(ev.target).val();\n    }\n    return true;\n  },\n\n  _saveValue: function(ev) {\n    var a = {};\n    var val = this.$el.find(\"input.value\").val()\n    var baseNumber = (this.options.min < 0 && this.options.max > 0)?\n      0:\n      this.options.min;\n\n    var number = (val == '' || val == '-') ? baseNumber : 1*val;\n\n    this.$el.find(\"input.value\").val(number);\n\n    a[this.property] = number;\n    this.model.set(a);\n\n    cdb.god.trigger(\"closeDialogs\");\n  }\n\n});",
    "var BaseDialog = require('../views/base_dialog/view');\n\n/**\n *  Dialog for drop actions using mamufas\n *\n */\n\n\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog is-opening MamufasDialog',\n\n  overrideDefaults: {\n    template_name: 'common/views/base_dialog/template',\n    triggerDialogEvents: false\n  },\n\n  initialize: function() {\n    BaseDialog.prototype.initialize.apply(this, arguments);\n    this.template = cdb.templates.getTemplate('common/mamufas_import/mamufas_import_dialog');\n  },\n\n  render_content: function() {\n    return this.template();\n  },\n\n  render: function() {\n    this.elder('render');\n    this.$('.Dialog-content').addClass('Dialog-content--expanded');\n    return this;\n  },\n\n  hide: function() {\n    BaseDialog.prototype.hide.apply(this, arguments);\n    this.trigger('hide');\n    this._setBodyForDialogMode('remove')\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar MamufasDialog = require('./mamufas_import_dialog_view');\n\n/**\n *  Big mamufas to import files\n *  using drag and drop\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.model = new cdb.core.Model({ visible: false });\n  },\n\n  render: function() {\n    return this;\n  },\n\n  _createDragster: function() {\n    if (this.dragster) {\n      this._destroyDragster();\n    }\n    this.dragster = new Dragster(this.$el[0]);\n  },\n\n  _createDropzone: function() {\n    if (this.dropzone) {\n      this._destroyDropzone();\n    }\n    this.dropzone = new Dropzone(this.$el[0], {\n      url: ':)',\n      autoProcessQueue: false,\n      previewsContainer: false\n    });\n  },\n\n  _destroyDragster: function() {\n    if (this.dragster) {\n      this.dragster.removeListeners();\n      this.dragster.reset();\n      delete this.dragster;\n    }\n  },\n\n  _destroyDropzone: function() {\n    if (this.dropzone) {\n      this.dropzone.destroy();\n      delete this.dropzone;\n    }\n  },\n\n  _initBinds: function() {\n    var self = this;\n    var mamufas = new MamufasDialog({ clean_on_hide: true });\n\n    this.$el.on( \"dragster:enter\", function (e) {\n      mamufas.appendToBody();\n    });\n\n    this.$el.on( \"dragster:leave\", function (e) {\n      mamufas.hide();\n    });\n\n    this.dropzone.on(\"drop\", function (ev) {\n      self.dragster.dragleave(ev);\n      mamufas.hide();\n      self.dropzone.removeFile(ev);\n\n      var files = ev.dataTransfer.files;\n      if (files && files.length > 0) {\n        if (files.length === 1) { files = files[0] }\n        cdb.god.trigger('fileDropped', files, this);\n      }\n    });\n  },\n\n  _removeBinds: function() {\n    this.$el.off(\"dragster:enter\");\n    this.$el.off(\"dragster:leave\");\n  },\n\n  enable: function() {\n    if (!this.model.get('visible')) {\n      this._createDragster();\n      this._createDropzone();\n      this._initBinds();\n      this.model.set('visible', true);\n    }\n  },\n\n  disable: function() {\n    if (this.model.get('visible')) {\n      this._removeBinds();\n      this._destroyDragster();\n      this._destroyDropzone();\n      this.model.set('visible', false);\n    }\n  },\n\n  clean: function() {\n    this._removeBinds();\n    this.elder('clean');\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Model representing the query string params for a \"paged search\" of a collection (matching the server-side APIs).\n *\n * @example usage\n *   var PagedSearch = require('common/paged_search_model');\n *   pagedSearch = new PagedSearch({ … })\n *   pagedSearch.fetch(collection) // => jqXHR, GET /collection/123?page=1&per_page20\n *   pagedSearch.set({ page: 2, per_page: 10, q: 'test' });\n *   pagedSearch.fetch(collection) // => GET /collection/123?page=2&per_page10&q=test\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    per_page: 20,\n    page: 1\n    // order: 'name'\n    // q: '',\n  },\n\n  fetch: function(collection) {\n    collection.trigger('fetching');\n    return collection.fetch({\n      data: this.attributes\n    });\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Get oauth url from the service requested\n *\n *  - It needs a datasource name or it won't work.\n *\n *  new cdb.admin.Service({ datasource_name: 'dropbox' })\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  _DATASOURCE_NAME: 'dropbox',\n\n  initialize: function(attrs, opts) {\n    if (opts.datasource_name) {\n      this._DATASOURCE_NAME = opts.datasource_name;\n    }\n  },\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('imports_service', method);\n    return '/api/' + version + '/imports/service/' + this._DATASOURCE_NAME + '/auth_url'\n  },\n\n  parse: function(r) {\n    return r\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n *  Model to check if oAuth token is valid or not\n *\n *  - It needs a datasource name or it won't work.\n *\n *  new ServiceToken({ datasource_name: 'dropbox' })\n */\n\nmodule.exports = cdb.core.Model.extend({\n\n  _DATASOURCE_NAME: 'dropbox',\n\n  initialize: function(attrs, opts) {\n    if (opts.datasource_name) {\n      this._DATASOURCE_NAME = opts.datasource_name;\n    }\n  },\n\n  url: function(method) {\n    var version = cdb.config.urlVersion('imports_service', method);\n    return '/api/' + version + '/imports/service/' + this._DATASOURCE_NAME + '/token_valid'\n  },\n\n  parse: function(r) {\n    return r\n  }\n\n});\n",
    "var _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar BaseDialog = require('./views/base_dialog/view');\n\n/**\n * Convenient factory to create views without having to create new files.\n */\nmodule.exports = {\n\n  createDialogByTemplate: function(templateOrStr, templateData, dialogOptions) {\n    return this.createDialogByView(this.createByTemplate(templateOrStr, templateData), dialogOptions);\n  },\n\n  /**\n   * @return {Object} instance of cdb.core.View, which takes two params of template and templateData\n   */\n  createByTemplate: function(templateOrStr, templateData, viewOpts) {\n    var template = _.isString(templateOrStr) ? cdb.templates.getTemplate(templateOrStr) : templateOrStr;\n\n    var view = new cdb.core.View(viewOpts);\n    view.render = function() {\n      this.$el.html(\n        template(templateData)\n      );\n      return this;\n    };\n\n    return view;\n  },\n\n  /**\n   * Creates a view that holds a list of views to be rendered.\n   * @param {Array} list of View object, i.e. have a render method, $el, and clean method.\n   * @param {Object,undefined} viewOpts view options, .e.g {className: 'Whatever'}\n   * @return {Object} A view\n   */\n  createByList: function(views, viewOpts) {\n    var listView = new cdb.core.View(viewOpts);\n    listView.render = function() {\n      this.clearSubViews();\n      _.each(views, function(view) {\n        this.addView(view);\n        this.$el.append(view.render().$el);\n      }, this);\n      return this;\n    };\n    return listView;\n  },\n\n  createDialogByView: function(contentView, dialogOptions) {\n\n    var options = _.extend({ clean_on_hide: true, enter_to_confirm: true }, dialogOptions);\n\n    return new (BaseDialog.extend({\n      initialize: function() {\n        this.elder('initialize');\n        this.addView(contentView);\n      },\n\n      render_content: function() {\n        return contentView.render().el;\n      }\n    }))(options);\n  }\n};\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\n/**\n * Check if Linux user used right/middle click at the time of the event\n *\n * @param ev {Event}\n * @returns {boolean}\n */\nfunction isLinuxMiddleOrRightClick(ev) {\n  return ev.which === 2 || ev.which === 3;\n}\n\n/**\n * Check if Mac user used CMD key at the time of the event Mac user used CMD key at the time of the event.\n *\n * @param ev {Event}\n * @returns {boolean}\n */\nfunction isMacCmdKeyPressed(ev) {\n  return ev.metaKey;\n}\n\nfunction isCtrlKeyPressed(ev) {\n  return ev.ctrlKey;\n}\n\n/**\n * Click handler for a cartodb.js view, to navigate event target's href URL through the view's router.navigate method.\n *\n * The default behavior is:\n * Unless cmd/ctrl keys are pressed it will cancel the default link behavior and instead navigate to the URL set in the\n * target's href attribute.\n *\n * Prerequisities:\n *  - view has a this.router instance.\n *\n * Example of how to use:\n *   - In a template:\n *     <a href=\"/some/uri\" id=\"#my-link\" ...\n *     <a href=\"/special/uri\" id=\"#my-special-link\" ...\n *\n *   - In the view file:\n *     var navigateThroughRouter = require('../../common/view_helpers/navigateThroughRouter');\n *     module.exports = new cdb.core.View.extend({\n *       events: {\n *         'click a#my-link': navigateThroughRouter\n *         'click a#my-special-link': this._myCustomRoute\n *       }\n *\n *       _myCustomRoute: function(ev) {\n *         // Here you can do you custom logic before/after the routing, e.g.:\n *         console.log('before changing route');\n *         navigateThroughRouter.apply(this, arguments);\n *         console.log('after changing route');\n *       }\n *\n * @param ev {Event}\n */\nmodule.exports = function(ev) {\n  // We always kill the default behaviour of the event, since container around view might have other click behavior.\n  // In case of a cmd/ctrl click by an user.\n  this.killEvent(ev);\n  var url = $(ev.target).closest('a').attr('href');\n\n  if (!url) {\n    return false;\n  }\n\n  if (!isLinuxMiddleOrRightClick(ev) && !isMacCmdKeyPressed(ev)) {\n    (this.router || this.options.router).navigate(url, { trigger: true });\n  } else if (isCtrlKeyPressed(ev) || isMacCmdKeyPressed(ev)) {\n    window.open(url, '_blank');\n  }\n};\n",
    "var pluralizeStr = function(singular, plural, count) {\n  if (arguments.length === 2) {\n    // Backward compability with prev usages, retrofit to the new params signature\n    // pluralizeStr('foobar' , 3) // => foobars\n    return pluralizeStr.call(this, arguments[0], arguments[0] + 's', arguments[1]);\n  }\n\n  return count === 1 ? singular : plural;\n};\n\npluralizeStr.prefixWithCount = function(singular, plural, count) {\n  return pluralizeStr(\n    '1 ' + singular, // e.g. 1 item\n    count + ' ' + plural, // e.g. 123 items\n    count\n  );\n}\n\nmodule.exports = pluralizeStr;\n",
    "/**\n * Random quote\n */\nmodule.exports = function() {\n\n  var template  = _.template('<p class=\"CDB-Text CDB-Size-medium u-altTextColor\">\"<%= quote %>\"</p><% if (author) { %><p class=\"CDB-Text CDB-Size-medium u-altTextColor u-tSpace\"><em>– <%- author %></em></p><% } %>');\n\n  var quotes = [\n    { quote: \"Geographers never get lost. They just do accidental field work.\", author: \"Nicholas Chrisman\" },\n    { quote: \"Geography is just physics slowed down, with a couple of trees stuck in it.\", author: \"Terry Pratchett\" },\n    { quote: \"Not all those who wander are lost.\", author: \"J. R. R. Tolkien\" },\n    { quote: \"In that Empire, the Art of Cartography attained such Perfection that the map of a single Province occupied the entirety of a City.\", author: \"Jorge Luis Borges\" },\n    { quote: \"X marks the spot\", author: \"Indiana Jones\" },\n    { quote: \"It's turtles all the way down.\", author: null },\n    { quote: \"Remember: no matter where you go, there you are.\", author: null },\n    { quote: \"Without geography, you're nowhere!\", author: \"Jimmy Buffett\" },\n    { quote: \"our earth is a globe / whose surface we probe /<br />no map can replace her / but just try to trace her\", author: \"Steve Waterman\" },\n    { quote: \"Everything happens somewhere.\", author: \"Doctor Who\" },\n    { quote: \"A map is the greatest of all epic poems. Its lines and colors show the realization of great dreams.\", author: \"Gilbert H. Grosvenor\" },\n    { quote: \"Everything is related to everything else,<br />but near things are more related than distant things.\", author: \"Tobler's first law of geography\" },\n    { quote: \"Hic Sunt Dracones\", author: null },\n    { quote: \"Here be dragons\", author: null },\n    { quote: \"Stand in the place where you live / Now face North /<br/>Think about direction / Wonder why you haven't before\", author: \"R.E.M\" },\n    { quote: \"The virtue of maps, they show what can be done with limited space, they foresee that everything can happen therein.\", author: \"José Saramago\" }\n  ];\n\n  var r = Math.round(Math.random() * (quotes.length - 1));\n\n  return template(quotes[r]);\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar BaseDialog = cdb.ui.common.Dialog;\n\n/**\n * Abstract view for a dialog, a kind of view that takes up the full screen overlaying any previous content.\n *\n * To be extended for a specific use-case.\n * It inherits from CartoDB.js' Dialog view so has some particular behavior/convention of how to be used, see example\n *\n * Example of how to use:\n *   // Extend this view\n *   var MyDialog = BaseDialog.extend({\n *     render_content: function() {\n *       return 'Hello world!';\n *     }\n *   });\n *\n *   // Create instance object.\n *   var dialog = new MyDialog();\n *\n *   // To render & show initially (only to be called once):\n *   dialog.appendToBody();\n */\nmodule.exports = BaseDialog.extend({\n\n  className: 'Dialog is-opening',\n\n  overrideDefaults: {\n    template_name: 'common/views/base_dialog/template',\n    triggerDialogEvents: true\n  },\n\n  initialize: function() {\n    // Override defaults of parent\n    _.defaults(this.options, this.overrideDefaults);\n    this.elder('initialize');\n    this.bind('show', this._setBodyForDialogMode.bind(this, 'add'));\n    this.bind('hide', this._setBodyForDialogMode.bind(this, 'remove'));\n  },\n\n  show: function() {\n    BaseDialog.prototype.show.apply(this, arguments);\n    this.trigger('show');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogOpened');\n    }\n    this.$el.removeClass('is-closing');\n\n    // Blur current element (e.g. a <a> tag that was clicked to open this window)\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n  },\n\n  render: function() {\n    BaseDialog.prototype.render.apply(this, arguments);\n    this.$('.content').addClass('is-newContent');\n\n    if (this._isSticky()) {\n      this.$el.addClass('is-sticky');\n    }\n\n    this.show();\n    return this;\n  },\n\n  _isSticky: function() {\n    return this.options && this.options.sticky;\n  },\n\n  close: function() {\n    this._cancel(undefined, true);\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.open for animated opening\n   */\n  open: function() {\n    BaseDialog.prototype.open.apply(this, arguments);\n    this.show();\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype.hide to implement animation\n   */\n  hide: function() {\n    BaseDialog.prototype.hide.apply(this, arguments);\n    this.trigger('hide');\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._cancel to implement animation upon closing the dialog and to handle hide event.\n   */\n  _cancel: function(ev, skipCancelCallback) {\n    if (ev) this.killEvent(ev);\n\n    if (this._isSticky()) {\n      return;\n    }\n\n    this.$el.removeClass('is-opening').addClass('is-closing');\n\n    // Use timeout instead of event listener on animation since the event triggered differs depending on browser\n    // Timing won't perhaps be 100% accurate but it's good enough\n    // The timeout should match the .Dialog.is-closing animation duration.\n    var self = this;\n    setTimeout(function() {\n      // from original _cancel\n      if (self.cancel && !skipCancelCallback) {\n        self.cancel();\n      }\n      BaseDialog.prototype.hide.call(self);\n    }, 80); //ms\n\n    // Trigger events immediately, don't wait for the timeout above\n    this.trigger('hide');\n    if (this.options.triggerDialogEvents) {\n      cdb.god.trigger('dialogClosed');\n    }\n  },\n\n  /**\n   * @override cdb.ui.common.Dialog.prototype._ok to not hide dialog by default if there's an ok method defined.\n   */\n  _ok: function(ev) {\n    this.killEvent(ev);\n    if (this.ok) {\n      this.ok();\n    } else {\n      this.close();\n    }\n  },\n\n  _setBodyForDialogMode: function(action) {\n    $('body')[action + 'Class']('is-inDialog');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\ncdb.admin = (typeof window !== \"undefined\" ? window['cdb']['admin'] : typeof global !== \"undefined\" ? global['cdb']['admin'] : null);\nvar moment = (typeof window !== \"undefined\" ? window['moment'] : typeof global !== \"undefined\" ? global['moment'] : null);\nvar Spinner = require('../../forms/spinner');\n\n/**\n * Custom picer for a dates range.\n */\nmodule.exports = cdb.core.View.extend({\n\n  _MAX_RANGE: 30,\n\n  className: 'DatePicker',\n\n  options: {\n    flat: true,\n    date: ['2008-07-31', '2008-07-31'],\n    current: '2008-07-31',\n    calendars: 2,\n    mode: 'range',\n    starts: 1\n  },\n\n  events: {\n    'click .js-dates': '_toggleCalendar',\n    'click .js-fourHours': '_setLastFourHours',\n    'click .js-oneDay': '_setLastDay',\n    'click .js-oneWeek': '_setLastWeek'\n  },\n\n  initialize: function() {\n    // Generate model\n    this.model = new cdb.core.Model({\n      fromDate: '',\n      fromHour: 0,\n      fromMin:  0,\n      toDate: '',\n      toHour: 23,\n      toMin:  59,\n      user_timezone: 0 // Explained as GMT+0\n    });\n\n    this.template = this.options.template || cdb.templates.getTemplate('common/views/date_pickers/dates_range');\n\n    // Init binds\n    this._initBinds();\n\n    // Set default dates\n    this._setToday();\n  },\n\n  render: function() {\n    var self = this;\n\n    this.clearSubViews();\n\n    this.$el.append(\n      this.template(\n        _.extend(\n          this.model.attributes,\n          { max_days: this._MAX_RANGE }\n        )\n      )\n    );\n\n    setTimeout(function() {\n      self._initCalendar();\n      self._hideCalendar();\n      self._initTimers();\n    }, 100);\n\n    return this;\n  },\n\n  _initBinds: function() {\n    _.bindAll(this, '_onDatesChange', '_onDocumentClick');\n\n    this.model.bind('change', this._setValues,      this);\n    this.model.bind('change', this._onValuesChange, this);\n\n    // Outside click\n    $(document).bind('click', this._onDocumentClick);\n  },\n\n  _destroyBinds: function() {\n    $(document).unbind('click', this._onDocumentClick);\n  },\n\n  _setValues: function(m, c) {\n    var text = 'Choose your dates';\n    var data = this.model.attributes;\n\n    if (data.fromDate && data.toDate) {\n      text =\n        'From ' +\n        '<strong>' +\n        this.model.get('fromDate') + ' ' +\n        (cdb.Utils.pad(this.model.get('fromHour'),2) + ':' + cdb.Utils.pad(this.model.get('fromMin'),2)) +\n        '</strong>' +\n        ' to ' +\n        '<strong>' +\n        this.model.get('toDate') + ' ' +\n        (cdb.Utils.pad(this.model.get('toHour'),2) + ':' + cdb.Utils.pad(this.model.get('toMin'),2)) +\n        '</strong>' +\n        '<i class=\"CDB-IconFont CDB-IconFont-calendar DatePicker-datesIcon\"></i>';\n    }\n\n    this.$('.DatePicker-dates').html(text);\n  },\n\n  _setToday: function() {\n    var datesUTC = this.model.get('user_timezone');\n    var today = moment().utc(datesUTC);\n    var previous = moment().utc(datesUTC).subtract((this._MAX_RANGE - 1), 'days');\n    this.options.date = [previous.format(\"YYYY-MM-DD\"), today.format(\"YYYY-MM-DD\")];\n    this.options.current = today.format(\"YYYY-MM-DD\");\n    this._setModelFromPrevious(previous);\n  },\n\n  _initCalendar: function() {\n    var selector = '.DatePicker-calendar';\n\n    // Can't initialize calendar if not already present in document... avoid errors being thrown\n    if (!document.body.contains(this.$(selector)[0])) return;\n\n    this.calendar = this.$(selector).DatePicker(\n      _.extend(this.options, {\n        onChange: this._onDatesChange,\n        onRender: function(d) { // Disable future dates and dates < 30 days ago\n\n          var date = d.valueOf();\n          var now = new Date();\n\n          var thirtyDaysAgo = new Date();\n          thirtyDaysAgo.setDate(now.getDate() - 30);\n\n          return (date < thirtyDaysAgo) || (date > now) ? { disabled: true } : ''\n\n        }\n      })\n    );\n  },\n\n  _onDatesChange: function(formatted, dates) {\n\n    // Check if selected dates have more than 30 days\n    var start = moment(formatted[0]);\n    var end = moment(formatted[1]);\n\n    if (Math.abs(start.diff(end, 'days')) > this._MAX_RANGE) {\n      formatted[1] = moment(formatted[0]).add('days', this._MAX_RANGE).format(\"YYYY-MM-DD\");\n      this.$('.DatePicker-calendar').DatePickerSetDate([formatted[0], formatted[1]]);\n    }\n\n    this.model.set({\n      fromDate: formatted[0],\n      toDate:   formatted[1]\n    })\n  },\n\n  _hideCalendar: function(e) {\n    if (e) this.killEvent(e);\n    this.$('.DatePicker-dropdown').hide();\n  },\n\n  _toggleCalendar: function(ev) {\n    if (ev) this.killEvent(ev);\n    this.$('.DatePicker-dropdown').toggle();\n  },\n\n  _setLastFourHours: function() {\n    var previous = moment().utc(0).subtract(4, 'hours');\n    this._setModelFromPrevious(previous);\n    this._setDatepickerFromPrevious(previous);\n    this.closeCalendar();\n  },\n\n  _setLastDay: function() {\n    var previous = moment().utc(0).subtract(1, 'day');\n    this._setModelFromPrevious(previous);\n    this._setDatepickerFromPrevious(previous);\n    this.closeCalendar();\n  },\n\n  _setLastWeek: function() {\n    var previous = moment().utc(0).subtract(1, 'week');\n    this._setModelFromPrevious(previous);\n    this._setDatepickerFromPrevious(previous);\n    this.closeCalendar();\n  },\n\n  _setModelFromPrevious: function(previous) {\n    var today = moment().utc(0);\n\n    this.model.set({\n      fromDate: previous.format('YYYY-MM-DD'),\n      fromHour: parseInt(previous.format('H')),\n      fromMin:  parseInt(previous.format('m')),\n      toDate: today.format('YYYY-MM-DD'),\n      toHour: parseInt(today.format('H')),\n      toMin:  parseInt(today.format('m'))\n    });\n  },\n\n  _setDatepickerFromPrevious: function(previous) {\n    var today = moment().utc(0);    \n    this.$('.DatePicker-calendar').DatePickerSetDate([ previous.format('YYYY-MM-DD') , today.format('YYYY-MM-DD') ]);\n  },\n\n  _initTimers: function() {\n    // 'From' div\n    var $from = this.$('.DatePicker-timersFrom');\n\n    // From hour\n    var fromHour = new Spinner({\n      model:    this.model,\n      property: 'fromHour',\n      min:      0,\n      max:      23,\n      inc:      1,\n      width:    15,\n      pattern:  /^([12]?\\d{0,1}|3[01]{0,2})$/,\n      debounce_time: 0\n    });\n\n    $from.find('.DatePicker-timersHour').append(fromHour.render().el);\n    this.addView(fromHour);\n\n    // From min\n    var fromMin = new Spinner({\n      model:    this.model,\n      property: 'fromMin',\n      min:      0,\n      max:      59,\n      inc:      1,\n      width:    15,\n      pattern:  /^([12345]?\\d{0,1})$/,\n      debounce_time: 0\n    });\n\n    $from.find('.DatePicker-timersMin').append(fromMin.render().el);\n    this.addView(fromMin);\n\n\n    // 'To' div\n    var $to = this.$('.DatePicker-timersTo');\n\n    // To hour\n    var toHour = new Spinner({\n      model:    this.model,\n      property: 'toHour',\n      min:      0,\n      max:      23,\n      inc:      1,\n      width:    15,\n      pattern:  /^([12]?\\d{0,1}|3[01]{0,2})$/,\n      debounce_time: 0\n    });\n\n    $to.find('.DatePicker-timersHour').append(toHour.render().el);\n    this.addView(toHour);\n\n    // To min\n    var toMin = new Spinner({\n      model:    this.model,\n      property: 'toMin',\n      min:      0,\n      max:      59,\n      inc:      1,\n      width:    15,\n      pattern:  /^([12345]?\\d{0,1})$/,\n      debounce_time: 0\n    });\n\n    $to.find('.DatePicker-timersMin').append(toMin.render().el);\n    this.addView(toMin);\n  },\n\n  _onValuesChange: function() {\n    this.trigger('changeDate', this.model.toJSON(), this);\n  },\n\n  getDates: function() {\n    return this.model.toJSON();\n  },\n\n  closeCalendar: function() {\n    this.$('.DatePicker-dropdown').hide();\n  },\n\n  _onDocumentClick: function(e) {\n    var $el = $(e.target);\n\n    if ($el.closest('.DatePicker').length === 0) {\n      this.closeCalendar();\n    }\n  },\n\n  clean: function() {\n    this._destroyBinds();\n    this.closeCalendar();\n    this.$('.DatePicker-calendar').DatePickerHide();\n    cdb.core.View.prototype.clean.call(this);\n  }\n\n})\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Error details view, to be used together with an error object from an import model.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  _TEMPLATES: {\n    8001: 'common/views/size_error_details_upgrade_template',\n    8005: 'common/views/layers_error_details_upgrade_template',\n    default: 'common/views/error_details'\n  },\n\n  initialize: function() {\n    this.user = this.options.user;\n    this.err = this.options.err;\n  },\n\n  render: function() {\n    // Preventing problems checking if the error_code is a number or a string\n    // we make the comparision with only double =.\n    var errorCode = this.err.error_code && parseInt(this.err.error_code);\n    var upgradeUrl = cdb.config.get('upgrade_url');\n    var userCanUpgrade = upgradeUrl && !cdb.config.get('cartodb_com_hosted') && (!this.user.isInsideOrg() || this.user.isOrgOwner());\n    var templatePath = this._TEMPLATES['default'];\n    var originalUrl = this.err.original_url;\n    var httpResponseCode = this.err.http_response_code;\n    var httpResponseCodeMessage = this.err.http_response_code_message;\n\n    if (userCanUpgrade && this._TEMPLATES[errorCode]) {\n      templatePath = this._TEMPLATES[errorCode];\n    }\n\n    var template = cdb.templates.getTemplate(templatePath);\n\n    this.$el.html(\n      template({\n        errorCode: errorCode,\n        title: this.err.title,\n        text: this.err.what_about,\n        itemQueueId: this.err.item_queue_id,\n        originalUrl: originalUrl,\n        httpResponseCode: httpResponseCode,\n        httpResponseCodeMessage: httpResponseCodeMessage,\n        userCanUpgrade: userCanUpgrade,\n        showTrial: this.user.canStartTrial(),\n        upgradeUrl: upgradeUrl\n      })\n    );\n\n    return this;\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Responsible for likes (♥ 123) and its toggling behaviour.\n */\nmodule.exports = cdb.core.View.extend({\n  tagName: 'a',\n\n  events: {\n    'click': '_toggleLike'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/likes/template');\n    this.model.bind('change:likeable change:liked change:likes error', this.render, this);\n  },\n\n  render: function() {\n    this.$el.html(\n      this.template({\n        likes: this.model.get(\"likes\"),\n        size: this.model.get(\"size\"),\n        show_count: this.model.get(\"show_count\"),\n        show_label: this.model.get(\"show_label\")\n      })\n    )\n    .attr({\n      class: this._classNames(),\n      href: this._hrefLocation()\n    });\n\n    return this;\n  },\n\n  _hrefLocation: function() {\n    var href = \"#/like\";\n\n    if (!this.model.get('likeable')) {\n      href = window.login_url;\n    }\n\n    return href;\n  },\n\n  _classNames: function() {\n    var classNames = ['LikesIndicator'];\n\n    if (this.model.get('likeable')) {\n      classNames.push('is-likeable');\n    }\n\n    if (this.model.get('liked')) {\n      classNames.push('is-liked');\n    }\n\n    if (this._animate) {\n      classNames.push('is-animated');\n      this.$el.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {\n        // unset animate and force re-render to avoid race conditions\n        this._animate = false;\n        this.render();\n      }.bind(this));\n    }\n\n    return classNames.join(' ');\n  },\n\n  _toggleLike: function(ev) {\n    if (this.model.get('likeable')) {\n      this.killEvent(ev);\n\n      this._animate = true;\n      this.model.toggleLiked();\n    }\n  }\n});\n",
    "var $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n *  MapCard previews\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n\n  options: {\n    width: 300,\n    height: 170,\n    privacy: 'PUBLIC',\n    username: '',\n    visId: '',\n    mapsApiResource: '',\n    className: '',\n    authTokens: []\n  },\n\n  _TEMPLATES: {\n    // Using <%= %> instead of <%- %> because if not / characters (for example) will be escaped\n    regular: '<%- protocol %>://<%= mapsApiResource %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>',\n    cdn: '<%- protocol %>://<%- cdn %>/<%- username %>/api/v1/map/static/named/<%- tpl %>/<%- width %>/<%- height %>.png<%= authTokens %>'\n  },\n\n  initialize: function() {\n    _.each(['visId', 'mapsApiResource', 'username'], function(name) {\n      if (!this.options[name]) {\n        console.log(name + ' is required for Static Map instantiation');\n      }\n    }, this);\n  },\n\n  load: function() {\n    this._startLoader();\n    this._loadFromVisId();\n\n    return this;\n  },\n\n  _generateImageTemplate: function() {\n    return 'tpl_' + this.options.visId.replace(/-/g, '_');\n  },\n\n  _loadFromVisId: function() {\n    var protocol = this._isHTTPS() ? 'https': 'http';\n    var cdnConfig = cdb.config.get('cdn_url');\n    var template = _.template(cdnConfig ? this._TEMPLATES['cdn'] : this._TEMPLATES['regular']);\n\n    var options = {\n      protocol: protocol,\n      username: this.options.username,\n      mapsApiResource: this.options.mapsApiResource,\n      tpl: this._generateImageTemplate(),\n      width: this.options.width,\n      height: this.options.height,\n      authTokens: this._generateAuthTokensParams()\n    };\n\n    if (cdnConfig) {\n      options = _.extend(options, { cdn: cdnConfig[protocol] });\n    }\n\n    var url = template(options);\n\n    this._loadImage({}, url);\n  },\n\n  _generateAuthTokensParams: function () {\n    var authTokens = this.options.authTokens;\n    if (authTokens && authTokens.length > 0) {\n      return '?' + _.map(authTokens, function (t) { return 'auth_token=' + t; }).join('&');\n    } else {\n      return '';\n    }\n  },\n\n  _isHTTPS: function() {\n    return location.protocol.indexOf(\"https\") === 0;\n  },\n\n  loadURL: function(url) {\n    var $img = $('<img class=\"MapCard-preview\" src=\"' + url + '\" />');\n    this.$el.append($img);\n\n    if (this.options.className) {\n      $img.addClass(this.options.className);\n    }\n\n    $img.fadeIn(250);\n  },\n\n  showError: function() {\n    this._onError();\n  },\n\n  _startLoader: function() {\n    this.$el.addClass(\"is-loading\");\n  },\n\n  _stopLoader: function() {\n    this.$el.removeClass(\"is-loading\");\n  },\n\n  _onSuccess: function(url) {\n    this._stopLoader();\n    this.loadURL(url);\n    this.trigger(\"loaded\", url);\n  },\n\n  _onError: function(error) {\n    this._stopLoader();\n    this.$el.addClass(\"has-error\");\n    var $error = $('<div class=\"MapCard-error\" />');\n    this.$el.append($error);\n    $error.fadeIn(250);\n    this.trigger(\"error\");\n  },\n\n  _loadImage: function(error, url) {\n    var self = this;\n    var img  = new Image();\n\n    img.onerror = function() {\n      self._onError(error);\n    };\n\n    img.onload = function() {\n      self._onSuccess(url);\n    };\n\n    try {\n      img.src = url;\n    } catch(err) {\n      this._onError(err);\n    }\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar Utils = (typeof window !== \"undefined\" ? window['cdb']['Utils'] : typeof global !== \"undefined\" ? global['cdb']['Utils'] : null);\nvar PaginationModel = require('../pagination/model');\nvar randomQuote = require('../../view_helpers/random_quote');\nvar ViewFactory = require('../../view_factory');\nvar PaginationView = require('../pagination/view');\n\n/**\n * View to render a searchable/pageable collection.\n * Also allows to filter/search list.\n * Set {isUsedInDialog: true} in view opts if intended to be used in a dialog, to have proper classes to position views\n * properly.\n *\n * - collection is a collection which has a PagedSearchModel.\n */\nmodule.exports = cdb.core.View.extend({\n\n  events: {\n    'click .js-search-link': '_onSearchClick',\n    'click .js-clean-search': '_onCleanSearchClick',\n    'keydown .js-search-input': '_onKeyDown',\n    'submit .js-search-form': 'killEvent'\n  },\n\n  initialize: function() {\n    _.each(['collection', 'pagedSearchModel', 'createListView'], function(name) {\n      if (!this.options[name]) throw new Error(name + ' is required');\n    }, this);\n    this.collection = this.options.collection;\n    this.options.noResults = this.options.noResults || {}\n\n    var params = this.options.pagedSearchModel;\n    this.paginationModel = new PaginationModel({\n      current_page: params.get('page'),\n      total_count: this.collection.totalCount() || 0,\n      per_page: params.get('per_page')\n    });\n\n    this.elder('initialize');\n    this._initBinds();\n    this.options.pagedSearchModel.fetch(this.collection);\n  },\n\n  render: function() {\n    this.clearSubViews();\n\n    this._renderContent(\n      this.getTemplate('common/views/paged_search/paged_search')({\n        thinFilters: this.options.thinFilters,\n        q: this.options.pagedSearchModel.get('q')\n      })\n    );\n\n    this._initViews();\n    this._$cleanSearchBtn().hide();\n    this._renderExtraFilters();\n\n    return this;\n  },\n\n  _renderExtraFilters: function() {\n    if (this.options.filtersExtrasView && this.options.filtersExtrasView) {\n      this.$('.js-filters').append(this.options.filtersExtrasView.render().el);\n    }\n  },\n\n  _renderContent: function(html) {\n    if (this.options.isUsedInDialog) {\n      html = this.getTemplate('common/views/paged_search/paged_search_dialog_wrapper')({\n        htmlToWrap: html\n      })\n    }\n    this.$el.html(html);\n\n    // Needs to be called after $el html changed:\n    if (this.options.isUsedInDialog) {\n      this.$el.addClass('Dialog-expandedSubContent');\n      this._$tabPane().addClass('Dialog-bodyInnerExpandedWithSubFooter');\n    }\n  },\n\n  _initBinds: function() {\n    this.collection.bind('fetching', function() {\n      this._toggleCleanSearchBtn();\n      this._activatePane('loading');\n    }, this);\n\n    this.collection.bind('error', function(e) {\n      // Old requests can be stopped, so aborted requests are not\n      // considered as an error\n      if (!e || (e && e.statusText !== \"abort\")) {\n        this._activatePane('error');\n      }\n      this._toggleCleanSearchBtn();\n    }, this);\n\n    this.collection.bind('reset', function(collection) {\n      this.paginationModel.set({\n        total_count: this.collection.totalCount(),\n        current_page: this.options.pagedSearchModel.get('page')\n      });\n      this._activatePane(this.collection.totalCount() > 0 ? 'list' : 'no_results');\n      this._toggleCleanSearchBtn();\n    }, this);\n\n    this.paginationModel.bind('change:current_page', function(mdl, newPage) {\n      this.options.pagedSearchModel.set('page', newPage);\n      this.options.pagedSearchModel.fetch(this.collection);\n    }, this);\n\n    this.add_related_model(this.options.pagedSearchModel);\n    this.add_related_model(this.collection);\n    this.add_related_model(this.paginationModel);\n  },\n\n  _toggleCleanSearchBtn: function() {\n    this._$cleanSearchBtn().toggle(!!this.options.pagedSearchModel.get('q'))\n  },\n\n  _initViews: function() {\n    this._panes = new cdb.ui.common.TabPane({\n      el: this._$tabPane()\n    });\n    this.addView(this._panes);\n\n    this._panes.addTab('list',\n      ViewFactory.createByList([\n        this._createListView(),\n        new PaginationView({\n          className: 'CDB-Text CDB-Size-medium Pagination Pagination--shareList',\n          model: this.paginationModel\n        })\n      ])\n    );\n\n    this._panes.addTab('error',\n      ViewFactory.createByTemplate('common/templates/fail', {\n        msg: ''\n      })\n    );\n\n    this._panes.addTab('no_results',\n      ViewFactory.createByTemplate('common/templates/no_results', {\n        icon: this.options.noResults.icon || 'CDB-IconFont-defaultUser',\n        title: this.options.noResults.title || 'Oh! No results',\n        msg: this.options.noResults.msg || 'Unfortunately we could not find anything with these parameters'\n      })\n    );\n\n    this._panes.addTab('loading',\n      ViewFactory.createByTemplate('common/templates/loading', {\n        title: 'Searching',\n        quote: randomQuote()\n      })\n    );\n\n    if (this.options.pagedSearchModel.get('q')) {\n      this._focusSearchInput();\n    }\n\n    this._activatePane(this._chooseActivePaneName(this.collection.totalCount()));\n  },\n\n  _createListView: function() {\n    var view = this.options.createListView();\n    if (view instanceof cdb.core.View) {\n      return view;\n    } else {\n      cdb.log.error('createListView function must return a view');\n      // fallback for view to not fail miserably\n      return new cdb.core.View();\n    }\n  },\n\n  _activatePane: function(name) {\n    // Only change active pane if the panes is actually initialized\n    if (this._panes && this._panes.size() > 0) {\n      // explicit render required, since tabpane doesn't do it\n      this._panes.active(name).render();\n    }\n  },\n\n  _chooseActivePaneName: function(totalCount) {\n    if (totalCount === 0) {\n      return 'no_results';\n    } else if (totalCount > 0) {\n      return 'list';\n    } else {\n      return 'loading';\n    }\n  },\n\n  _focusSearchInput: function() {\n    // also selects the current search str on the focus\n    this._$searchInput().focus().val(this._$searchInput().val());\n  },\n\n  _onSearchClick: function(ev) {\n    this.killEvent(ev);\n    this._$searchInput().focus();\n  },\n\n  _onCleanSearchClick: function(ev) {\n    this.killEvent(ev);\n    this._cleanSearch();\n  },\n\n  _onKeyDown: function(ev) {\n    var enterPressed = (ev.keyCode == $.ui.keyCode.ENTER);\n    var escapePressed = (ev.keyCode == $.ui.keyCode.ESCAPE);\n    if (enterPressed) {\n      this.killEvent(ev);\n      this._submitSearch();\n    } else if (escapePressed) {\n      this.killEvent(ev);\n      if (this.options.pagedSearchModel.get('q')) {\n        this._cleanSearch();\n      }\n    }\n  },\n\n  _submitSearch: function(e) {\n    this._makeNewSearch(Utils.stripHTML(this._$searchInput().val().trim()));\n  },\n\n  _cleanSearch: function() {\n    this._$searchInput().val('');\n    this._makeNewSearch();\n  },\n\n  _makeNewSearch: function(query) {\n    this.options.pagedSearchModel.set({\n      q: query,\n      page: 1\n    });\n    this.options.pagedSearchModel.fetch(this.collection);\n  },\n\n  _$searchInput: function() {\n    return this.$('.js-search-input');\n  },\n\n  _$cleanSearchBtn: function() {\n    return this.$('.js-clean-search');\n  },\n\n  _$tabPane: function() {\n    return this.$('.js-tab-pane');\n  }\n\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar _ = (typeof window !== \"undefined\" ? window['_'] : typeof global !== \"undefined\" ? global['_'] : null);\n\n/**\n * View model intended to be responsible for pagination logic, and to be used in conjunction with a Pagination view.\n */\nmodule.exports = cdb.core.Model.extend({\n  defaults: {\n    total_count:          0,\n    per_page:             10,\n    current_page:         1,\n    display_count:        5,\n    extras_display_count: 1,\n    url_to:               undefined\n  },\n\n  pagesCount: function() {\n    return Math.max(\n        Math.ceil(\n          this.get('total_count') / this.get('per_page')\n        ), 1);\n  },\n\n  isCurrentPage: function(page) {\n    return this.get('current_page') === page;\n  },\n\n  shouldBeVisible: function() {\n    var pagesCount = this.pagesCount();\n    return this.get('total_count') > 0 && pagesCount > 1 && this.get('current_page') <= pagesCount;\n  },\n\n  urlTo: function(page) {\n    if (this.hasUrl()) {\n      return this.get('url_to')(page);\n    }\n  },\n\n  hasUrl: function() {\n    return typeof this.get('url_to') === 'function';\n  },\n\n  /**\n   * Get the pages that are expected to be displayed.\n   * The current page will be in the middle of the returned sequence.\n   *\n   * @returns {number[]} a sequence of Numbers\n   */\n  pagesToDisplay: function() {\n    var rangeStart;\n\n    if (this._inLowRange()) {\n      rangeStart = 1;\n    } else if (this._inHighRange()) {\n      rangeStart = this.get('current_page') - this._startOffset();\n    } else {\n      // Somewhere between the low and high boundary\n      rangeStart = this.pagesCount() - this.get('display_count') + 1;\n    }\n    rangeStart = Math.max(rangeStart, 1);\n\n    return this._withExtraPages(\n      _.range(rangeStart, this._rangeEnd(rangeStart))\n    );\n  },\n\n  _withExtraPages: function(pagesRelativeToCurrentPage) {\n    var lastPage = this.pagesCount();\n    var extraCount = this.get('extras_display_count');\n    var extraStartPages = _.range(1, extraCount + 1);\n    var extraEndPages = _.range(lastPage - extraCount + 1, lastPage + 1);\n\n    var startPagesDiff = pagesRelativeToCurrentPage[0] - extraStartPages.slice(-1)[0];\n    if (startPagesDiff === 2) {\n      // There is only one missing page in the gap, so add it\n      extraStartPages.push(pagesRelativeToCurrentPage[0] - 1);\n    } else if (startPagesDiff > 2) {\n      // There are more hidden pages at low range, add padding at end\n      extraStartPages.push(-1);\n    }\n\n    var endPagesDiff = extraEndPages[0] - pagesRelativeToCurrentPage.slice(-1);\n    if (endPagesDiff === 2) {\n      // There is only one missing page in the gap, so add it\n      extraEndPages.unshift(extraEndPages[0] - 1);\n    } if (endPagesDiff > 2) {\n      // There are more hidden pages at high range, add padding at beginning\n      extraEndPages.unshift(-2);\n    }\n\n    return _.union(extraStartPages, pagesRelativeToCurrentPage, extraEndPages);\n  },\n\n  _inLowRange: function() {\n    return this.get('current_page') < this._startOffset();\n  },\n\n  _inHighRange: function() {\n    return this.get('current_page') < this._highBoundary();\n  },\n\n  _highBoundary: function() {\n    return this.pagesCount() - this._startOffset();\n  },\n\n  _startOffset: function() {\n    return Math.floor(this.get('display_count') / 2);\n  },\n\n  _rangeEnd: function(rangeStart) {\n    // If we are too close to the range end then cap to the pages count.\n    return Math.min(rangeStart + this.get('display_count'), this.pagesCount() + 1);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar navigateThroughRouter = require('../../view_helpers/navigate_through_router');\n\n/**\n * Responsible for pagination.\n *\n * Expected to be created with a pagination model, see the model for available params, here we create w/ the minimum:\n *   new PaginationView({\n *     model: new PaginationModel({\n *       // Compulsory:\n *       urlTo:  function(page) { return '/?page='+ page },\n\n         // Optional, to router clicks on <a> tags through router.navigate by default\n *       router: new Router(...)\n *     })\n *   });\n */\nmodule.exports = cdb.core.View.extend({\n\n  className: 'Pagination CDB-Text CDB-Size-medium',\n\n  events: {\n    'click a': '_paginate'\n  },\n\n  initialize: function() {\n    this.template = cdb.templates.getTemplate('common/views/pagination/template');\n    this.router = this.options.router;\n\n    if (this.router && !this.model.hasUrl()) {\n      throw new Error('since router is set the model must have a url method set too');\n    }\n\n    this.model.bind('change', this.render, this);\n  },\n\n  render: function() {\n    if (this.model.shouldBeVisible()) {\n      this.$el.html(\n        this.template({\n          m: this.model,\n          pagesCount: this.model.pagesCount(),\n          currentPage: this.model.get('current_page')\n        })\n      );\n      this.$el.addClass(this.className);\n      this.delegateEvents();\n    } else {\n      this.$el.html('');\n    }\n\n    return this;\n  },\n\n  _paginate: function(ev) {\n    if (this.router) {\n      navigateThroughRouter.apply(this, arguments);\n    } else if (!this.model.hasUrl()) {\n      this.killEvent(ev);\n    }\n\n    var page = $(ev.target).data('page');\n    this.model.set('current_page', page);\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Error details view, to be used together with an error object from an import model.\n *\n */\n\nmodule.exports = cdb.core.View.extend({\n  _TEMPLATES: {\n    'partial_import': 'common/views/partial_import_details',\n    'too_many_files': 'common/views/too_many_files_details',\n    'too_many_rows_connection': 'common/views/too_many_rows_connection_details'\n  },\n\n  initialize: function() {\n    this.warnings = this.options.warnings;\n  },\n\n  render: function() {\n    var warnings = this.warnings;\n\n    var template_file_key = this._getTemplateKey(warnings);\n    var template = cdb.templates.getTemplate(this._TEMPLATES[template_file_key]);\n\n    this.$el.html(\n      template({\n        warnings: warnings\n      })\n    );\n\n    return this;\n  },\n\n  _getTemplateKey: function(warnings) {\n    // We have warnings precedence between max layers an max tables per import.\n    // For example, one import could reach the limit of layers an tables at the\n    // same time.\n    if (warnings.user_max_layers && warnings.max_tables_per_import) {\n      return (warnings.user_max_layers < warnings.max_tables_per_import) ? 'partial_import' : 'too_many_files'\n    } else if (warnings.user_max_layers) {\n      return 'partial_import';\n    } else if (warnings.max_tables_per_import) {\n      return 'too_many_files';\n    } else if (warnings.max_rows_per_connection) {\n      return 'too_many_rows_connection';\n    }\n  }\n});\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\n\n/**\n * Model that encapsulates params for fetching data in a cdb.admin.Visualizations collection.\n */\nmodule.exports = cdb.core.Model.extend({\n\n  defaults: {\n    content_type:   '',\n    page:           1,\n    q:              '',\n    tag:            '',\n    category:       '',\n    shared:         'no',\n    locked:         false,\n    liked:          false,\n    library:        false,\n    order:          'updated_at',\n    deepInsights:   false\n  },\n\n  isSearching: function() {\n    return this.get('q') || this.get('tag');\n  },\n\n  isDatasets: function() {\n    return this.get('content_type') === 'datasets';\n  },\n\n  isMaps: function() {\n    return this.get('content_type') === 'maps';\n  },\n\n  isDeepInsights: function() {\n    return this.isMaps() && this.get('deepInsights');\n  }\n});\n",
    "// Not a unique entry file, but dependencies required for old table.js bundle, to retrofit newer browserify files to be\n// usable in a non-browserified bundle\n//\n// Expected to be loaded after cdb.js but before table.js\nvar cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\ncdb.editor = {\n  CreateVisFirstView: require('./common/dialogs/create_vis_first/create_vis_first_view'),\n  ImportsCollection: require('./common/background_polling/models/imports_collection'),\n  GeocodingModel: require('./common/background_polling/models/geocoding_model'),\n  LonLatGeocodingModel: require('./common/background_polling/models/lon_lat_geocoding_model'),\n  BackgroundPollingModel: require('./editor/background_polling_model'),\n  ImagePickerView: require('./common/dialogs/map/image_picker_view'),\n  BackgroundPollingView: require('./common/background_polling/background_polling_view'),\n  AddLayerView: require('./common/dialogs/map/add_layer_view'),\n  SyncView: require('./common/dialogs/sync_dataset/sync_dataset_view'),\n  ScratchView: require('./common/dialogs/map/scratch_view'),\n  AddLayerModel: require('./common/dialogs/map/add_layer_model'),\n  FeatureDataView: require('./common/dialogs/feature_data/feature_data_dialog_view'),\n\n  ChangePrivacyView: require('./common/dialogs/change_privacy/change_privacy_view'),\n  EditVisMetadataView: require('./common/dialogs/edit_vis_metadata/edit_vis_metadata_dialog_view'),\n\n  DeleteItemsView: require('./common/dialogs/delete_items_view'),\n  DeleteItemsViewModel: require('./common/dialogs/delete_items_view_model'),\n  DeleteLayerView: require('./common/dialogs/delete_layer/delete_layer_view'),\n  DeleteColumnView: require('./common/dialogs/delete_column/delete_column_view'),\n  DeleteRowView: require('./common/dialogs/delete_row/delete_row_view'),\n\n  ExportImageResultView: require('./common/dialogs/static_image/export_image_result_view'),\n\n  AdvancedExportView: require('./common/dialogs/static_image/advanced_export_view'),\n\n  PublishView: require('./common/dialogs/publish/publish_view'),\n\n  ChangeLockViewModel: require('./common/dialogs/change_lock/change_lock_view_model'),\n  ChangeLockView: require('./common/dialogs/change_lock/change_lock_view'),\n\n  BuilderFeaturesWarningDialog: require('./common/dialogs/builder_features_warning/builder_features_warning_view'),\n\n  PecanView: require('./common/dialogs/pecan/pecan_view'),\n\n  DuplicateVisView: require('./common/dialogs/duplicate_vis_view'),\n  DuplicateDatasetView: require('./common/dialogs/duplicate_dataset_view'),\n\n  ExportView: require('./common/dialogs/export/export_view'),\n\n  MergeDatasetsView: require('./common/dialogs/merge_datasets/merge_datasets_view'),\n  GeoreferenceView: require('./common/dialogs/georeference/georeference_view'),\n\n  LimitsReachView: require('./common/dialogs/limits_reach/limits_reached_view'),\n\n  MamufasImportView: require('./common/mamufas_import/mamufas_import_view'),\n\n  AddCustomBasemapView: require('./common/dialogs/add_custom_basemap/add_custom_basemap_view'),\n  ViewFactory: require('./common/view_factory'),\n  randomQuote: require('./common/view_helpers/random_quote.js'),\n\n  ExportMapView: require('./common/dialogs/export_map/export_map_view')\n};\n",
    "var cdb = (typeof window !== \"undefined\" ? window['cdb'] : typeof global !== \"undefined\" ? global['cdb'] : null);\nvar ImportsCollection = require('../common/background_polling/models/imports_collection');\nvar GeocodingsCollection = require('../common/background_polling/models/geocodings_collection');\nvar BackgroundPollingModel = require('../common/background_polling/background_polling_model');\n\n\n/**\n *  Background importer model for the editor context.\n *\n */\n\nmodule.exports = BackgroundPollingModel.extend({\n\n  addImportItem: function(mdl) {\n    if (!mdl) {\n      return false;\n    }\n\n    if (!this.user.canAddLayerTo(this.vis.map)) {\n      mdl.setError({\n        error_code: 8005,\n        get_error_text: {\n          title: \"Max layers per map reached\",\n          what_about: \"You can't add more layers to your map. Please upgrade your account.\"\n        }\n      });\n    }\n\n    this.importsCollection.add(mdl);\n  },\n\n  _onImportsStateChange: function(importsModel) {\n    if (importsModel.hasCompleted()) {\n      this.trigger('importCompleted', importsModel, this);\n      var self = this;\n      this.vis.map.addCartodbLayerFromTable(importsModel.imp.get('table_name'), this.user.get('username'), {\n        vis: this.vis,\n        success: function() {\n          // layers need to be saved because the order may changed\n          self.vis.map.layers.saveLayers();\n          // Don't remove import item if it is Twitter type\n          var serviceName = importsModel.get('upload').service_name;\n          var twitterImport = serviceName && serviceName === \"twitter_search\";\n          if (!twitterImport) {\n            self.importsCollection.remove(importsModel);\n          }\n        },\n        error: function() {\n          self.trigger('importLayerFail', 'Failed to add the connected dataset as a layer to this map');\n          self.importsCollection.remove(importsModel);\n        }\n      });\n    }\n  },\n\n  _onGeocodingsStateChange: function(geocodingModel) {\n    if (geocodingModel.hasCompleted()) {\n      this.trigger('geocodingCompleted', geocodingModel, this);\n    }\n    if (geocodingModel.hasFailed()) {\n      this.trigger('geocodingFailed', geocodingModel, this);\n    }\n  },\n\n  _onAnalysisStateChange: function(mdl, collection) {}\n\n});\n",
    "var geoAttr = require('./cartocss/get-geo-attr');\nvar getDefaultCSSForGeometryType = require('./cartocss/get-default-css-for-geometry-type');\nvar ramps = require('./cartocss/color-ramps');\n\nmodule.exports = {\n  choropleth: function(quartiles, tableName, prop, geometryType, ramp) {\n    var attr = geoAttr(geometryType);\n    var tableID = '#' + tableName;\n\n    var defaultCSS = getDefaultCSSForGeometryType(geometryType);\n    var css = \"/** choropleth visualization */\\n\\n\" + tableID + \" {\\n  \" + attr + \": \" + ramp[0] + \";\\n\" + defaultCSS.join(\"\\n\") + \"\\n}\\n\";\n\n    for (var i = quartiles.length - 1; i >= 0; --i) {\n      if (quartiles[i] !== undefined && quartiles[i] != null) {\n        css += \"\\n\" + tableID + \"[\" + prop + \" <= \" + quartiles[i] + \"] {\\n\";\n        css += '  ' + attr  + ':' + ramp[i] + \";\\n}\"\n      }\n    }\n    return css;\n  },\n\n  categoryMetadata: function(cats, options) {\n    var metadata = [];\n\n    var ramp = (options && options.ramp) ? options.ramp : ramps.category;\n    var type = options && options.type ? options.type : 'string';\n\n    for (var i = 0; i < cats.length; i++) {\n      var cat = cats[i];\n      if (i < 10 && cat !== undefined && ((type === 'string' && cat != null) || (type !== 'string'))) {\n        metadata.push({\n          title: cat,\n          title_type: type,\n          value_type: 'color',\n          color: ramp[i]\n        });\n      }\n    }\n\n    if (cats.length > 10) {\n      metadata.push({\n        title: 'Others',\n        value_type: 'color',\n        default: true,\n        color: ramp[ramp.length - 1]\n      });\n    }\n\n    return metadata;\n  },\n\n  category: function(cats, tableName, prop, geometryType, options) {\n    var attr = geoAttr(geometryType);\n    var tableID = '#' + tableName;\n    var ramp = ramps.category;\n    var name, value;\n\n    var type = options && options.type ? options.type : 'string';\n    var ramp = (options && options.ramp) ? options.ramp : ramps.category;\n\n    var defaultCSS = getDefaultCSSForGeometryType(geometryType);\n\n    var css = \"/** category visualization */\\n\\n\" + tableID + \" {\\n  \" + attr + \": \" + ramp[0] + \";\\n\" + defaultCSS.join(\"\\n\") + \"\\n}\\n\";\n\n    for (var i = 0; i < cats.length; i++) {\n\n      var cat = cats[i];\n\n      if (type === 'string') {\n        name = cat.replace(/\\n/g,'\\\\n').replace(/\\\"/g, \"\\\\\\\"\");\n        value = \"\\\"\" + name + \"\\\"\";\n      } else {\n        value = cat;\n      }\n\n      if (i < 10 && cat !== undefined && ((type === 'string' && cat != null) || (type !== 'string'))) {\n        css += \"\\n\" + tableID + '[' + prop + '=' + value + \"] {\\n\";\n        css += '  ' + attr  + ':' + ramp[i] + \";\\n}\"\n      }\n    }\n\n    if (cats.length > 10) {\n      css += \"\\n\" + tableID + \"{\\n\";\n      css += '  ' + attr  + ': ' + ramp[ramp.length - 1]+ \";\\n}\"\n    }\n\n    return css;\n  },\n\n  torque: function(stats, tableName, options){\n    var tableID = '#' + tableName;\n    var aggFunction = 'count(cartodb_id)';\n    var css = [\n        '/** torque visualization */',\n        'Map {',\n        '  -torque-time-attribute: ' + stats.column + ';',\n        '  -torque-aggregation-function: \"count(cartodb_id)\";',\n        '  -torque-frame-count: ' + stats.steps + ';',\n        '  -torque-animation-duration: 10;',\n        '  -torque-resolution: 2;',\n        '}',\n        tableID + ' {',\n        '  marker-width: 3;',\n        '  marker-fill-opacity: 0.8;',\n        '  marker-fill: #0F3B82; ',\n        '  comp-op: \"lighten\"; ',\n        '  [frame-offset = 1] { marker-width: 10; marker-fill-opacity: 0.05;}',\n        '  [frame-offset = 2] { marker-width: 15; marker-fill-opacity: 0.02;}',\n        '}'\n    ];\n    css = css.join(\"\\n\");\n\n    return css;\n\n  },\n\n  bubble: function(quartiles, tableName, prop) {\n    var tableID = '#' + tableName;\n    var css = \"/** bubble visualization */\\n\\n\" + tableID + \" {\\n\";\n    css += getDefaultCSSForGeometryType('point').join(\"\\n\");\n    css += \"\\nmarker-fill: #FF5C00;\";\n    css += \"\\n}\\n\\n\";\n\n    var min = 10;\n    var max = 30;\n\n    var values = [];\n\n    var NPOINS = 10;\n    for(var i = 0; i < NPOINS; ++i) {\n      var t = i/(NPOINS-1);\n      values.push(min + t*(max - min));\n    }\n\n    // generate carto\n    for(var i = NPOINS - 1; i >= 0; --i) {\n      if(quartiles[i] !== undefined && quartiles[i] != null) {\n        css += \"\\n#\" + tableName + ' [ ' + prop + ' <= ' + quartiles[i] + \"] {\\n\"\n        css += '   marker-width: ' + values[i].toFixed(1) + \";\\n}\"\n      }\n    }\n    return css;\n  },\n\n  heatmap: function(stats, tableName, options){\n    var tableID = '#' + tableName;\n    var css = [\n        '/** heatmap visualization */',\n        'Map {',\n        '  -torque-time-attribute: \"cartodb_id\";',\n        '  -torque-aggregation-function: \"count(cartodb_id)\";',\n        '  -torque-frame-count: 1;',\n        '  -torque-animation-duration: 10;',\n        '  -torque-resolution: 2;',\n        '}',\n        tableID + ' {',\n        '  marker-width: 10;',\n        '  marker-fill-opacity: 0.4;',\n        '  marker-fill: #0F3B82; ',\n        '  comp-op: \"lighten\"; ',\n        '  image-filters: colorize-alpha(blue, cyan, lightgreen, yellow , orange, red);',\n        '  marker-file: url(http://s3.amazonaws.com/com.cartodb.assets.static/alphamarker.png);',\n        '}'\n    ];\n    css = css.join(\"\\n\");\n    return css;\n  }\n};\n",
    "module.exports = {\n  bool: ['#229A00', '#F84F40', '#DDDDDD'],\n  green:  ['#EDF8FB', '#D7FAF4', '#CCECE6', '#66C2A4', '#41AE76', '#238B45', '#005824'],\n  blue:  ['#FFFFCC', '#C7E9B4', '#7FCDBB', '#41B6C4', '#1D91C0', '#225EA8', '#0C2C84'],\n  pink: ['#F1EEF6', '#D4B9DA', '#C994C7', '#DF65B0', '#E7298A', '#CE1256', '#91003F'],\n  black:  ['#F7F7F7', '#D9D9D9', '#BDBDBD', '#969696', '#737373', '#525252', '#252525'],\n  red:  ['#FFFFB2', '#FED976', '#FEB24C', '#FD8D3C', '#FC4E2A', '#E31A1C', '#B10026'],\n  category: ['#A6CEE3', '#1F78B4', '#B2DF8A', '#33A02C', '#FB9A99', '#E31A1C', '#FDBF6F', '#FF7F00', '#CAB2D6', '#6A3D9A', '#DDDDDD'],\n  divergent: ['#0080FF', '#40A0FF', '#7FBFFF', '#FFF2CC', '#FFA6A6', '#FF7A7A', '#FF4D4D']\n};\n",
    "module.exports = function(geometryType) {\n  if (geometryType === 'polygon') {\n    return [\n      'polygon-opacity: 0.7;',\n      'line-color: #FFF;',\n      'line-width: 0.5;',\n      'line-opacity: 1;'\n    ];\n  } else if (geometryType === 'line') {\n    return [\n      'line-width: 2;',\n      'line-opacity: 0.7;'\n    ];\n  } else {\n    return [\n      'marker-fill-opacity: 0.9;',\n      'marker-line-color: #FFF;',\n      'marker-line-width: 1;',\n      'marker-line-opacity: 1;',\n      'marker-placement: point;',\n      'marker-type: ellipse;',\n      'marker-width: 10;',\n      'marker-allow-overlap: true;'\n    ];\n  }\n};\n",
    "module.exports = function(geometryType) {\n  return {\n    \"line\": 'line-color',\n    'polygon': \"polygon-fill\",\n    'point': \"marker-fill\"\n  }[geometryType];\n};\n",
    "\n/**\n * Like _.defaults, but also applies to deep object structure.\n *\n * @param {Object} customs\n * @param {Object} defaults\n * @return {Object}\n */\nvar deepDefaults = function(customs, defaults) {\n  var memo = {};\n\n  for (var key in defaults) {\n    if (defaults.hasOwnProperty(key)) {\n      var defaultsItem = defaults[key];\n      var customsItem;\n\n      if (typeof customs === 'object') {\n        customsItem = customs[key];\n      }\n\n      if (typeof defaultsItem === 'object' && typeof customsItem === 'object') {\n        // both defaultsItem and customsItem are objecs, go down one level, set returned result as value for key\n        memo[key] = deepDefaults(customsItem, defaultsItem);\n      } else if (typeof defaultsItem !== 'object' && customsItem !== undefined) {\n        memo[key] = customsItem;\n      } else {\n        memo[key] = defaultsItem;\n      }\n    }\n  }\n\n  return memo || {};\n};\n\nmodule.exports = deepDefaults;\n",
    "var ramps = require('./cartocss/color-ramps.js');\n\n// TODO: only require the necessary params\nmodule.exports = function(stats) {\n  var method;\n  var ramp = ramps.blue;\n  var name = 'blue';\n\n  if (['A','U'].indexOf(stats.dist_type) != -1) { // apply divergent scheme\n    method = stats.jenks;\n\n    if (stats.min < 0 && stats.max > 0){\n      ramp = ramps.divergent;\n      name = 'spectrum2';\n    }\n  } else if (stats.dist_type === 'F') {\n    method = stats.equalint;\n    ramp = ramps.red;\n    name = 'red';\n  } else if (stats.dist_type === 'J') {\n    method = stats.headtails;\n    ramp = ramps.blue;\n    name = 'blue';\n  } else {\n    method = stats.headtails;\n    ramp = ramps.red;\n    name = 'red';\n  }\n\n  return {\n    name: name,\n    ramp: ramp,\n    method: method\n  };\n};\n",
    "module.exports = function(distType) {\n  return {\n    U: 0.9,\n    A: 0.9,\n    L: 0.7,\n    J: 0.7,\n    S: 0.5,\n    F: 0.3\n  }[distType];\n};\n",
    "var ramps = require('./cartocss/color-ramps');\nvar getWeightFromShape = require('./get-weight-from-shape');\nvar getMethodProperties = require('./get-method-properties');\nvar deepDefaults = require('./deep-defaults');\nvar CSS = require('./cartocss');\n\n/**\n * Get metadata to render a CartoDB map (visualization) from a set of given table and column data, see params.\n *\n * @param {Object} opts hash with following keys:\n *   - tableName: {String}\n *   - column: {Object} hash with following keys:\n *     - stats: {Object} stats as given from a describe call on a SQL API.\n *     - geometryType: {String} e.g. 'points', 'polygon' or similar.\n *     - bbox: {Array[Array]} e.g. [[0.0, 0.1], [1.0, 1.1]]\n *   - dependencies: {Object} hash with following keys:\n *     - underscore: {Object} only used for some column types though, e.g. number, string\n *   - thresholds: {Object} See list in code\n * @return {Object}\n */\nmodule.exports = function(opts) {\n  var _ = opts.dependencies.underscore;\n  var tableName = opts.tableName;\n\n  var thresholds = deepDefaults(opts.thresholds, {\n    number: {\n      forBubbleMap: {\n        minCalcWeight: 0.5,\n        maxStatsCount: 200\n      },\n      forCategoryOrBubbleMap: {\n        minStatsWeight: 0.5,\n        distinctPercentage: 25,\n        forCategory: {\n          maxDistinctPercentage: 1\n        },\n        forBubble: {\n          minDistinctPercentage: 1\n        }\n      }\n    }\n  });\n\n  var column = opts.column;\n  var geometryType = column.geometryType;\n  var stats = column.stats;\n  var columnName = stats.column;\n\n  var visualizationType = 'choropleth';\n  var css = null;\n  var type = stats.type;\n  var metadata = [];\n  var distinctPercentage = (stats.distinct / stats.count) * 100;\n\n  if (type === 'number') {\n    var calcWeight = (stats.weight + getWeightFromShape(stats.dist_type)) / 2;\n\n    if (calcWeight >= thresholds.number.forBubbleMap.minCalcWeight) {\n      var visFunction = CSS.choropleth;\n      var properties = getMethodProperties(stats);\n\n      if (stats.count < thresholds.number.forBubbleMap.maxStatsCount && geometryType === 'point'){\n        visualizationType = 'bubble';\n        visFunction = CSS.bubble;\n      }\n\n      css = visFunction(properties.method, tableName, columnName, geometryType, properties.ramp);\n\n    } else if (stats.weight > thresholds.number.forCategoryOrBubbleMap.minStatsWeight || distinctPercentage < thresholds.number.forCategoryOrBubbleMap.maxDistinctPercentage) {\n      if (distinctPercentage < thresholds.number.forCategoryOrBubbleMap.forCategory.maxDistinctPercentage) {\n        visualizationType = 'category';\n\n        var cats = stats.cat_hist;\n        cats = _.sortBy(cats, function(cat) { return cat[1]; }).reverse().slice(0, ramps.category.length);\n        cats = _.sortBy(cats, function(cat) { return cat[0]; });\n        cats = cats.map(function(r) { return r[0]; });\n\n        css = CSS.category(cats, tableName, columnName, geometryType, { type: type });\n        metadata = CSS.categoryMetadata(cats, { type: type });\n\n      } else if (distinctPercentage >= thresholds.number.forCategoryOrBubbleMap.forBubble.minDistinctPercentage) {\n\n        var visFunction = CSS.choropleth;\n\n        if (geometryType === 'point'){\n          visualizationType = 'bubble';\n          visFunction = CSS.bubble;\n        }\n\n        var properties = getMethodProperties(stats);\n        css = visFunction(properties.method, tableName, columnName, geometryType, properties.ramp);\n      }\n    }\n\n  } else if (type === 'string') {\n    visualizationType = 'category';\n\n    var cats = stats.hist;\n    cats = _.sortBy(cats, function(cat) { return cat[1]; }).reverse().slice(0, ramps.category.length);\n    cats = _.sortBy(cats, function(cat) { return cat[0]; });\n    cats = cats.map(function(r) { return r[0]; });\n\n    css = CSS.category(cats, tableName, columnName, geometryType);\n    metadata = CSS.categoryMetadata(cats);\n\n  } else if (type === 'date') {\n    visualizationType = 'torque';\n    css = CSS.torque(stats, tableName);\n\n  } else if (type === 'boolean') {\n    visualizationType = 'category';\n    var ramp = ramps.bool;\n    var cats = ['true', 'false', null];\n    var options = { type: type, ramp: ramp };\n    css = CSS.category(cats, tableName, columnName, geometryType, options);\n    metadata = CSS.categoryMetadata(cats, options);\n\n  } else if (stats.type === 'geom') {\n    visualizationType = 'heatmap';\n    css = CSS.heatmap(stats, tableName, options);\n  }\n\n  var properties = {\n    geometryType: geometryType,\n    column: columnName,\n    bbox: column.bbox,\n    type: type,\n    visualizationType: visualizationType\n  };\n\n  if (css) {\n    properties.css = css;\n  } else {\n    properties.css = null;\n    properties.weight = -100;\n  }\n\n  if (stats) {\n    properties.stats = stats;\n  }\n\n  if (metadata) {\n    properties.metadata = metadata;\n  }\n\n  return properties;\n};\n",
    "var getWeightFromShape = require('./get-weight-from-shape');\nvar deepDefaults = require('./deep-defaults');\n\nvar analyzeMethods = {\n  geom: function(data) {\n    var stats = data.stats;\n    return data.isPointGeometryType && stats.cluster_rate * stats.density >= data.thresholds.geom.minStatsDensity;\n  },\n\n  string: function(data) {\n    return data.stats.weight >= data.thresholds.string.minWeight;\n  },\n\n  number: function(data) {\n    var stats = data.stats;\n    var distinctPercentage = (stats.distinct / stats.count) * 100;\n    var calcWeight = (stats.weight + getWeightFromShape(stats.dist_type)) / 2;\n    return stats.weight >= data.thresholds.number.minWeight &&\n      (\n        calcWeight >= data.thresholds.number.minCalcWeight ||\n        stats.weight > data.thresholds.number.minWeightIfNoOtherApplies ||\n        distinctPercentage < data.thresholds.number.maxDistinctPercentage\n      );\n  },\n\n  boolean: function(data) {\n    return data.stats.null_ratio <= data.thresholds.boolean.maxNullRatio;\n  },\n\n  date: function(data) {\n    return data.isPointGeometryType && data.stats.null_ratio <= data.thresholds.date.maxNullRatio;\n  }\n};\n\n/**\n * Check wether the given stats is enough to make guesses for pecan maps.\n * @param {Object} stats Results from a describe call on a table column.\n *   A stats object that lacks any relevant statistics will most likely yield a false.\n * @return {Boolean} true if good enough\n */\nmodule.exports = function(data) {\n  var isGoodEnough = false;\n  var data = data || {};\n\n  data.thresholds = deepDefaults(data.thresholds, {\n    geom: {\n      minStatsDensity: 0.1\n    },\n    string: {\n      minWeight: 0.8\n    },\n    number: {\n      minWeight: 0.1,\n      minCalcWeight: 0.5,\n      maxDistinctPercentage: 25,\n      minWeightIfNoOtherApplies: 0.5\n    },\n    boolean: {\n      maxNullRatio: 0.75\n    },\n    date: {\n      maxNullRatio: 0.75\n    }\n  });\n\n  if (data && data.stats) {\n    var method = analyzeMethods[data.stats.type];\n    if (typeof method === 'function') {\n      isGoodEnough = method.call(this, data);\n    }\n  }\n\n  return isGoodEnough;\n};\n",
    "module.exports = {\n  hasEnoughToGuess: require('./has-enough-to-guess'),\n  guessMap: require('./guess-map'),\n  getWeightFromShape: require('./get-weight-from-shape'),\n  getMethodProperties: require('./get-method-properties')\n};\n",
    "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define('queue', factory) :\n  (global.queue = factory());\n}(this, function () { 'use strict';\n\n  var slice = [].slice;\n\n  function noop() {}\n\n  var noabort = {};\n  var success = [null];\n  function newQueue(concurrency) {\n    if (!(concurrency >= 1)) throw new Error;\n\n    var q,\n        tasks = [],\n        results = [],\n        waiting = 0,\n        active = 0,\n        ended = 0,\n        starting, // inside a synchronous task callback?\n        error,\n        callback = noop,\n        callbackAll = true;\n\n    function start() {\n      if (starting) return; // let the current task complete\n      while (starting = waiting && active < concurrency) {\n        var i = ended + active,\n            t = tasks[i],\n            j = t.length - 1,\n            c = t[j];\n        t[j] = end(i);\n        --waiting, ++active, tasks[i] = c.apply(null, t) || noabort;\n      }\n    }\n\n    function end(i) {\n      return function(e, r) {\n        if (!tasks[i]) throw new Error; // detect multiple callbacks\n        --active, ++ended, tasks[i] = null;\n        if (error != null) return; // only report the first error\n        if (e != null) {\n          abort(e);\n        } else {\n          results[i] = r;\n          if (waiting) start();\n          else if (!active) notify();\n        }\n      };\n    }\n\n    function abort(e) {\n      error = e; // ignore new tasks and squelch active callbacks\n      waiting = NaN; // stop queued tasks from starting\n      notify();\n    }\n\n    function notify() {\n      if (error != null) callback(error);\n      else if (callbackAll) callback(null, results);\n      else callback.apply(null, success.concat(results));\n    }\n\n    return q = {\n      defer: function(f) {\n        if (callback !== noop) throw new Error;\n        var t = slice.call(arguments, 1);\n        t.push(f);\n        ++waiting, tasks.push(t);\n        start();\n        return q;\n      },\n      abort: function() {\n        if (error == null) {\n          var i = ended + active, t;\n          while (--i >= 0) (t = tasks[i]) && t.abort && t.abort();\n          abort(new Error(\"abort\"));\n        }\n        return q;\n      },\n      await: function(f) {\n        if (callback !== noop) throw new Error;\n        callback = f, callbackAll = false;\n        if (!waiting && !active) notify();\n        return q;\n      },\n      awaitAll: function(f) {\n        if (callback !== noop) throw new Error;\n        callback = f, callbackAll = true;\n        if (!waiting && !active) notify();\n        return q;\n      }\n    };\n  }\n\n  function queue(concurrency) {\n    return newQueue(arguments.length ? +concurrency : Infinity);\n  }\n\n  queue.version = \"1.2.1\";\n\n  return queue;\n\n}));"
  ]
}